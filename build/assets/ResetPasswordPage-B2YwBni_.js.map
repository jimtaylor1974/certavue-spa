{"version":3,"file":"ResetPasswordPage-B2YwBni_.js","sources":["../../src/api/auth/useResetPassword.ts","../../src/components/accounts/ResetPasswordPage.tsx"],"sourcesContent":["import {\r\n    useMutation,\r\n    UseMutationOptions,\r\n    UseMutationResult\r\n} from '@tanstack/react-query';\r\nimport {EmptyResult, ResetPasswordCommand} from '../../types';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport baseUrl from '../baseUrl';\r\nimport {handleResponse} from '../handleResponse';\r\n\r\nconst useResetPassword = (\r\n    options?: UseMutationOptions<EmptyResult, Error, ResetPasswordCommand>\r\n): UseMutationResult<EmptyResult, Error, ResetPasswordCommand> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    return useMutation({\r\n        mutationFn: async (command: ResetPasswordCommand) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/auth/reset-password`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify(command)\r\n                }\r\n            );\r\n            return handleResponse(response);\r\n        },\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useResetPassword;\r\n","import useRouteQuery from '../../hooks/useRouteQuery';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {toast} from 'react-toastify';\r\nimport {useForm, Controller} from 'react-hook-form';\r\nimport {ResetPasswordCommand} from '../../types';\r\nimport {useState} from 'react';\r\nimport unknownErrorToString from '../../lib/unknownErrorToString';\r\nimport useResetPassword from '../../api/auth/useResetPassword';\r\nimport {\r\n    Alert,\r\n    Form,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    InputGroup,\r\n    InputGroupText,\r\n    Button\r\n} from 'reactstrap';\r\nimport DisplayFormError from '../utility/DisplayFormError';\r\nimport {Eye, EyeOff} from 'lucide-react';\r\n\r\nfunction ResetPasswordPage() {\r\n    const navigate = useNavigate();\r\n    const query = useRouteQuery();\r\n    const userId = query.get('user_id');\r\n    const token = query.get('token');\r\n    const [backendError, setBackendError] = useState<string | null>(null);\r\n    const [showNewPassword, setShowNewPassword] = useState(false);\r\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n\r\n    const resetPasswordMutation = useResetPassword({\r\n        onSuccess: () => {\r\n            toast.success('Password reset.');\r\n            navigate('/login');\r\n        },\r\n        onError: (error: unknown) => {\r\n            setBackendError(unknownErrorToString(error));\r\n        }\r\n    });\r\n\r\n    const {\r\n        control,\r\n        handleSubmit,\r\n        formState: {errors},\r\n        clearErrors,\r\n        watch\r\n    } = useForm<{\r\n        newPassword: string;\r\n        confirmPassword: string;\r\n    }>({\r\n        defaultValues: {\r\n            newPassword: '',\r\n            confirmPassword: ''\r\n        },\r\n        mode: 'onChange'\r\n    });\r\n\r\n    if (!(userId && token)) {\r\n        navigate('/login');\r\n    }\r\n\r\n    const onSubmit = (data: {newPassword: string; confirmPassword: string}) => {\r\n        setBackendError(null);\r\n        clearErrors();\r\n\r\n        const resetPasswordCommand: ResetPasswordCommand = {\r\n            userId: userId!,\r\n            token: token!,\r\n            newPassword: data.newPassword,\r\n            confirmPassword: data.confirmPassword\r\n        };\r\n\r\n        resetPasswordMutation.mutate(resetPasswordCommand);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h1>Reset Password</h1>\r\n            <Form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormGroup>\r\n                    <Label for=\"newPassword\">New Password</Label>\r\n                    <InputGroup>\r\n                        <Controller\r\n                            name=\"newPassword\"\r\n                            control={control}\r\n                            rules={{required: 'New Password is required'}}\r\n                            render={({field}) => (\r\n                                <Input\r\n                                    {...field}\r\n                                    type={showNewPassword ? 'text' : 'password'}\r\n                                    id=\"newPassword\"\r\n                                    maxLength={512}\r\n                                    invalid={!!errors.newPassword}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <InputGroupText\r\n                            style={{cursor: 'pointer'}}\r\n                            onClick={() => setShowNewPassword(!showNewPassword)}\r\n                        >\r\n                            {showNewPassword ? (\r\n                                <EyeOff size={20} />\r\n                            ) : (\r\n                                <Eye size={20} />\r\n                            )}\r\n                        </InputGroupText>\r\n                    </InputGroup>\r\n                    <DisplayFormError\r\n                        error={errors.newPassword}\r\n                        fieldDisplayName=\"New Password\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"confirmPassword\">Confirm Password</Label>\r\n                    <InputGroup>\r\n                        <Controller\r\n                            name=\"confirmPassword\"\r\n                            control={control}\r\n                            rules={{\r\n                                required: 'Confirm Password is required',\r\n                                validate: value =>\r\n                                    value === watch('newPassword') ||\r\n                                    'Passwords do not match'\r\n                            }}\r\n                            render={({field}) => (\r\n                                <Input\r\n                                    {...field}\r\n                                    type={\r\n                                        showConfirmPassword\r\n                                            ? 'text'\r\n                                            : 'password'\r\n                                    }\r\n                                    id=\"confirmPassword\"\r\n                                    maxLength={512}\r\n                                    invalid={!!errors.confirmPassword}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <InputGroupText\r\n                            style={{cursor: 'pointer'}}\r\n                            onClick={() =>\r\n                                setShowConfirmPassword(!showConfirmPassword)\r\n                            }\r\n                        >\r\n                            {showConfirmPassword ? (\r\n                                <EyeOff size={20} />\r\n                            ) : (\r\n                                <Eye size={20} />\r\n                            )}\r\n                        </InputGroupText>\r\n                    </InputGroup>\r\n                    <DisplayFormError\r\n                        error={errors.confirmPassword}\r\n                        fieldDisplayName=\"Confirm Password\"\r\n                    />\r\n                </FormGroup>\r\n                {backendError && (\r\n                    <Alert color=\"danger\" className=\"mt-3\">\r\n                        {backendError}\r\n                    </Alert>\r\n                )}\r\n                <Button type=\"submit\" color=\"primary\" className=\"mt-3\">\r\n                    Reset Password\r\n                </Button>\r\n            </Form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ResetPasswordPage;\r\n"],"names":["useResetPassword","options","authenticatedFetch","useCreateAuthenticatedFetch","useMutation","command","response","baseUrl","handleResponse","ResetPasswordPage","navigate","useNavigate","query","useRouteQuery","userId","token","backendError","setBackendError","useState","showNewPassword","setShowNewPassword","showConfirmPassword","setShowConfirmPassword","resetPasswordMutation","toast","error","unknownErrorToString","control","handleSubmit","errors","clearErrors","watch","useForm","onSubmit","data","resetPasswordCommand","jsxs","Fragment","jsx","Form","FormGroup","Label","InputGroup","Controller","field","Input","InputGroupText","EyeOff","Eye","DisplayFormError","value","Alert","Button"],"mappings":"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"}