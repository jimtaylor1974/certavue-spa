{"version":3,"file":"AssistantEditPage-CYURKdqF.js","sources":["../../src/api/assistants/useGetAssistantByKeyOrId.ts","../../src/api/assistants/useCreateAssistant.ts","../../src/api/assistants/useUpdateAssistant.ts","../../src/api/assistants/useDeleteAssistant.ts","../../src/api/assistants/useGetAvailableTools.ts","../../src/components/sysadmin/ai/AssistantEditPage.tsx"],"sourcesContent":["import {useQuery} from '@tanstack/react-query';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch.ts';\r\nimport {handleResponse} from '../handleResponse.ts';\r\nimport baseUrl from '../baseUrl.ts';\r\nimport {AssistantModel} from '../../types.ts';\r\n\r\nexport const useGetAssistantByKeyOrId = (\r\n    keyOrId: string,\r\n    options?: Record<string, unknown>\r\n) => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n    return useQuery({\r\n        queryKey: ['assistants', keyOrId],\r\n        queryFn: async () => {\r\n            const response = await authenticatedFetch(`${baseUrl}/api/assistants/${keyOrId}`);\r\n            return handleResponse<AssistantModel>(response);\r\n        },\r\n        ...options\r\n    });\r\n};","import {useMutation} from '@tanstack/react-query';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch.ts';\r\nimport {handleResponse} from '../handleResponse.ts';\r\nimport baseUrl from '../baseUrl.ts';\r\nimport {CreateAssistantRequest, IdResult} from '../../types.ts';\r\n\r\nexport const useCreateAssistant = () => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n    \r\n    return useMutation({\r\n        mutationFn: async (request: CreateAssistantRequest): Promise<IdResult> => {\r\n            const response = await authenticatedFetch(`${baseUrl}/api/assistants`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(request)\r\n            });\r\n            return handleResponse<IdResult>(response);\r\n        }\r\n    });\r\n};","import {useMutation} from '@tanstack/react-query';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch.ts';\r\nimport {handleResponse} from '../handleResponse.ts';\r\nimport baseUrl from '../baseUrl.ts';\r\nimport {UpdateAssistantRequest, EmptyResult} from '../../types.ts';\r\n\r\nexport const useUpdateAssistant = () => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n    \r\n    return useMutation({\r\n        mutationFn: async (params: {id: string; update: UpdateAssistantRequest}): Promise<EmptyResult> => {\r\n            const response = await authenticatedFetch(`${baseUrl}/api/assistants/${params.id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(params.update)\r\n            });\r\n            return handleResponse<EmptyResult>(response);\r\n        }\r\n    });\r\n};","import {useMutation} from '@tanstack/react-query';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch.ts';\r\nimport {handleResponse} from '../handleResponse.ts';\r\nimport baseUrl from '../baseUrl.ts';\r\nimport {EmptyResult} from '../../types.ts';\r\n\r\nexport const useDeleteAssistant = () => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n    \r\n    return useMutation({\r\n        mutationFn: async (id: string): Promise<EmptyResult> => {\r\n            const response = await authenticatedFetch(`${baseUrl}/api/assistants/${id}`, {\r\n                method: 'DELETE'\r\n            });\r\n            return handleResponse<EmptyResult>(response);\r\n        }\r\n    });\r\n};","import {useQuery} from '@tanstack/react-query';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch.ts';\r\nimport {handleResponse} from '../handleResponse.ts';\r\nimport baseUrl from '../baseUrl.ts';\r\nimport {AvailableToolModel} from '../../types.ts';\r\n\r\nexport const useGetAvailableTools = (\r\n    options?: Record<string, unknown>\r\n) => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n    return useQuery({\r\n        queryKey: ['assistants', 'available-tools'],\r\n        queryFn: async () => {\r\n            const response = await authenticatedFetch(`${baseUrl}/api/assistants/available-tools`);\r\n            return handleResponse<AvailableToolModel[]>(response);\r\n        },\r\n        ...options\r\n    });\r\n};","import React, {useEffect, useState} from 'react';\r\nimport {useParams, useNavigate} from 'react-router-dom';\r\nimport {useForm, Controller} from 'react-hook-form';\r\nimport {useGetAssistantByKeyOrId} from '../../../api/assistants/useGetAssistantByKeyOrId.ts';\r\nimport {useCreateAssistant} from '../../../api/assistants/useCreateAssistant.ts';\r\nimport {useUpdateAssistant} from '../../../api/assistants/useUpdateAssistant.ts';\r\nimport {useDeleteAssistant} from '../../../api/assistants/useDeleteAssistant.ts';\r\nimport {useGetAvailableTools} from '../../../api/assistants/useGetAvailableTools.ts';\r\nimport useConfirm from '../../../hooks/useConfirm';\r\nimport DisplayFormError from '../../utility/DisplayFormError';\r\nimport ErrorDisplay from '../../utility/ErrorDisplay';\r\nimport CheckboxList from '../../utility/CheckboxList';\r\nimport classNames from 'classnames';\r\nimport {toast} from 'react-toastify';\r\nimport {Button, Form, FormGroup, Label, Input, Spinner} from 'reactstrap';\r\nimport {Trash2, Play} from 'lucide-react';\r\n\r\ntype FormValues = {\r\n    key: string;\r\n    name: string;\r\n    description: string;\r\n    userInfo: string;\r\n    instructions: string;\r\n    toolNames: string[];\r\n};\r\n\r\nconst AssistantEditPage: React.FC = () => {\r\n    const {id} = useParams<{id: string}>();\r\n    const isNew = id === '_';\r\n    const navigate = useNavigate();\r\n    const {confirm, confirmModal} = useConfirm();\r\n    const [isFormValid, setIsFormValid] = useState(false);\r\n\r\n    // Form setup with react-hook-form\r\n    const {\r\n        control,\r\n        handleSubmit,\r\n        reset,\r\n        watch,\r\n        formState: {errors, isSubmitting}\r\n    } = useForm<FormValues>({\r\n        defaultValues: {\r\n            key: '',\r\n            name: '',\r\n            description: '',\r\n            userInfo: '',\r\n            instructions: '',\r\n            toolNames: []\r\n        }\r\n    });\r\n\r\n    // Watch form values to determine validity\r\n    const keyValue = watch('key');\r\n    const nameValue = watch('name');\r\n\r\n    // Update form validity whenever key or name changes\r\n    useEffect(() => {\r\n        setIsFormValid(!!keyValue.trim() && !!nameValue.trim());\r\n    }, [keyValue, nameValue]);\r\n\r\n    // Query and mutations\r\n    const {\r\n        data: assistant,\r\n        isLoading,\r\n        error: fetchError,\r\n        refetch\r\n    } = useGetAssistantByKeyOrId(id || '', {\r\n        enabled: !isNew\r\n    });\r\n\r\n    const {\r\n        data: availableTools,\r\n        isLoading: toolsLoading,\r\n        error: toolsError\r\n    } = useGetAvailableTools();\r\n\r\n    // Effect to update form when data is loaded\r\n    useEffect(() => {\r\n        if (assistant) {\r\n            reset({\r\n                key: assistant.key || '',\r\n                name: assistant.name || '',\r\n                description: assistant.description || '',\r\n                userInfo: assistant.userInfo || '',\r\n                instructions: assistant.instructions || '',\r\n                toolNames: assistant.tools || []\r\n            });\r\n        }\r\n    }, [assistant, reset]);\r\n\r\n    const createMutation = useCreateAssistant();\r\n    const updateMutation = useUpdateAssistant();\r\n    const deleteMutation = useDeleteAssistant();\r\n\r\n    // Combined loading and error states\r\n    const isProcessing =\r\n        isSubmitting ||\r\n        createMutation.isPending ||\r\n        updateMutation.isPending ||\r\n        deleteMutation.isPending;\r\n    const error =\r\n        fetchError ||\r\n        createMutation.error ||\r\n        updateMutation.error ||\r\n        deleteMutation.error ||\r\n        toolsError;\r\n\r\n    // Determine if form should be disabled\r\n    const isFormDisabled = isProcessing;\r\n\r\n    // Handle delete\r\n    const handleDelete = () => {\r\n        if (!assistant) {\r\n            return;\r\n        }\r\n\r\n        confirm(\r\n            'Are you sure you want to permanently delete this assistant? This action cannot be undone.',\r\n            () => {\r\n                deleteMutation.mutate(assistant.id, {\r\n                    onSuccess: () => {\r\n                        navigate('/sysadmin/ai/assistants');\r\n                    }\r\n                });\r\n            }\r\n        );\r\n    };\r\n\r\n    // Form submission handler\r\n    const onSubmit = async (formData: FormValues) => {\r\n        if (isNew) {\r\n            createMutation.mutate(formData, {\r\n                onSuccess: created => {\r\n                    const newId = created?.id;\r\n                    navigate(\r\n                        newId\r\n                            ? `/sysadmin/ai/assistants/${newId}`\r\n                            : '/sysadmin/ai/assistants'\r\n                    );\r\n                }\r\n            });\r\n        } else if (assistant) {\r\n            updateMutation.mutate(\r\n                {id: assistant.id, update: formData},\r\n                {\r\n                    onSuccess: () => {\r\n                        toast.success('Assistant updated successfully');\r\n                        refetch();\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    // Show loading state\r\n    if (!isNew && isLoading) {\r\n        return (\r\n            <div className=\"d-flex justify-content-center my-5\">\r\n                <Spinner color=\"primary\" />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Show error state\r\n    if (!isNew && fetchError) {\r\n        return <ErrorDisplay error={fetchError} className=\"mt-3\" />;\r\n    }\r\n\r\n    // Show not found state\r\n    if (!isNew && !assistant) {\r\n        return (\r\n            <div className=\"alert alert-warning\">\r\n                Assistant not found.{' '}\r\n                <Button\r\n                    color=\"link\"\r\n                    onClick={() => navigate('/sysadmin/ai/assistants')}\r\n                >\r\n                    Return to assistants\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container-fluid p-4\">\r\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                <h2>{isNew ? 'Create' : 'Edit'} AI Assistant</h2>\r\n            </div>\r\n\r\n            <Form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormGroup>\r\n                    <Label for=\"key\">Key</Label>\r\n                    <Controller\r\n                        name=\"key\"\r\n                        control={control}\r\n                        rules={{\r\n                            required: 'Key is required',\r\n                            maxLength: {\r\n                                value: 100,\r\n                                message: 'Key cannot exceed 100 characters'\r\n                            },\r\n                            pattern: {\r\n                                value: /^[a-z0-9-_]+$/,\r\n                                message:\r\n                                    'Key can only contain lowercase letters, numbers, hyphens, and underscores'\r\n                            }\r\n                        }}\r\n                        render={({field}) => (\r\n                            <Input\r\n                                {...field}\r\n                                id=\"key\"\r\n                                type=\"text\"\r\n                                maxLength={100}\r\n                                invalid={!!errors.key}\r\n                                disabled={isFormDisabled}\r\n                            />\r\n                        )}\r\n                    />\r\n                    <DisplayFormError\r\n                        error={errors.key}\r\n                        fieldDisplayName=\"Key\"\r\n                    />\r\n                    <small className=\"form-text text-muted\">\r\n                        Unique identifier used by the application to retrieve\r\n                        this assistant\r\n                    </small>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label for=\"name\">Name</Label>\r\n                    <Controller\r\n                        name=\"name\"\r\n                        control={control}\r\n                        rules={{\r\n                            required: 'Name is required',\r\n                            maxLength: {\r\n                                value: 200,\r\n                                message: 'Name cannot exceed 200 characters'\r\n                            }\r\n                        }}\r\n                        render={({field}) => (\r\n                            <Input\r\n                                {...field}\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                maxLength={200}\r\n                                invalid={!!errors.name}\r\n                                disabled={isFormDisabled}\r\n                            />\r\n                        )}\r\n                    />\r\n                    <DisplayFormError\r\n                        error={errors.name}\r\n                        fieldDisplayName=\"Name\"\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label for=\"description\">Description</Label>\r\n                    <Controller\r\n                        name=\"description\"\r\n                        control={control}\r\n                        rules={{\r\n                            maxLength: {\r\n                                value: 500,\r\n                                message:\r\n                                    'Description cannot exceed 500 characters'\r\n                            }\r\n                        }}\r\n                        render={({field}) => (\r\n                            <Input\r\n                                {...field}\r\n                                id=\"description\"\r\n                                type=\"textarea\"\r\n                                maxLength={500}\r\n                                invalid={!!errors.description}\r\n                                disabled={isFormDisabled}\r\n                                rows={3}\r\n                            />\r\n                        )}\r\n                    />\r\n                    <DisplayFormError\r\n                        error={errors.description}\r\n                        fieldDisplayName=\"Description\"\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label for=\"userInfo\">User Info</Label>\r\n                    <Controller\r\n                        name=\"userInfo\"\r\n                        control={control}\r\n                        rules={{\r\n                            maxLength: {\r\n                                value: 1000,\r\n                                message:\r\n                                    'User Info cannot exceed 1000 characters'\r\n                            }\r\n                        }}\r\n                        render={({field}) => (\r\n                            <Input\r\n                                {...field}\r\n                                id=\"userInfo\"\r\n                                type=\"textarea\"\r\n                                maxLength={1000}\r\n                                invalid={!!errors.userInfo}\r\n                                disabled={isFormDisabled}\r\n                                rows={3}\r\n                            />\r\n                        )}\r\n                    />\r\n                    <DisplayFormError\r\n                        error={errors.userInfo}\r\n                        fieldDisplayName=\"User Info\"\r\n                    />\r\n                    <small className=\"form-text text-muted\">\r\n                        Information shown to users about what this assistant can\r\n                        do\r\n                    </small>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label for=\"instructions\">\r\n                        Instructions (System Prompt)\r\n                    </Label>\r\n                    <Controller\r\n                        name=\"instructions\"\r\n                        control={control}\r\n                        render={({field}) => (\r\n                            <Input\r\n                                {...field}\r\n                                id=\"instructions\"\r\n                                type=\"textarea\"\r\n                                invalid={!!errors.instructions}\r\n                                disabled={isFormDisabled}\r\n                                rows={8}\r\n                            />\r\n                        )}\r\n                    />\r\n                    <DisplayFormError\r\n                        error={errors.instructions}\r\n                        fieldDisplayName=\"Instructions\"\r\n                    />\r\n                    <small className=\"form-text text-muted\">\r\n                        System prompt that defines the assistant's behavior and\r\n                        capabilities\r\n                    </small>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label>Available Tools</Label>\r\n                    {toolsLoading && <Spinner size=\"sm\" />}\r\n                    {availableTools && (\r\n                        <Controller\r\n                            name=\"toolNames\"\r\n                            control={control}\r\n                            render={({field}) => (\r\n                                <CheckboxList\r\n                                    options={availableTools.map(\r\n                                        tool => tool.name\r\n                                    )}\r\n                                    label={(toolName: string) => {\r\n                                        const tool = availableTools.find(\r\n                                            t => t.name === toolName\r\n                                        );\r\n                                        return tool\r\n                                            ? `${tool.name} - ${tool.description}`\r\n                                            : toolName;\r\n                                    }}\r\n                                    selectedItems={field.value}\r\n                                    setSelectedItems={field.onChange}\r\n                                />\r\n                            )}\r\n                        />\r\n                    )}\r\n                </FormGroup>\r\n\r\n                <div className=\"d-flex justify-content-between align-items-center mt-4\">\r\n                    {/* Left: Delete */}\r\n                    <div>\r\n                        {!isNew && assistant && (\r\n                            <Button\r\n                                color=\"danger\"\r\n                                disabled={isProcessing}\r\n                                onClick={handleDelete}\r\n                            >\r\n                                <Trash2 size={16} className=\"me-1\" />\r\n                                Delete\r\n                            </Button>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Right: Test, Cancel and Update/Create */}\r\n                    <div>\r\n                        {!isNew && assistant && (\r\n                            <Button\r\n                                color=\"success\"\r\n                                className=\"me-2\"\r\n                                onClick={() =>\r\n                                    navigate(\r\n                                        `/sysadmin/ai/assistants/${assistant.key}/test`\r\n                                    )\r\n                                }\r\n                                disabled={isProcessing}\r\n                            >\r\n                                <Play size={16} className=\"me-1\" />\r\n                                Test\r\n                            </Button>\r\n                        )}\r\n                        <Button\r\n                            color=\"secondary\"\r\n                            className=\"me-2\"\r\n                            onClick={() => navigate('/sysadmin/ai/assistants')}\r\n                            disabled={isProcessing}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            color=\"primary\"\r\n                            type=\"submit\"\r\n                            disabled={isFormDisabled || (isNew && !isFormValid)}\r\n                            className={classNames({\r\n                                'opacity-50':\r\n                                    isFormDisabled || (isNew && !isFormValid)\r\n                            })}\r\n                        >\r\n                            {isProcessing ? (\r\n                                <>\r\n                                    <Spinner size=\"sm\" className=\"me-1\" />\r\n                                    {isNew ? 'Creating...' : 'Updating...'}\r\n                                </>\r\n                            ) : isNew ? (\r\n                                'Create'\r\n                            ) : (\r\n                                'Update'\r\n                            )}\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n\r\n                {error && <ErrorDisplay error={error} className=\"mt-3\" />}\r\n            </Form>\r\n\r\n            {confirmModal}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AssistantEditPage;\r\n"],"names":["useGetAssistantByKeyOrId","keyOrId","options","authenticatedFetch","useCreateAuthenticatedFetch","useQuery","response","baseUrl","handleResponse","useCreateAssistant","useMutation","request","useUpdateAssistant","params","useDeleteAssistant","id","useGetAvailableTools","AssistantEditPage","useParams","isNew","navigate","useNavigate","confirm","confirmModal","useConfirm","isFormValid","setIsFormValid","useState","control","handleSubmit","reset","watch","errors","isSubmitting","useForm","keyValue","nameValue","useEffect","assistant","isLoading","fetchError","refetch","availableTools","toolsLoading","toolsError","createMutation","updateMutation","deleteMutation","isProcessing","error","isFormDisabled","handleDelete","onSubmit","formData","created","newId","toast","jsx","Spinner","ErrorDisplay","jsxs","Button","Form","FormGroup","Label","Controller","field","Input","DisplayFormError","CheckboxList","tool","toolName","t","Trash2","Play","classNames","Fragment"],"mappings":"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"}