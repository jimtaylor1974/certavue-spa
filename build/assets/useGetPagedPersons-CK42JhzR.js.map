{"version":3,"file":"useGetPagedPersons-CK42JhzR.js","sources":["../../src/api/people/useGetPagedPersons.ts"],"sourcesContent":["import {PagedResult, PersonModel} from '../../types';\r\nimport {UseQueryOptions, UseQueryResult, useQuery} from '@tanstack/react-query';\r\nimport baseUrl from '../baseUrl';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport {handleResponse} from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\n\r\ntype PagedPersonQueryOptions = Omit<\r\n    UseQueryOptions<\r\n        PagedResult<PersonModel>,\r\n        Error | ProblemDetailsError,\r\n        PagedResult<PersonModel>,\r\n        readonly unknown[]\r\n    >,\r\n    'queryKey' | 'queryFn'\r\n>;\r\n\r\nconst useGetPagedPersons = (\r\n    page: number,\r\n    perPage: number,\r\n    search?: string | null,\r\n    roleFilter?: string | null,\r\n    options?: PagedPersonQueryOptions\r\n): UseQueryResult<PagedResult<PersonModel>, Error> => {\r\n    const queryParams = new URLSearchParams();\r\n    queryParams.append('page', String(page));\r\n    queryParams.append('perPage', String(perPage));\r\n\r\n    if (search) {\r\n        queryParams.append('search', search);\r\n    }\r\n\r\n    if (roleFilter) {\r\n        queryParams.append('roleFilter', roleFilter);\r\n    }\r\n\r\n    const url = `${baseUrl}/api/persons?${queryParams.toString()}`;\r\n    const queryKey = ['persons', {page, perPage, search}];\r\n\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    const queryFn = async (): Promise<PagedResult<PersonModel>> => {\r\n        const response = await authenticatedFetch(url);\r\n        return handleResponse(response);\r\n    };\r\n\r\n    return useQuery({\r\n        queryKey,\r\n        queryFn,\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useGetPagedPersons;\r\n"],"names":["useGetPagedPersons","page","perPage","search","roleFilter","options","queryParams","url","baseUrl","queryKey","authenticatedFetch","useCreateAuthenticatedFetch","useQuery","response","handleResponse"],"mappings":"wDAiBA,MAAMA,EAAqB,CACvBC,EACAC,EACAC,EACAC,EACAC,IACkD,CAC5C,MAAAC,EAAc,IAAI,gBACxBA,EAAY,OAAO,OAAQ,OAAOL,CAAI,CAAC,EACvCK,EAAY,OAAO,UAAW,OAAOJ,CAAO,CAAC,EAEzCC,GACYG,EAAA,OAAO,SAAUH,CAAM,EAGnCC,GACYE,EAAA,OAAO,aAAcF,CAAU,EAG/C,MAAMG,EAAM,GAAGC,CAAO,gBAAgBF,EAAY,UAAU,GACtDG,EAAW,CAAC,UAAW,CAAC,KAAAR,EAAM,QAAAC,EAAS,OAAAC,EAAO,EAE9CO,EAAqBC,EAA4B,EAOvD,OAAOC,EAAS,CACZ,SAAAH,EACA,QAPY,SAA+C,CACrD,MAAAI,EAAW,MAAMH,EAAmBH,CAAG,EAC7C,OAAOO,EAAeD,CAAQ,CAClC,EAKI,GAAGR,CAAA,CACN,CACL"}