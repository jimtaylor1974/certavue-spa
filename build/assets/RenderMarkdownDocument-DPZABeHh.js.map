{"version":3,"file":"RenderMarkdownDocument-DPZABeHh.js","sources":["../../src/api/documents/useGetMarkdownDocument.ts","../../src/api/documents/useGetMarkdownDocumentsByDirectory.ts","../../src/components/documents/RenderMarkdownDocument.tsx"],"sourcesContent":["import {MarkdownDocumentModel} from '../../types';\r\nimport {UseQueryOptions, UseQueryResult, useQuery} from '@tanstack/react-query';\r\nimport baseUrl from '../baseUrl';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport {handleResponse} from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\n\r\ntype MarkdownDocumentQueryOptions = Omit<\r\n    UseQueryOptions<\r\n        MarkdownDocumentModel,\r\n        Error | ProblemDetailsError,\r\n        MarkdownDocumentModel,\r\n        readonly unknown[]\r\n    >,\r\n    'queryKey' | 'queryFn'\r\n>;\r\n\r\nconst useGetMarkdownDocument = (\r\n    documentGroup: string,\r\n    path: string,\r\n    options?: MarkdownDocumentQueryOptions\r\n): UseQueryResult<MarkdownDocumentModel, Error | ProblemDetailsError> => {\r\n    const queryKey = ['markdownDocument', {documentGroup, path}];\r\n    const url = `${baseUrl}/api/markdown-documents?documentGroup=${encodeURIComponent(documentGroup)}&path=${encodeURIComponent(path)}`;\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    const queryFn = async (): Promise<MarkdownDocumentModel> => {\r\n        const response = await authenticatedFetch(url);\r\n        return handleResponse<MarkdownDocumentModel>(response);\r\n    };\r\n\r\n    return useQuery({\r\n        queryKey,\r\n        queryFn,\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useGetMarkdownDocument;\r\n","import {UseQueryOptions, UseQueryResult, useQuery} from '@tanstack/react-query';\r\nimport baseUrl from '../baseUrl';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport {handleResponse} from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\n\r\ntype MarkdownDocumentsByDirectoryQueryOptions = Omit<\r\n    UseQueryOptions<\r\n        string[],\r\n        Error | ProblemDetailsError,\r\n        string[],\r\n        readonly unknown[]\r\n    >,\r\n    'queryKey' | 'queryFn'\r\n>;\r\n\r\nconst useGetMarkdownDocumentsByDirectory = (\r\n    documentGroup: string,\r\n    directoryPath: string,\r\n    options?: MarkdownDocumentsByDirectoryQueryOptions\r\n): UseQueryResult<string[], Error | ProblemDetailsError> => {\r\n    const queryKey = [\r\n        'markdownDocumentsByDirectory',\r\n        {documentGroup, directoryPath}\r\n    ];\r\n    // When path is empty or ends with a slash, the endpoint returns a list.\r\n    const url = `${baseUrl}/api/markdown-documents?documentGroup=${encodeURIComponent(documentGroup)}&path=${encodeURIComponent(directoryPath)}`;\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    const queryFn = async (): Promise<string[]> => {\r\n        const response = await authenticatedFetch(url);\r\n        return handleResponse(response);\r\n    };\r\n\r\n    return useQuery({\r\n        queryKey,\r\n        queryFn,\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useGetMarkdownDocumentsByDirectory;\r\n","import React from 'react';\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Spinner,\r\n    Alert\r\n} from 'reactstrap';\r\nimport {FolderUp, FileText} from 'lucide-react';\r\nimport {Link} from 'react-router-dom';\r\nimport ErrorDisplay from '../utility/ErrorDisplay';\r\nimport useGetMarkdownDocument from '../../api/documents/useGetMarkdownDocument';\r\nimport useGetMarkdownDocumentsByDirectory from '../../api/documents/useGetMarkdownDocumentsByDirectory';\r\nimport MarkdownRenderer from '../utility/markdown/MarkdownRenderer';\r\nimport {useAuthStateManager} from '../../hooks/useAuthStateManager.tsx';\r\n\r\ninterface RenderMarkdownDocumentProps {\r\n    documentGroup: string;\r\n    documentPath: string;\r\n    basePath: string; // Base route path for navigation (e.g., \"/documents\" or \"/sysdocs\")\r\n}\r\n\r\nconst RenderMarkdownDocument: React.FC<RenderMarkdownDocumentProps> = ({\r\n    documentGroup,\r\n    documentPath,\r\n    basePath\r\n}) => {\r\n    const {isSysAdmin} = useAuthStateManager();\r\n\r\n    // Get the directory path for finding siblings\r\n    const lastSlashIndex = documentPath.lastIndexOf('/');\r\n    const directoryPath =\r\n        lastSlashIndex >= 0\r\n            ? documentPath.substring(0, lastSlashIndex + 1)\r\n            : '';\r\n\r\n    // Get the document content\r\n    const {\r\n        data: document,\r\n        error: documentError,\r\n        isLoading: documentLoading\r\n    } = useGetMarkdownDocument(documentGroup, documentPath, {\r\n        // Skip fetching if path is empty or ends with / (directory)\r\n        enabled: !documentPath.endsWith('/') && documentPath !== ''\r\n    });\r\n\r\n    // Get the sibling documents/directories\r\n    const {\r\n        data: siblings,\r\n        error: siblingsError,\r\n        isLoading: siblingsLoading\r\n    } = useGetMarkdownDocumentsByDirectory(documentGroup, directoryPath);\r\n\r\n    if (documentLoading || siblingsLoading) {\r\n        return <Spinner />;\r\n    }\r\n\r\n    if (documentError && !documentPath.endsWith('/') && documentPath !== '') {\r\n        return (\r\n            <ErrorDisplay\r\n                error={documentError}\r\n                title=\"Unable to fetch document\"\r\n            />\r\n        );\r\n    }\r\n\r\n    if (siblingsError) {\r\n        return (\r\n            <ErrorDisplay\r\n                error={siblingsError}\r\n                title=\"Unable to fetch document list\"\r\n            />\r\n        );\r\n    }\r\n\r\n    // Show directory listing if no document, or it's a directory path\r\n    const isDirectory = documentPath.endsWith('/') || documentPath === '';\r\n\r\n    return (\r\n        <div className=\"markdown-viewer\">\r\n            {!isDirectory && document ? (\r\n                <Card className=\"mb-4\">\r\n                    <CardBody>\r\n                        <div className=\"markdown-content\">\r\n                            <MarkdownRenderer content={document.content} />\r\n                        </div>\r\n                    </CardBody>\r\n                </Card>\r\n            ) : (\r\n                <Alert color=\"info\">\r\n                    Browsing directory: {directoryPath || '/'}\r\n                </Alert>\r\n            )}\r\n\r\n            <Card>\r\n                <CardBody>\r\n                    <h3>{isDirectory ? 'Contents' : 'Related Documents'}</h3>\r\n                    <ListGroup>\r\n                        {/* Parent directory link (except at root) */}\r\n                        {directoryPath && (\r\n                            <ListGroupItem\r\n                                tag={Link}\r\n                                to={`${basePath}${directoryPath.substring(0, directoryPath.length - 1).substring(0, directoryPath.substring(0, directoryPath.length - 1).lastIndexOf('/') + 1)}`}\r\n                            >\r\n                                <FolderUp className=\"me-2\" size={18} />\r\n                                ../ (Parent Directory)\r\n                            </ListGroupItem>\r\n                        )}\r\n\r\n                        {/* List sibling documents */}\r\n                        {siblings &&\r\n                            siblings.map(path => {\r\n                                const isFolder = path.endsWith('/');\r\n                                const name =\r\n                                    path.split('/').filter(Boolean).pop() ||\r\n                                    path;\r\n\r\n                                return (\r\n                                    <ListGroupItem\r\n                                        key={path}\r\n                                        tag={Link}\r\n                                        to={`${basePath}${path}`}\r\n                                    >\r\n                                        {isFolder ? (\r\n                                            <>\r\n                                                <FolderUp\r\n                                                    className=\"me-2\"\r\n                                                    size={18}\r\n                                                />\r\n                                                {name}\r\n                                            </>\r\n                                        ) : (\r\n                                            <>\r\n                                                <FileText\r\n                                                    className=\"me-2\"\r\n                                                    size={18}\r\n                                                />\r\n                                                {name}\r\n                                            </>\r\n                                        )}\r\n                                    </ListGroupItem>\r\n                                );\r\n                            })}\r\n                    </ListGroup>\r\n                </CardBody>\r\n            </Card>\r\n            {document && isSysAdmin() && (\r\n                <div className=\"d-flex justify-content-end mt-3\">\r\n                    <Link\r\n                        className=\"btn btn-primary\"\r\n                        to={`/sysadmin/documents/edit/${document.id}`}\r\n                    >\r\n                        Edit\r\n                    </Link>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RenderMarkdownDocument;\r\n"],"names":["useGetMarkdownDocument","documentGroup","path","options","queryKey","url","baseUrl","authenticatedFetch","useCreateAuthenticatedFetch","useQuery","response","handleResponse","useGetMarkdownDocumentsByDirectory","directoryPath","RenderMarkdownDocument","documentPath","basePath","isSysAdmin","useAuthStateManager","lastSlashIndex","document","documentError","documentLoading","siblings","siblingsError","siblingsLoading","Spinner","jsx","ErrorDisplay","isDirectory","jsxs","Card","CardBody","MarkdownRenderer","Alert","ListGroup","ListGroupItem","Link","FolderUp","isFolder","name","Fragment","FileText"],"mappings":"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"}