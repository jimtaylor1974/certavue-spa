{"version":3,"file":"DashboardPage-HZAeX5OQ.js","sources":["../../src/components/main/dashboard/DashboardControls.tsx","../../src/api/projects-dashboard/useGetProjectsDashboardData.ts","../../src/api/allocations/useBulkUpdateDashboardAllocations.ts","../../src/components/main/dashboard/TimelineHeader.tsx","../../src/lib/heatmapColors.ts","../../src/components/main/dashboard/AllocationTooltip.tsx","../../src/hooks/useTooltip.tsx","../../src/components/main/dashboard/ProjectResourceAllocationCell.tsx","../../src/components/main/dashboard/AddResourceAllocationCell.tsx","../../src/components/utility/EngagementContextIndicator.tsx","../../src/lib/allocationCalculations.ts","../../src/lib/clientWorkingHoursCalculator.ts","../../src/components/main/dashboard/ProjectsView.tsx","../../src/api/resources-dashboard/useGetResourcesDashboardData.ts","../../src/components/main/dashboard/ResourcesView.tsx","../../src/components/main/dashboard/DashboardContainer.tsx","../../src/components/main/dashboard/DashboardPage.tsx"],"sourcesContent":["import React from 'react';\r\nimport {DashboardControlsProps} from './DashboardContainer';\r\n\r\nconst DashboardControls: React.FC<DashboardControlsProps> = ({\r\n    viewType,\r\n    onViewTypeChange,\r\n    onNavigate,\r\n    onGoToWeek,\r\n    navOptions\r\n}) => {\r\n    return (\r\n        <div\r\n            style={{\r\n                marginBottom: '24px',\r\n                padding: '20px',\r\n                background: '#f8fafc',\r\n                borderRadius: '8px',\r\n                border: '1px solid #e2e8f0'\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    flexWrap: 'wrap',\r\n                    gap: '16px'\r\n                }}\r\n            >\r\n                {/* View Type Selector and Title */}\r\n                <div\r\n                    style={{display: 'flex', alignItems: 'center', gap: '16px'}}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                            background: 'white',\r\n                            borderRadius: '6px',\r\n                            border: '1px solid #d1d5db',\r\n                            overflow: 'hidden'\r\n                        }}\r\n                    >\r\n                        <button\r\n                            onClick={() => onViewTypeChange('projects')}\r\n                            style={{\r\n                                padding: '8px 16px',\r\n                                border: 'none',\r\n                                background:\r\n                                    viewType === 'projects'\r\n                                        ? '#4F46E5'\r\n                                        : 'white',\r\n                                color:\r\n                                    viewType === 'projects'\r\n                                        ? 'white'\r\n                                        : '#374151',\r\n                                cursor: 'pointer',\r\n                                fontSize: '14px',\r\n                                fontWeight: '500',\r\n                                borderRight: '1px solid #d1d5db'\r\n                            }}\r\n                        >\r\n                            Projects\r\n                        </button>\r\n                        <button\r\n                            onClick={() => onViewTypeChange('resources')}\r\n                            style={{\r\n                                padding: '8px 16px',\r\n                                border: 'none',\r\n                                background:\r\n                                    viewType === 'resources'\r\n                                        ? '#4F46E5'\r\n                                        : 'white',\r\n                                color:\r\n                                    viewType === 'resources'\r\n                                        ? 'white'\r\n                                        : '#374151',\r\n                                cursor: 'pointer',\r\n                                fontSize: '14px',\r\n                                fontWeight: '500'\r\n                            }}\r\n                        >\r\n                            Resources\r\n                        </button>\r\n                    </div>\r\n\r\n                    <h1\r\n                        style={{\r\n                            margin: 0,\r\n                            color: '#1e293b',\r\n                            fontSize: '24px',\r\n                            fontWeight: '600'\r\n                        }}\r\n                    >\r\n                        {viewType === 'projects' ? 'Projects' : 'Resources'}\r\n                    </h1>\r\n                </div>\r\n\r\n                {/* Controls */}\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        gap: '12px',\r\n                        alignItems: 'center',\r\n                        flexWrap: 'wrap'\r\n                    }}\r\n                >\r\n                    {/* Jump To Buttons */}\r\n                    <button\r\n                        onClick={() => onNavigate('today')}\r\n                        style={{\r\n                            padding: '8px 12px',\r\n                            border: '1px solid #d1d5db',\r\n                            borderRadius: '4px',\r\n                            background: 'white',\r\n                            cursor: 'pointer',\r\n                            fontSize: '14px'\r\n                        }}\r\n                    >\r\n                        Today\r\n                    </button>\r\n                    {navOptions.map(opt => (\r\n                        <button\r\n                            key={opt.globalWeek}\r\n                            onClick={() => onGoToWeek(opt.globalWeek)}\r\n                            style={{\r\n                                padding: '8px 12px',\r\n                                border: '1px solid #d1d5db',\r\n                                borderRadius: '4px',\r\n                                background: 'white',\r\n                                cursor: 'pointer',\r\n                                fontSize: '14px'\r\n                            }}\r\n                        >\r\n                            {opt.label}\r\n                        </button>\r\n                    ))}\r\n\r\n                    {/* Navigation Buttons */}\r\n                    <button\r\n                        onClick={() => onNavigate('prev')}\r\n                        style={{\r\n                            padding: '8px 12px',\r\n                            border: '1px solid #d1d5db',\r\n                            borderRadius: '4px',\r\n                            background: 'white',\r\n                            cursor: 'pointer',\r\n                            fontSize: '14px'\r\n                        }}\r\n                    >\r\n                        {'<'}\r\n                    </button>\r\n                    <button\r\n                        onClick={() => onNavigate('next')}\r\n                        style={{\r\n                            padding: '8px 12px',\r\n                            border: '1px solid #d1d5db',\r\n                            borderRadius: '4px',\r\n                            background: 'white',\r\n                            cursor: 'pointer',\r\n                            fontSize: '14px'\r\n                        }}\r\n                    >\r\n                        {'>'}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DashboardControls;\r\n","import {useQuery, UseQueryOptions, UseQueryResult} from '@tanstack/react-query';\r\nimport baseUrl from '../baseUrl';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport {handleResponse} from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\nimport { ProjectsDashboardData } from '../../types';\r\n\r\n// Request parameters for the API\r\nexport interface ProjectsDashboardRequest {\r\n    startGlobalWeekNumber?: number;\r\n    numberOfWeeks?: number;\r\n}\r\n\r\ntype ProjectsDashboardDataQueryOptions = Omit<\r\n    UseQueryOptions<\r\n        ProjectsDashboardData,\r\n        Error | ProblemDetailsError,\r\n        ProjectsDashboardData,\r\n        readonly unknown[]\r\n    >,\r\n    'queryKey' | 'queryFn'\r\n>;\r\n\r\nconst useGetProjectsDashboardData = (\r\n    params: ProjectsDashboardRequest,\r\n    options?: ProjectsDashboardDataQueryOptions\r\n): UseQueryResult<ProjectsDashboardData, Error> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    // Build query string from parameters\r\n    const queryString = params\r\n        ? new URLSearchParams(\r\n              // Filter out any null/undefined values before creating the search params\r\n              Object.fromEntries(\r\n                  Object.entries(params).filter(([, v]) => v != null)\r\n              )\r\n          ).toString()\r\n        : '';\r\n\r\n    const url = `${baseUrl}/api/projects/dashboard-data${queryString ? `?${queryString}` : ''}`;\r\n\r\n    // Include params in query key for proper caching\r\n    const queryKey = ['projects-dashboard-data', params] as const;\r\n\r\n    return useQuery({\r\n        queryKey,\r\n        queryFn: async () => {\r\n            const response = await authenticatedFetch(url);\r\n            return handleResponse<ProjectsDashboardData>(response);\r\n        },\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useGetProjectsDashboardData;\r\n","import {\r\n    useMutation,\r\n    useQueryClient,\r\n    UseMutationResult\r\n} from '@tanstack/react-query';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport baseUrl from '../baseUrl';\r\nimport {handleResponse} from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\nimport {EmptyResult} from '../../types';\r\n\r\nexport interface DashboardAllocationUpdateItem {\r\n    id: string | null; // The ID of the ProjectAllocation entity, null for new allocations\r\n    projectId: string;\r\n    resourceId: string; // Could be PersonId or TeamId\r\n    globalWeekNumber: number;\r\n    hoursBAU: number;\r\n    hoursNonBAU: number;\r\n}\r\n\r\nexport interface BulkUpdateDashboardAllocationsCommand {\r\n    allocations: DashboardAllocationUpdateItem[];\r\n    changeReason?: string;\r\n}\r\n\r\nexport const useBulkUpdateDashboardAllocations = (): UseMutationResult<\r\n    EmptyResult,\r\n    Error | ProblemDetailsError,\r\n    BulkUpdateDashboardAllocationsCommand\r\n> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation({\r\n        mutationFn: async (command: BulkUpdateDashboardAllocationsCommand) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/dashboard/allocations/bulk-update`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify(command)\r\n                }\r\n            );\r\n            return handleResponse<EmptyResult>(response);\r\n        },\r\n        onSuccess: () => {\r\n            // Invalidate both dashboard queries to refresh the data\r\n            queryClient.invalidateQueries({\r\n                queryKey: ['projects-dashboard-data']\r\n            });\r\n            queryClient.invalidateQueries({\r\n                queryKey: ['resources-dashboard-data']\r\n            });\r\n        }\r\n    });\r\n};","import React from 'react';\r\nimport {format} from 'date-fns';\r\nimport {Filter} from 'lucide-react';\r\nimport {TimelineData} from './DashboardContainer';\r\nimport { getWeekInfo } from '../../../lib/scheduling';\r\n\r\ninterface TimelineHeaderProps {\r\n    timelineData: TimelineData;\r\n    title: string;\r\n    onToggleFilter?: () => void;\r\n    isFilterVisible?: boolean;\r\n    hasActiveFilters?: boolean;\r\n}\r\n\r\nconst TimelineHeader: React.FC<TimelineHeaderProps> = ({\r\n    timelineData,\r\n    title,\r\n    onToggleFilter,\r\n    isFilterVisible,\r\n    hasActiveFilters\r\n}) => {\r\n    return (\r\n        <div\r\n            style={{\r\n                position: 'sticky',\r\n                top: 0,\r\n                background: 'white',\r\n                zIndex: 10,\r\n                borderBottom: '2px solid #e2e8f0',\r\n                marginBottom: '8px'\r\n            }}\r\n        >\r\n            {/* Year Groups */}\r\n            {timelineData.yearGroups.length > 0 && (\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        borderBottom: '1px solid #e5e7eb'\r\n                    }}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            width: '300px',\r\n                            padding: '4px 16px',\r\n                            fontWeight: '500',\r\n                            color: '#6b7280',\r\n                            fontSize: '11px',\r\n                            borderRight: '1px solid #e5e7eb'\r\n                        }}\r\n                    >\r\n                        Year\r\n                    </div>\r\n                    <div style={{flex: 1, display: 'flex'}}>\r\n                        {timelineData.yearGroups.map((group, idx) => (\r\n                            <div\r\n                                key={`${group.label}-year-${idx}`}\r\n                                style={{\r\n                                    width: `${(group.span / timelineData.columns.length) * 100}%`,\r\n                                    textAlign: 'center',\r\n                                    padding: '4px',\r\n                                    fontSize: '11px',\r\n                                    fontWeight: '500',\r\n                                    color: '#6b7280',\r\n                                    borderRight: '1px solid #eee'\r\n                                }}\r\n                            >\r\n                                {group.label}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Quarter Groups */}\r\n            {timelineData.quarterGroups.length > 0 && (\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        borderBottom: '1px solid #e5e7eb'\r\n                    }}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            width: '300px',\r\n                            padding: '4px 16px',\r\n                            fontWeight: '500',\r\n                            color: '#6b7280',\r\n                            fontSize: '11px',\r\n                            borderRight: '1px solid #e5e7eb'\r\n                        }}\r\n                    >\r\n                        Quarter\r\n                    </div>\r\n                    <div style={{flex: 1, display: 'flex'}}>\r\n                        {timelineData.quarterGroups.map((group, idx) => (\r\n                            <div\r\n                                key={`${group.label}-quarter-${idx}`}\r\n                                style={{\r\n                                    width: `${(group.span / timelineData.columns.length) * 100}%`,\r\n                                    textAlign: 'center',\r\n                                    padding: '4px',\r\n                                    fontSize: '11px',\r\n                                    fontWeight: '500',\r\n                                    color: '#6b7280',\r\n                                    borderRight: '1px solid #eee'\r\n                                }}\r\n                            >\r\n                                {group.label}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Month Groups */}\r\n            {timelineData.monthGroups.length > 0 && (\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        borderBottom: '1px solid #e5e7eb'\r\n                    }}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            width: '300px',\r\n                            padding: '4px 16px',\r\n                            fontWeight: '500',\r\n                            color: '#6b7280',\r\n                            fontSize: '11px',\r\n                            borderRight: '1px solid #e5e7eb'\r\n                        }}\r\n                    >\r\n                        Month\r\n                    </div>\r\n                    <div style={{flex: 1, display: 'flex'}}>\r\n                        {timelineData.monthGroups.map((group, idx) => (\r\n                            <div\r\n                                key={`${group.label}-month-${idx}`}\r\n                                style={{\r\n                                    width: `${(group.span / timelineData.columns.length) * 100}%`,\r\n                                    textAlign: 'center',\r\n                                    padding: '4px',\r\n                                    fontSize: '11px',\r\n                                    fontWeight: '500',\r\n                                    color: '#6b7280',\r\n                                    borderRight: '1px solid #eee'\r\n                                }}\r\n                            >\r\n                                {group.label}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Column Headers */}\r\n            <div style={{display: 'flex', minHeight: '40px'}}>\r\n                <div\r\n                    style={{\r\n                        width: '300px',\r\n                        padding: '8px 16px',\r\n                        fontWeight: '600',\r\n                        color: '#374151',\r\n                        borderRight: '1px solid #e5e7eb',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'space-between'\r\n                    }}\r\n                >\r\n                    <span>{title}</span>\r\n                    {onToggleFilter && (\r\n                        <button\r\n                            onClick={onToggleFilter}\r\n                            style={{\r\n                                background: 'none',\r\n                                border: 'none',\r\n                                cursor: 'pointer',\r\n                                padding: '4px',\r\n                                borderRadius: '4px',\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                                color: hasActiveFilters ? '#3b82f6' : '#6b7280',\r\n                                backgroundColor: isFilterVisible ? '#f3f4f6' : 'transparent'\r\n                            }}\r\n                            title={isFilterVisible ? 'Hide filters' : 'Show filters'}\r\n                        >\r\n                            <Filter size={16} />\r\n                            {hasActiveFilters && (\r\n                                <div\r\n                                    style={{\r\n                                        width: '6px',\r\n                                        height: '6px',\r\n                                        borderRadius: '50%',\r\n                                        backgroundColor: '#3b82f6',\r\n                                        position: 'absolute',\r\n                                        marginLeft: '10px',\r\n                                        marginTop: '-8px'\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        </button>\r\n                    )}\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        flex: 1,\r\n                        display: 'flex',\r\n                        background: '#f9fafb'\r\n                    }}\r\n                >\r\n                    {timelineData.columns.map((col, index) => {\r\n                        // Check if this column represents today's week\r\n                        const today = new Date();\r\n                        const todayWeekInfo = getWeekInfo(today);\r\n                        const isToday = col.globalWeekNumber === todayWeekInfo.globalWeekNumber;\r\n                        \r\n                        // Calculate position within the week (0 = Monday, 6 = Sunday)\r\n                        let dayPositionPercent = 50; // Default to center\r\n                        if (isToday) {\r\n                            const mondayOfThisWeek = todayWeekInfo.mondayOfWeek;\r\n                            const dayOfWeek = Math.floor((today.getTime() - mondayOfThisWeek.getTime()) / (1000 * 60 * 60 * 24));\r\n                            // Convert day of week (0-6) to percentage position within the week column\r\n                            // Add small margins (10% on each side) so arrow doesn't touch edges\r\n                            dayPositionPercent = 10 + (Math.max(0, Math.min(6, dayOfWeek)) / 6) * 80;\r\n                        }\r\n                        \r\n                        return (\r\n                            <div\r\n                                key={`${col.label}-${index}-col`}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    borderRight: '1px solid #e5e7eb',\r\n                                    padding: '8px 4px',\r\n                                    fontSize: '12px',\r\n                                    color: '#6b7280',\r\n                                    textAlign: 'center',\r\n                                    minWidth: '50px',\r\n                                    position: 'relative'\r\n                                }}\r\n                            >\r\n                                <div>{col.label}</div>\r\n                                <div style={{fontSize: '10px', opacity: 0.7}}>\r\n                                    {format(col.startDate, 'MMM d')}\r\n                                </div>\r\n                                \r\n                                {/* Today indicator arrow */}\r\n                                {isToday && (\r\n                                    <div\r\n                                        style={{\r\n                                            position: 'absolute',\r\n                                            bottom: '-12px',\r\n                                            left: `${dayPositionPercent}%`,\r\n                                            transform: 'translateX(-50%)',\r\n                                            zIndex: 1000,\r\n                                            pointerEvents: 'none'\r\n                                        }}\r\n                                        title={`Today: ${today.toLocaleDateString()}`}\r\n                                    >\r\n                                        <div\r\n                                            style={{\r\n                                                width: 0,\r\n                                                height: 0,\r\n                                                borderLeft: '8px solid transparent',\r\n                                                borderRight: '8px solid transparent',\r\n                                                borderTop: '12px solid #dc2626',\r\n                                                filter: 'drop-shadow(0 2px 4px rgba(220, 38, 38, 0.3))'\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TimelineHeader;\r\n","/**\r\n * Color constants for resource allocation heatmap\r\n */\r\nconst COLORS = {\r\n    EMPTY: '#f8fafc',\r\n    GREEN: 'rgba(34, 197, 94, 0.7)',\r\n    AMBER: 'rgba(245, 158, 11, 0.7)',\r\n    RED: 'rgba(239, 68, 68, 0.7)'\r\n} as const;\r\n\r\n/**\r\n * Thresholds for allocation levels\r\n */\r\nconst THRESHOLDS = {\r\n    BAU_OVERALLOCATION: 1.0,\r\n    NON_BAU_HIGH: 0.5,\r\n    NON_BAU_MEDIUM: 0.25\r\n} as const;\r\n\r\n/**\r\n * Priority levels for color selection (higher number = higher priority)\r\n */\r\nenum ColorPriority {\r\n    GREEN = 1,\r\n    AMBER = 2,\r\n    RED = 3\r\n}\r\n\r\n/**\r\n * Determines the severity level and color for a given allocation type\r\n */\r\nfunction getAllocationSeverity(\r\n    percentage: number,\r\n    type: 'BAU' | 'NON_BAU'\r\n): {color: string; priority: ColorPriority} {\r\n    if (type === 'BAU') {\r\n        return percentage > THRESHOLDS.BAU_OVERALLOCATION\r\n            ? {color: COLORS.RED, priority: ColorPriority.RED}\r\n            : {color: COLORS.GREEN, priority: ColorPriority.GREEN};\r\n    }\r\n\r\n    // NON_BAU logic\r\n    if (percentage > THRESHOLDS.NON_BAU_HIGH) {\r\n        return {color: COLORS.RED, priority: ColorPriority.RED};\r\n    }\r\n    if (percentage > THRESHOLDS.NON_BAU_MEDIUM) {\r\n        return {color: COLORS.AMBER, priority: ColorPriority.AMBER};\r\n    }\r\n    return {color: COLORS.GREEN, priority: ColorPriority.GREEN};\r\n}\r\n\r\n/**\r\n * Returns a heatmap color based on allocation percentages.\r\n * Used to indicate resource allocation levels with traffic light colors.\r\n *\r\n * @param percentageBAU - BAU allocation percentage (0.0 to 1.0+)\r\n * @param percentageNonBAU - NonBAU allocation percentage (0.0 to 1.0+)\r\n * @returns CSS color string\r\n */\r\nexport const getHeatmapColor = (\r\n    percentageBAU: number,\r\n    percentageNonBAU: number\r\n): string => {\r\n    // Handle empty/zero allocations\r\n    const hasBAU = percentageBAU > 0;\r\n    const hasNonBAU = percentageNonBAU > 0;\r\n\r\n    if (!hasBAU && !hasNonBAU) {\r\n        return COLORS.EMPTY;\r\n    }\r\n\r\n    // Get severity for each allocation type\r\n    const severities = [];\r\n\r\n    if (hasBAU) {\r\n        severities.push(getAllocationSeverity(percentageBAU, 'BAU'));\r\n    }\r\n\r\n    if (hasNonBAU) {\r\n        severities.push(getAllocationSeverity(percentageNonBAU, 'NON_BAU'));\r\n    }\r\n\r\n    // Return the color with the highest priority (most restrictive)\r\n    const highestPriority = Math.max(...severities.map(s => s.priority));\r\n    const selectedSeverity = severities.find(\r\n        s => s.priority === highestPriority\r\n    );\r\n\r\n    return selectedSeverity?.color ?? COLORS.GREEN;\r\n};\r\n\r\n/**\r\n * Returns a warning color for specific warning types\r\n * @param type - The type of warning ('red', 'amber', 'green')\r\n * @returns CSS color string\r\n */\r\nexport const getWarningColor = (type: 'red' | 'amber' | 'green'): string => {\r\n    switch (type) {\r\n        case 'red':\r\n            return COLORS.RED;\r\n        case 'amber':\r\n            return COLORS.AMBER;\r\n        case 'green':\r\n            return COLORS.GREEN;\r\n        default:\r\n            return COLORS.GREEN;\r\n    }\r\n};\r\n","import React from 'react';\r\nimport {Calendar, Clock, Users} from 'lucide-react';\r\n\r\ninterface AllocationInfo {\r\n    id: string;\r\n    globalWeekNumber: number;\r\n    weekBeginningOn: string;\r\n    weekEndOn: string;\r\n    hoursBAU: number;\r\n    hoursNonBAU: number;\r\n    percentageBAU?: number;\r\n    percentageNonBAU?: number;\r\n    description?: string;\r\n    phaseName?: string;\r\n    phaseColor?: string;\r\n}\r\n\r\ninterface AllocationTooltipProps {\r\n    allocation: AllocationInfo;\r\n    resourceName: string;\r\n    projectType: string;\r\n    totalWeeklyHours?: number;\r\n    totalWeeklyPercentage?: number;\r\n    availableHours?: number;\r\n    baseHours?: number;\r\n    teamAllocations?: Array<{\r\n        teamId: string;\r\n        teamName: string;\r\n        hoursBAU: number;\r\n        hoursNonBAU: number;\r\n    }>;\r\n}\r\n\r\nconst AllocationTooltip: React.FC<AllocationTooltipProps> = ({\r\n    allocation,\r\n    resourceName,\r\n    projectType,\r\n    totalWeeklyHours,\r\n    totalWeeklyPercentage,\r\n    availableHours,\r\n    baseHours,\r\n    teamAllocations\r\n}) => {\r\n    const weekStart = new Date(allocation.weekBeginningOn).toLocaleDateString('en-US', { \r\n        month: 'short', \r\n        day: 'numeric' \r\n    });\r\n    const weekEnd = new Date(allocation.weekEndOn).toLocaleDateString('en-US', { \r\n        month: 'short', \r\n        day: 'numeric' \r\n    });\r\n\r\n    return (\r\n        <div style={{\r\n            background: 'rgba(0, 0, 0, 0.9)',\r\n            color: 'white',\r\n            padding: '16px',\r\n            borderRadius: '8px',\r\n            fontSize: '13px',\r\n            lineHeight: '1.5',\r\n            minWidth: '320px',\r\n            maxWidth: '400px',\r\n            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.3)',\r\n            zIndex: 1000,\r\n            position: 'absolute',\r\n            pointerEvents: 'none'\r\n        }}>\r\n            <div style={{ fontWeight: '600', marginBottom: '8px', color: '#60a5fa' }}>\r\n                {resourceName}\r\n            </div>\r\n            \r\n            <div style={{ marginBottom: '6px' }}>\r\n                <strong>Project:</strong> {projectType}\r\n            </div>\r\n            \r\n            <div style={{ marginBottom: '6px', display: 'flex', alignItems: 'center', gap: '4px' }}>\r\n                <Calendar size={12} />\r\n                <span>Week {allocation.globalWeekNumber} ({weekStart} - {weekEnd})</span>\r\n            </div>\r\n            \r\n            <div style={{ marginBottom: '6px', display: 'flex', alignItems: 'center', gap: '4px' }}>\r\n                <Clock size={12} />\r\n                <span>This project: {(allocation.hoursBAU + allocation.hoursNonBAU).toFixed(1)}h</span>\r\n                {(allocation.hoursBAU > 0 && allocation.hoursNonBAU > 0) && (\r\n                    <span style={{ fontSize: '11px', color: '#94a3b8' }}>\r\n                        ({allocation.hoursBAU}h BAU + {allocation.hoursNonBAU}h NonBAU)\r\n                    </span>\r\n                )}\r\n            </div>\r\n            \r\n            {allocation.phaseName && (\r\n                <div style={{\r\n                    marginBottom: '6px',\r\n                    padding: '6px 8px',\r\n                    background: allocation.phaseColor || 'rgba(255, 255, 255, 0.1)',\r\n                    borderRadius: '4px',\r\n                    fontSize: '11px',\r\n                    fontWeight: '500',\r\n                    color: 'white'\r\n                }}>\r\n                    Phase: {allocation.phaseName}\r\n                </div>\r\n            )}\r\n            \r\n            {allocation.description && (\r\n                <div style={{\r\n                    marginBottom: '6px',\r\n                    padding: '8px',\r\n                    background: 'rgba(255, 255, 255, 0.1)',\r\n                    borderRadius: '4px',\r\n                    fontSize: '12px',\r\n                    fontStyle: 'italic'\r\n                }}>\r\n                    <strong>Task:</strong> {allocation.description}\r\n                </div>\r\n            )}\r\n            \r\n            {teamAllocations && teamAllocations.length > 0 && (\r\n                <div style={{\r\n                    marginTop: '8px',\r\n                    paddingTop: '8px',\r\n                    borderTop: '1px solid rgba(255, 255, 255, 0.2)',\r\n                    fontSize: '11px'\r\n                }}>\r\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '4px', marginBottom: '4px', fontWeight: '600' }}>\r\n                        <Users size={12} />\r\n                        <span>Team Allocations:</span>\r\n                    </div>\r\n                    {teamAllocations.map(team => (\r\n                        <div key={team.teamId} style={{ marginLeft: '16px', marginBottom: '2px' }}>\r\n                            {team.teamName}: {(team.hoursBAU + team.hoursNonBAU).toFixed(1)}h\r\n                            {(team.hoursBAU > 0 && team.hoursNonBAU > 0) && (\r\n                                <span style={{ fontSize: '10px', color: '#94a3b8' }}>\r\n                                    {' '}({team.hoursBAU}h BAU + {team.hoursNonBAU}h NonBAU)\r\n                                </span>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n\r\n            {(totalWeeklyHours && totalWeeklyPercentage) || availableHours || baseHours ? (\r\n                <div style={{\r\n                    marginTop: '8px',\r\n                    paddingTop: '8px',\r\n                    borderTop: '1px solid rgba(255, 255, 255, 0.2)',\r\n                    fontSize: '11px'\r\n                }}>\r\n                    {totalWeeklyHours && totalWeeklyPercentage && (\r\n                        <>\r\n                            <div>Total week allocation: {totalWeeklyHours.toFixed(1)}h</div>\r\n                            <div>Capacity utilization: {Math.round(totalWeeklyPercentage * 100)}%</div>\r\n                        </>\r\n                    )}\r\n                    {availableHours !== undefined && (\r\n                        <div>Available hours this week: {availableHours.toFixed(1)}h</div>\r\n                    )}\r\n                    {baseHours !== undefined && availableHours !== undefined && baseHours !== availableHours && (\r\n                        <div style={{ fontSize: '10px', color: '#94a3b8' }}>\r\n                            (Base: {baseHours.toFixed(1)}h, reduced by holidays/leave)\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AllocationTooltip;","import React, {useState, useCallback, useRef, useEffect} from 'react';\r\n\r\ninterface TooltipState {\r\n    isVisible: boolean;\r\n    x: number;\r\n    y: number;\r\n    content: React.ReactNode;\r\n}\r\n\r\ninterface UseTooltipReturn {\r\n    tooltipProps: {\r\n        onMouseEnter: (event: React.MouseEvent, content: React.ReactNode) => void;\r\n        onMouseLeave: () => void;\r\n        onMouseMove: (event: React.MouseEvent) => void;\r\n    };\r\n    TooltipPortal: React.FC;\r\n}\r\n\r\nexport const useTooltip = (): UseTooltipReturn => {\r\n    const [tooltip, setTooltip] = useState<TooltipState>({\r\n        isVisible: false,\r\n        x: 0,\r\n        y: 0,\r\n        content: null\r\n    });\r\n\r\n    const timeoutRef = useRef<number | undefined>(undefined);\r\n\r\n    const showTooltip = useCallback((event: React.MouseEvent, content: React.ReactNode) => {\r\n        if (timeoutRef.current) {\r\n            window.clearTimeout(timeoutRef.current);\r\n        }\r\n\r\n        setTooltip({\r\n            isVisible: true,\r\n            x: event.clientX,\r\n            y: event.clientY - 10,\r\n            content\r\n        });\r\n    }, []);\r\n\r\n    const hideTooltip = useCallback(() => {\r\n        timeoutRef.current = window.setTimeout(() => {\r\n            setTooltip(prev => ({ ...prev, isVisible: false }));\r\n        }, 100);\r\n    }, []);\r\n\r\n    const updateTooltipPosition = useCallback((event: React.MouseEvent) => {\r\n        if (tooltip.isVisible) {\r\n            setTooltip(prev => ({\r\n                ...prev,\r\n                x: event.clientX,\r\n                y: event.clientY - 10\r\n            }));\r\n        }\r\n    }, [tooltip.isVisible]);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            if (timeoutRef.current) {\r\n                window.clearTimeout(timeoutRef.current);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const TooltipPortal: React.FC = () => {\r\n        if (!tooltip.isVisible || !tooltip.content) return null;\r\n\r\n        return (\r\n            <div\r\n                style={{\r\n                    position: 'fixed',\r\n                    left: tooltip.x + 10,\r\n                    top: tooltip.y,\r\n                    zIndex: 10000,\r\n                    pointerEvents: 'none'\r\n                }}\r\n            >\r\n                {tooltip.content}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return {\r\n        tooltipProps: {\r\n            onMouseEnter: showTooltip,\r\n            onMouseLeave: hideTooltip,\r\n            onMouseMove: updateTooltipPosition\r\n        },\r\n        TooltipPortal\r\n    };\r\n};","import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport { Edit2, Save, X } from 'lucide-react';\r\n\r\nimport { getHeatmapColor, getWarningColor } from '../../../lib/heatmapColors';\r\nimport AllocationTooltip from './AllocationTooltip';\r\nimport { useTooltip } from '../../../hooks/useTooltip';\r\nimport { ProjectResource, DashboardProjectModel, DashboardAllocationModel, EngagementContext, AssignmentType } from '../../../types';\r\n\r\n// This is a simplified version of the calculation logic for the cell's context\r\ninterface WeeklyTotals {\r\n    totalHours: number;\r\n    totalHoursBAU: number;\r\n    totalHoursNonBAU: number;\r\n    availableHours?: number; // Week-specific available hours for this resource\r\n}\r\n\r\ninterface ProjectResourceAllocationCellProps {\r\n    allocation: DashboardAllocationModel | null; // Can be null for empty cells\r\n    resource: ProjectResource;\r\n    project: DashboardProjectModel;\r\n    globalWeekNumber: number;\r\n    canEdit: boolean;\r\n    onAllocationChange: (allocationId: string | null, projectId: string, resourceId: string, globalWeekNumber: number, newHours: { hoursBAU: number; hoursNonBAU: number }, assignmentType: AssignmentType) => void;\r\n    getBarStyles: (startWeek: number, duration: number) => React.CSSProperties | null;\r\n    calculateTotalWeeklyAllocation: (resourceId: string, globalWeekNumber: number) => WeeklyTotals;\r\n}\r\n\r\nconst ProjectResourceAllocationCell: React.FC<ProjectResourceAllocationCellProps> = ({\r\n    allocation,\r\n    resource,\r\n    project,\r\n    globalWeekNumber,\r\n    canEdit,\r\n    onAllocationChange,\r\n    getBarStyles,\r\n    calculateTotalWeeklyAllocation,\r\n}) => {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [isHovered, setIsHovered] = useState(false);\r\n    const [editedHours, setEditedHours] = useState({\r\n        hoursBAU: allocation?.hoursBAU ?? 0,\r\n        hoursNonBAU: allocation?.hoursNonBAU ?? 0,\r\n    });\r\n    const popoverRef = useRef<HTMLDivElement>(null);\r\n    const { tooltipProps, TooltipPortal } = useTooltip();\r\n\r\n    // Reset local state if the source allocation changes (e.g., after saving)\r\n    useEffect(() => {\r\n        setEditedHours({\r\n            hoursBAU: allocation?.hoursBAU ?? 0,\r\n            hoursNonBAU: allocation?.hoursNonBAU ?? 0,\r\n        });\r\n    }, [allocation]);\r\n\r\n    // Close popover if clicking outside\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (popoverRef.current && !popoverRef.current.contains(event.target as Node)) {\r\n                handleCancel();\r\n            }\r\n        };\r\n        if (isEditing) {\r\n            document.addEventListener('mousedown', handleClickOutside);\r\n        }\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n        };\r\n    }, [isEditing]);\r\n\r\n    const handleSave = () => {\r\n        // For existing allocations, pass the allocation ID. For new allocations, pass null\r\n        const allocationId = allocation ? allocation.id : null;\r\n        \r\n        // For BAU projects, ensure Non-BAU hours are always 0\r\n        const hoursToSave = project.engagementContext === EngagementContext.BAU\r\n            ? { ...editedHours, hoursNonBAU: 0 }\r\n            : editedHours;\r\n            \r\n        onAllocationChange(allocationId, project.id, resource.id, globalWeekNumber, hoursToSave, allocation?.assignmentType || resource.assignmentType);\r\n        setIsEditing(false);\r\n    };\r\n    \r\n    const handleCancel = () => {\r\n        // Reset to original values\r\n        setEditedHours({\r\n            hoursBAU: allocation?.hoursBAU ?? 0,\r\n            hoursNonBAU: allocation?.hoursNonBAU ?? 0,\r\n        });\r\n        setIsEditing(false);\r\n    };\r\n\r\n    const weeklyTotals = calculateTotalWeeklyAllocation(resource.id, globalWeekNumber);\r\n    \r\n    // Use week-specific available hours if available, otherwise fall back to 40\r\n    const availableHours = weeklyTotals.availableHours ?? 40;\r\n    \r\n    // Determine the heatmap color based on the resource's total load for the week\r\n    const backgroundColor = getHeatmapColor(\r\n        weeklyTotals.totalHoursBAU / availableHours,\r\n        weeklyTotals.totalHoursNonBAU / availableHours\r\n    );\r\n    \r\n    // This is for the specific hours shown in this cell, not the total\r\n    const totalHoursInCell = (allocation?.hoursBAU ?? 0) + (allocation?.hoursNonBAU ?? 0);\r\n    const hasAllocation = allocation && totalHoursInCell > 0;\r\n\r\n    const barStyle = getBarStyles(globalWeekNumber, 1);\r\n\r\n    const tooltipContent = useMemo(() => (\r\n        allocation && <AllocationTooltip\r\n            allocation={allocation}\r\n            resourceName={resource.name}\r\n            projectType={project.name}\r\n            totalWeeklyHours={weeklyTotals.totalHours}\r\n            totalWeeklyPercentage={weeklyTotals.totalHours / availableHours}\r\n        />\r\n    ), [allocation, resource.name, project.name, weeklyTotals]);\r\n\r\n    const bauOverAllocationWarning = weeklyTotals.totalHoursBAU > availableHours;\r\n\r\n    // Early return after all hooks have been called\r\n    if (!barStyle) return null;\r\n\r\n    const renderDisplayMode = () => (\r\n        <>\r\n            <TooltipPortal />\r\n            <div\r\n                style={{\r\n                    ...barStyle,\r\n                    background: hasAllocation ? backgroundColor : 'transparent',\r\n                    border: bauOverAllocationWarning ? `1px solid ${getWarningColor('red')}` : (hasAllocation ? 'none' : '1px dashed #e5e7eb'),\r\n                    cursor: canEdit ? 'pointer' : 'default',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    color: 'white',\r\n                    fontWeight: 500,\r\n                    fontSize: '11px',\r\n                }}\r\n                onClick={() => canEdit && setIsEditing(true)}\r\n                onMouseEnter={e => {\r\n                    setIsHovered(true);\r\n                    if (hasAllocation && !isEditing) tooltipProps.onMouseEnter(e, tooltipContent);\r\n                }}\r\n                onMouseMove={e => {\r\n                    if (hasAllocation && !isEditing) tooltipProps.onMouseMove(e);\r\n                }}\r\n                onMouseLeave={() => {\r\n                    setIsHovered(false);\r\n                    if (hasAllocation && !isEditing && tooltipProps.onMouseLeave) tooltipProps.onMouseLeave();\r\n                }}\r\n            >\r\n                {hasAllocation ? `${totalHoursInCell.toFixed(1)}h` : ''}\r\n                {canEdit && (\r\n                    <Edit2 size={12} style={{\r\n                        marginLeft: 4,\r\n                        opacity: isHovered ? 1 : 0,\r\n                        transition: 'opacity 0.2s'\r\n                    }}/>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n    \r\n    const renderEditMode = () => {\r\n        const isBAUProject = project.engagementContext === EngagementContext.BAU;\r\n        \r\n        return (\r\n            // Wrapper to keep the original cell space occupied\r\n            <div style={{ ...barStyle, background: 'transparent' }}>\r\n                <div\r\n                    ref={popoverRef}\r\n                    style={{\r\n                        position: 'absolute',\r\n                        zIndex: 20,\r\n                        background: 'white',\r\n                        border: '1px solid #d1d5db',\r\n                        borderRadius: '8px',\r\n                        boxShadow: '0 4px 12px rgba(0,0,0,0.15)',\r\n                        padding: '12px',\r\n                        width: '200px',\r\n                        transform: 'translateY(-100%)', // Position above the cell\r\n                        marginTop: '-8px'\r\n                    }}\r\n                >\r\n                    <div style={{ fontWeight: 600, fontSize: '13px', marginBottom: '8px' }}>\r\n                        {allocation ? 'Edit Allocation' : 'Add Allocation'}\r\n                    </div>\r\n                    \r\n                    {/* For NonBAU projects, show Non-BAU Hours first */}\r\n                    {!isBAUProject && (\r\n                        <div style={{ marginBottom: '8px' }}>\r\n                            <label style={{ display: 'block', fontSize: '11px', color: '#4b5563', marginBottom: '4px' }}>Non-BAU Hours</label>\r\n                            <input\r\n                                type=\"number\"\r\n                                step=\"1\"\r\n                                min=\"0\"\r\n                                value={editedHours.hoursNonBAU}\r\n                                onChange={e => setEditedHours(prev => ({ ...prev, hoursNonBAU: parseFloat(e.target.value) || 0 }))}\r\n                                style={{ width: '100%', padding: '6px', borderRadius: '4px', border: '1px solid #d1d5db' }}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                    \r\n                    {/* Always show BAU Hours */}\r\n                    <div style={{ marginBottom: isBAUProject ? '0px' : '8px' }}>\r\n                        <label style={{ display: 'block', fontSize: '11px', color: '#4b5563', marginBottom: '4px' }}>BAU Hours</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            step=\"1\"\r\n                            min=\"0\"\r\n                            value={editedHours.hoursBAU}\r\n                            onChange={e => setEditedHours(prev => ({ ...prev, hoursBAU: parseFloat(e.target.value) || 0 }))}\r\n                            style={{ width: '100%', padding: '6px', borderRadius: '4px', border: '1px solid #d1d5db' }}\r\n                        />\r\n                    </div>\r\n                    \r\n                    <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '8px', marginTop: '12px' }}>\r\n                        <button onClick={handleCancel} style={{ padding: '4px 8px', border: '1px solid #d1d5db', borderRadius: '4px', background: 'white', cursor: 'pointer' }}><X size={14}/></button>\r\n                        <button onClick={handleSave} style={{ padding: '4px 8px', border: 'none', borderRadius: '4px', background: '#4F46E5', color: 'white', cursor: 'pointer' }}><Save size={14}/></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return isEditing ? renderEditMode() : renderDisplayMode();\r\n};\r\n\r\nexport default ProjectResourceAllocationCell;","import React, { useState } from 'react';\r\nimport { Edit2, User, Users } from 'lucide-react';\r\nimport {\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Button,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    ListGroup,\r\n    ListGroupItem\r\n} from 'reactstrap';\r\nimport { useTooltip } from '../../../hooks/useTooltip';\r\nimport { DashboardProjectModel, AssignmentType, EngagementContext, PersonModel, TeamInfoModel } from '../../../types';\r\nimport useGetPagedPersons from '../../../api/people/useGetPagedPersons';\r\nimport useGetPagedTeams from '../../../api/teams/useGetPagedTeams';\r\nimport SearchComponent from '../../utility/Search';\r\nimport Pagination from '../../utility/Pagination';\r\n\r\ninterface AddResourceAllocationCellProps {\r\n    project: DashboardProjectModel;\r\n    globalWeekNumber: number;\r\n    canEdit: boolean;\r\n    onResourceAndAllocationSelect: (\r\n        resourceId: string, \r\n        assignmentType: AssignmentType, \r\n        resourceName: string,\r\n        projectId: string,\r\n        globalWeekNumber: number,\r\n        hours: { hoursBAU: number; hoursNonBAU: number }\r\n    ) => void;\r\n    getBarStyles: (startWeek: number, duration: number) => React.CSSProperties | null;\r\n}\r\n\r\nconst AddResourceAllocationCell: React.FC<AddResourceAllocationCellProps> = ({\r\n    project,\r\n    globalWeekNumber,\r\n    canEdit,\r\n    onResourceAndAllocationSelect,\r\n    getBarStyles,\r\n}) => {\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [assignmentType, setAssignmentType] = useState<AssignmentType>(AssignmentType.Person);\r\n    const [selectedResource, setSelectedResource] = useState<{\r\n        id: string;\r\n        assignmentType: AssignmentType;\r\n        name: string;\r\n    } | null>(null);\r\n    const [editedHours, setEditedHours] = useState({\r\n        hoursBAU: 0,\r\n        hoursNonBAU: 0,\r\n    });\r\n    const [isHovered, setIsHovered] = useState(false);\r\n    const { TooltipPortal } = useTooltip();\r\n\r\n    // State for pagination and search\r\n    const [page, setPage] = useState(1);\r\n    const [perPage, setPerPage] = useState(10);\r\n    const [searchText, setSearchText] = useState<string | null>(null);\r\n\r\n    // Fetch people with pagination and search\r\n    const { data: pagedPeople, isLoading: isLoadingPeople } = useGetPagedPersons(\r\n        page,\r\n        perPage,\r\n        searchText,\r\n        null,\r\n        { enabled: isModalOpen && assignmentType === AssignmentType.Person }\r\n    );\r\n\r\n    // Fetch teams with pagination and search\r\n    const { data: pagedTeams, isLoading: isLoadingTeams } = useGetPagedTeams(\r\n        page,\r\n        perPage,\r\n        searchText,\r\n        { enabled: isModalOpen && assignmentType === AssignmentType.Team }\r\n    );\r\n\r\n    const handleCellClick = () => {\r\n        if (!canEdit) return;\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const handleResourceSelect = (resourceId: string, assignmentType: AssignmentType, resourceName: string) => {\r\n        setSelectedResource({ id: resourceId, assignmentType, name: resourceName });\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (!selectedResource) return;\r\n        \r\n        // For BAU projects, ensure Non-BAU hours are always 0\r\n        const hoursToSave = project.engagementContext === EngagementContext.BAU\r\n            ? { ...editedHours, hoursNonBAU: 0 }\r\n            : editedHours;\r\n            \r\n        onResourceAndAllocationSelect(\r\n            selectedResource.id,\r\n            selectedResource.assignmentType,\r\n            selectedResource.name,\r\n            project.id,\r\n            globalWeekNumber,\r\n            hoursToSave\r\n        );\r\n        handleCancel();\r\n    };\r\n    \r\n    const handleCancel = () => {\r\n        setIsModalOpen(false);\r\n        setSelectedResource(null);\r\n        setEditedHours({ hoursBAU: 0, hoursNonBAU: 0 });\r\n        setAssignmentType(AssignmentType.Person);\r\n        setPage(1);\r\n        setSearchText(null);\r\n    };\r\n\r\n    // Handle search\r\n    const handleSearch = (text: string) => {\r\n        setSearchText(text || null);\r\n        setPage(1); // Reset to first page on search\r\n    };\r\n\r\n    // Handle assignment type change\r\n    const handleAssignmentTypeChange = (type: AssignmentType) => {\r\n        setAssignmentType(type);\r\n        setPage(1);\r\n        setSearchText(null);\r\n        setSelectedResource(null);\r\n    };\r\n\r\n    const barStyle = getBarStyles(globalWeekNumber, 1);\r\n    if (!barStyle) return null;\r\n\r\n    const isLoading = assignmentType === AssignmentType.Person ? isLoadingPeople : isLoadingTeams;\r\n    const pagedData = assignmentType === AssignmentType.Person ? pagedPeople : pagedTeams;\r\n    const isBAUProject = project.engagementContext === EngagementContext.BAU;\r\n\r\n    return (\r\n        <>\r\n            <TooltipPortal />\r\n            {/* Cell Display */}\r\n            <div\r\n                style={{\r\n                    ...barStyle,\r\n                    background: 'transparent',\r\n                    border: '1px dashed #e5e7eb',\r\n                    cursor: canEdit ? 'pointer' : 'default',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    color: '#9ca3af',\r\n                    fontWeight: 400,\r\n                    fontSize: '11px',\r\n                }}\r\n                onClick={handleCellClick}\r\n                onMouseEnter={() => setIsHovered(true)}\r\n                onMouseLeave={() => setIsHovered(false)}\r\n            >\r\n                {canEdit && (\r\n                    <Edit2 size={12} style={{\r\n                        opacity: isHovered ? 0.6 : 0.3,\r\n                        transition: 'opacity 0.2s'\r\n                    }}/>\r\n                )}\r\n            </div>\r\n\r\n            {/* Add Resource Modal */}\r\n            <Modal isOpen={isModalOpen} toggle={handleCancel} size=\"lg\">\r\n                <ModalHeader toggle={handleCancel}>Add Resource & Allocation</ModalHeader>\r\n                <ModalBody>\r\n                    {/* Assignment Type Selection */}\r\n                    <FormGroup className=\"mb-3\">\r\n                        <Label for=\"assignmentType\">Assignment Type</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            id=\"assignmentType\"\r\n                            value={assignmentType}\r\n                            onChange={(e) => handleAssignmentTypeChange(Number(e.target.value) as AssignmentType)}\r\n                        >\r\n                            <option value={AssignmentType.Person}>Person</option>\r\n                            <option value={AssignmentType.Team}>Team</option>\r\n                        </Input>\r\n                    </FormGroup>\r\n\r\n                    {/* Search */}\r\n                    <div className=\"mb-3\">\r\n                        <SearchComponent\r\n                            searchText={searchText}\r\n                            onSearch={handleSearch}\r\n                        />\r\n                    </div>\r\n\r\n                    {/* Resources List */}\r\n                    <div className=\"mb-3\">\r\n                        {isLoading ? (\r\n                            <div className=\"text-center p-3\">Loading...</div>\r\n                        ) : pagedData?.items?.length ? (\r\n                            <ListGroup>\r\n                                {assignmentType === AssignmentType.Person\r\n                                    ? (pagedPeople?.items as PersonModel[])?.map(person => (\r\n                                        <ListGroupItem\r\n                                            key={person.id}\r\n                                            action\r\n                                            active={selectedResource?.id === person.id}\r\n                                            onClick={() => handleResourceSelect(person.id, AssignmentType.Person, `${person.firstName} ${person.lastName}`)}\r\n                                            className=\"d-flex align-items-center cursor-pointer\"\r\n                                        >\r\n                                            <User size={16} className=\"me-2\" />\r\n                                            <div>\r\n                                                <div>{`${person.firstName} ${person.lastName}`}</div>\r\n                                                <small className=\"text-muted\">{person.email}</small>\r\n                                            </div>\r\n                                        </ListGroupItem>\r\n                                    ))\r\n                                    : (pagedTeams?.items as TeamInfoModel[])?.map(team => (\r\n                                        <ListGroupItem\r\n                                            key={team.id}\r\n                                            action\r\n                                            active={selectedResource?.id === team.id}\r\n                                            onClick={() => handleResourceSelect(team.id, AssignmentType.Team, team.name)}\r\n                                            className=\"d-flex align-items-center cursor-pointer\"\r\n                                        >\r\n                                            <Users size={16} className=\"me-2\" />\r\n                                            <div>\r\n                                                <div>{team.name}</div>\r\n                                                <small className=\"text-muted\">\r\n                                                    {team.memberCount} member{team.memberCount !== 1 ? 's' : ''}\r\n                                                </small>\r\n                                            </div>\r\n                                        </ListGroupItem>\r\n                                    ))\r\n                                }\r\n                            </ListGroup>\r\n                        ) : (\r\n                            <div className=\"text-center p-3\">\r\n                                No {assignmentType === AssignmentType.Person ? 'people' : 'teams'} found\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Pagination */}\r\n                    {pagedData && (\r\n                        <Pagination\r\n                            pagedResult={pagedData}\r\n                            onPageSelected={setPage}\r\n                            perPage={perPage}\r\n                            onPerPageSelected={setPerPage}\r\n                        />\r\n                    )}\r\n\r\n                    {/* Hours Input - Only show if resource is selected */}\r\n                    {selectedResource && (\r\n                        <div className=\"mt-4 pt-3 border-top\">\r\n                            <h6>Allocation for {selectedResource.name}</h6>\r\n                            \r\n                            {/* For NonBAU projects, show Non-BAU Hours first */}\r\n                            {!isBAUProject && (\r\n                                <FormGroup className=\"mb-3\">\r\n                                    <Label>Non-BAU Hours</Label>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        step=\"1\"\r\n                                        min=\"0\"\r\n                                        value={editedHours.hoursNonBAU}\r\n                                        onChange={e => setEditedHours(prev => ({ ...prev, hoursNonBAU: parseFloat(e.target.value) || 0 }))}\r\n                                    />\r\n                                </FormGroup>\r\n                            )}\r\n                            \r\n                            {/* Always show BAU Hours */}\r\n                            <FormGroup>\r\n                                <Label>BAU Hours</Label>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    step=\"1\"\r\n                                    min=\"0\"\r\n                                    value={editedHours.hoursBAU}\r\n                                    onChange={e => setEditedHours(prev => ({ ...prev, hoursBAU: parseFloat(e.target.value) || 0 }))}\r\n                                />\r\n                            </FormGroup>\r\n                        </div>\r\n                    )}\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"secondary\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        onClick={handleSave}\r\n                        disabled={!selectedResource}\r\n                    >\r\n                        Add Resource & Allocation\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddResourceAllocationCell;","import React from 'react';\r\nimport { EngagementContext } from '../../types';\r\n\r\ninterface EngagementContextIndicatorProps {\r\n    engagementContext: EngagementContext;\r\n    size?: 'sm' | 'md';\r\n}\r\n\r\nconst EngagementContextIndicator: React.FC<EngagementContextIndicatorProps> = ({\r\n    engagementContext,\r\n    size = 'md'\r\n}) => {\r\n    const isBAU = engagementContext === EngagementContext.BAU;\r\n    \r\n    const sizeStyles = {\r\n        sm: {\r\n            fontSize: '10px',\r\n            padding: '2px 6px',\r\n            borderRadius: '3px'\r\n        },\r\n        md: {\r\n            fontSize: '11px',\r\n            padding: '3px 8px',\r\n            borderRadius: '4px'\r\n        }\r\n    };\r\n\r\n    const baseStyle: React.CSSProperties = {\r\n        display: 'inline-flex',\r\n        alignItems: 'center',\r\n        fontWeight: '600',\r\n        textTransform: 'uppercase' as const,\r\n        letterSpacing: '0.5px',\r\n        ...sizeStyles[size]\r\n    };\r\n\r\n    const bauStyle: React.CSSProperties = {\r\n        ...baseStyle,\r\n        backgroundColor: '#dbeafe',\r\n        color: '#1e40af',\r\n        border: '1px solid #93c5fd'\r\n    };\r\n\r\n    const nonBauStyle: React.CSSProperties = {\r\n        ...baseStyle,\r\n        backgroundColor: '#fef3c7',\r\n        color: '#d97706',\r\n        border: '1px solid #fbbf24'\r\n    };\r\n\r\n    return (\r\n        <span\r\n            style={isBAU ? bauStyle : nonBauStyle}\r\n            title={isBAU \r\n                ? 'Business-as-usual: Routine work aligned with core responsibilities' \r\n                : 'Non-BAU: Work outside normal role, typically related to change or strategic initiatives'\r\n            }\r\n        >\r\n            {isBAU ? 'BAU' : 'Non-BAU'}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default EngagementContextIndicator;","import { ResourceTimeline, ProjectTimeline, AssignmentType } from '../types';\r\n\r\n/**\r\n * Result type for person allocation calculations\r\n */\r\nexport interface PersonAllocationResult {\r\n    directHoursBAU: number;\r\n    directHoursNonBAU: number;\r\n    teamHoursBAU: number;\r\n    teamHoursNonBAU: number;\r\n    totalHoursBAU: number;\r\n    totalHoursNonBAU: number;\r\n    availableHours?: number;\r\n    baseHours?: number;\r\n    teamAllocations: Array<{\r\n        teamId: string;\r\n        teamName: string;\r\n        hoursBAU: number;\r\n        hoursNonBAU: number;\r\n    }>;\r\n}\r\n\r\n/**\r\n * Calculate total allocation for a person in the Resources view, considering team memberships\r\n * @param personId - The person's ID\r\n * @param globalWeekNumber - The week to calculate for\r\n * @param allResources - All resources from ResourcesView\r\n * @returns PersonAllocationResult with breakdown of direct and team hours\r\n */\r\nexport function calculatePersonAllocationFromResources(\r\n    personId: string,\r\n    globalWeekNumber: number,\r\n    allResources: ResourceTimeline[]\r\n): PersonAllocationResult {\r\n    // Find the person resource\r\n    const personResource = allResources.find(r => r.id === personId && r.type === AssignmentType.Person);\r\n    \r\n    if (!personResource) {\r\n        return {\r\n            directHoursBAU: 0,\r\n            directHoursNonBAU: 0,\r\n            teamHoursBAU: 0,\r\n            teamHoursNonBAU: 0,\r\n            totalHoursBAU: 0,\r\n            totalHoursNonBAU: 0,\r\n            teamAllocations: []\r\n        };\r\n    }\r\n\r\n    // Get direct person allocations for this week\r\n    const personWeeklyAllocation = personResource.allocations.find(a => a.globalWeekNumber === globalWeekNumber);\r\n    const directHoursBAU = personWeeklyAllocation?.totalHoursBAU || 0;\r\n    const directHoursNonBAU = personWeeklyAllocation?.totalHoursNonBAU || 0;\r\n\r\n    // Get team allocations for this person\r\n    const teamAllocations: Array<{\r\n        teamId: string;\r\n        teamName: string;\r\n        hoursBAU: number;\r\n        hoursNonBAU: number;\r\n    }> = [];\r\n\r\n    let teamHoursBAU = 0;\r\n    let teamHoursNonBAU = 0;\r\n\r\n    // Check each team this person belongs to\r\n    personResource.teams?.forEach(team => {\r\n        const teamResource = allResources.find(r => r.id === team.id && r.type === AssignmentType.Team);\r\n        if (teamResource) {\r\n            const teamWeeklyAllocation = teamResource.allocations.find(a => a.globalWeekNumber === globalWeekNumber);\r\n            if (teamWeeklyAllocation) {\r\n                const teamBAU = teamWeeklyAllocation.totalHoursBAU || 0;\r\n                const teamNonBAU = teamWeeklyAllocation.totalHoursNonBAU || 0;\r\n                \r\n                teamHoursBAU += teamBAU;\r\n                teamHoursNonBAU += teamNonBAU;\r\n                \r\n                teamAllocations.push({\r\n                    teamId: team.id,\r\n                    teamName: team.name,\r\n                    hoursBAU: teamBAU,\r\n                    hoursNonBAU: teamNonBAU\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    const totalHoursBAU = directHoursBAU + teamHoursBAU;\r\n    const totalHoursNonBAU = directHoursNonBAU + teamHoursNonBAU;\r\n\r\n    return {\r\n        directHoursBAU,\r\n        directHoursNonBAU,\r\n        teamHoursBAU,\r\n        teamHoursNonBAU,\r\n        totalHoursBAU,\r\n        totalHoursNonBAU,\r\n        availableHours: personWeeklyAllocation?.availableHours,\r\n        baseHours: personWeeklyAllocation?.baseHours,\r\n        teamAllocations\r\n    };\r\n}\r\n\r\n/**\r\n * Calculate total allocation for a person in the Projects view, considering team memberships\r\n * @param personId - The person's ID\r\n * @param globalWeekNumber - The week to calculate for\r\n * @param allProjects - All projects from ProjectsView\r\n * @returns PersonAllocationResult with breakdown of direct and team hours\r\n */\r\nexport function calculatePersonAllocationFromProjects(\r\n    personId: string,\r\n    globalWeekNumber: number,\r\n    allProjects: ProjectTimeline[]\r\n): PersonAllocationResult {\r\n    let directHoursBAU = 0;\r\n    let directHoursNonBAU = 0;\r\n    let teamHoursBAU = 0;\r\n    let teamHoursNonBAU = 0;\r\n    let availableHours: number | undefined;\r\n    let baseHours: number | undefined;\r\n    \r\n    const teamAllocations: Array<{\r\n        teamId: string;\r\n        teamName: string;\r\n        hoursBAU: number;\r\n        hoursNonBAU: number;\r\n    }> = [];\r\n\r\n    // Find person's teams by looking at any person resource in any project\r\n    let personTeams: Array<{ id: string; name: string }> = [];\r\n    \r\n    // First pass: collect person's team memberships\r\n    allProjects.forEach(project => {\r\n        const personResource = project.resources.find(r => r.id === personId && r.assignmentType === AssignmentType.Person);\r\n        if (personResource && personResource.teams) {\r\n            personTeams = personResource.teams;\r\n        }\r\n    });\r\n\r\n    // Second pass: calculate allocations\r\n    allProjects.forEach(project => {\r\n        // Direct person allocations\r\n        const personResource = project.resources.find(r => r.id === personId && r.assignmentType === AssignmentType.Person);\r\n        if (personResource) {\r\n            personResource.allocations.forEach(allocation => {\r\n                if (allocation.globalWeekNumber === globalWeekNumber) {\r\n                    directHoursBAU += allocation.hoursBAU;\r\n                    directHoursNonBAU += allocation.hoursNonBAU;\r\n                    \r\n                    // Extract available hours and base hours from the first matching allocation\r\n                    if (availableHours === undefined && allocation.availableHours !== undefined) {\r\n                        availableHours = allocation.availableHours;\r\n                    }\r\n                    if (baseHours === undefined && allocation.baseHours !== undefined) {\r\n                        baseHours = allocation.baseHours;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        // Team allocations for teams this person belongs to\r\n        personTeams.forEach(team => {\r\n            const teamResource = project.resources.find(r => r.id === team.id && r.assignmentType === AssignmentType.Team);\r\n            if (teamResource) {\r\n                teamResource.allocations.forEach(allocation => {\r\n                    if (allocation.globalWeekNumber === globalWeekNumber) {\r\n                        // Check if we already have this team in our allocations\r\n                        let existingTeamAllocation = teamAllocations.find(ta => ta.teamId === team.id);\r\n                        if (!existingTeamAllocation) {\r\n                            existingTeamAllocation = {\r\n                                teamId: team.id,\r\n                                teamName: team.name,\r\n                                hoursBAU: 0,\r\n                                hoursNonBAU: 0\r\n                            };\r\n                            teamAllocations.push(existingTeamAllocation);\r\n                        }\r\n                        \r\n                        existingTeamAllocation.hoursBAU += allocation.hoursBAU;\r\n                        existingTeamAllocation.hoursNonBAU += allocation.hoursNonBAU;\r\n                        teamHoursBAU += allocation.hoursBAU;\r\n                        teamHoursNonBAU += allocation.hoursNonBAU;\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    });\r\n\r\n    const totalHoursBAU = directHoursBAU + teamHoursBAU;\r\n    const totalHoursNonBAU = directHoursNonBAU + teamHoursNonBAU;\r\n\r\n    return {\r\n        directHoursBAU,\r\n        directHoursNonBAU,\r\n        teamHoursBAU,\r\n        teamHoursNonBAU,\r\n        totalHoursBAU,\r\n        totalHoursNonBAU,\r\n        availableHours,\r\n        baseHours,\r\n        teamAllocations\r\n    };\r\n}","import { AssignmentType } from '../types';\r\nimport { BaseWorkingHours, CompanyNonWorkingDay, PersonalLeave } from '../api/working-hours/models';\r\n\r\n/**\r\n * Client-side working hours calculator for computing available hours\r\n * when we don't have backend-calculated data available (e.g., for new allocations)\r\n */\r\n\r\nexport interface ClientWorkingHoursData {\r\n    baseWorkingHours: BaseWorkingHours | null;\r\n    companyNonWorkingDays: CompanyNonWorkingDay[];\r\n    personalLeave: PersonalLeave[];\r\n}\r\n\r\n/**\r\n * Calculate available hours for a specific resource and week on the client side\r\n * This is used when creating new allocations before they're saved to the backend\r\n */\r\nexport function calculateClientSideAvailableHours(\r\n    resourceId: string,\r\n    resourceType: AssignmentType,\r\n    globalWeekNumber: number,\r\n    workingHoursData: ClientWorkingHoursData\r\n): number {\r\n    const { baseWorkingHours, companyNonWorkingDays, personalLeave } = workingHoursData;\r\n    \r\n    // Start with base hours (default to 40 if not configured)\r\n    const baseHours = baseWorkingHours?.baseHoursPerWeek ?? 40;\r\n    \r\n    // Calculate company non-working hours for this week\r\n    const companyNonWorkingHours = calculateCompanyNonWorkingHoursForWeek(\r\n        globalWeekNumber,\r\n        companyNonWorkingDays,\r\n        baseHours\r\n    );\r\n    \r\n    // For persons, also subtract personal leave hours\r\n    let personalLeaveHours = 0;\r\n    if (resourceType === AssignmentType.Person) {\r\n        personalLeaveHours = calculatePersonalLeaveHoursForWeek(\r\n            resourceId,\r\n            globalWeekNumber,\r\n            personalLeave,\r\n            baseHours\r\n        );\r\n    }\r\n    \r\n    // Available Hours = Base Hours - Company Non-Working Hours - Personal Leave Hours\r\n    const availableHours = Math.max(0, baseHours - companyNonWorkingHours - personalLeaveHours);\r\n    \r\n    return availableHours;\r\n}\r\n\r\n/**\r\n * Calculate company non-working hours for a specific week\r\n */\r\nfunction calculateCompanyNonWorkingHoursForWeek(\r\n    _globalWeekNumber: number,\r\n    _companyNonWorkingDays: CompanyNonWorkingDay[],\r\n    _baseHoursPerWeek: number\r\n): number {\r\n    // This is a simplified calculation - in reality we'd need to convert\r\n    // globalWeekNumber to actual dates and check overlaps with company non-working periods\r\n    // For now, we'll return 0 and let the backend handle the accurate calculation\r\n    // TODO: Implement proper date range overlap calculation if needed\r\n    return 0;\r\n}\r\n\r\n/**\r\n * Calculate personal leave hours for a specific person and week\r\n */\r\nfunction calculatePersonalLeaveHoursForWeek(\r\n    _personId: string,\r\n    _globalWeekNumber: number,\r\n    _personalLeave: PersonalLeave[],\r\n    _baseHoursPerWeek: number\r\n): number {\r\n    // This is a simplified calculation - in reality we'd need to convert\r\n    // globalWeekNumber to actual dates and check overlaps with personal leave periods\r\n    // For now, we'll return 0 and let the backend handle the accurate calculation\r\n    // TODO: Implement proper date range overlap calculation if needed\r\n    return 0;\r\n}\r\n\r\n/**\r\n * Get available hours from existing allocation data if available,\r\n * otherwise calculate using client-side logic\r\n */\r\nexport function getAvailableHoursForResourceWeek(\r\n    resourceId: string,\r\n    resourceType: AssignmentType,\r\n    globalWeekNumber: number,\r\n    existingAllocations: any[], // Existing allocations that might have availableHours\r\n    workingHoursData: ClientWorkingHoursData\r\n): number {\r\n    // First, try to find existing allocation data with availableHours\r\n    const existingAllocation = existingAllocations.find(\r\n        alloc => alloc.globalWeekNumber === globalWeekNumber && alloc.availableHours !== undefined\r\n    );\r\n    \r\n    if (existingAllocation?.availableHours !== undefined) {\r\n        return existingAllocation.availableHours;\r\n    }\r\n    \r\n    // Fall back to client-side calculation\r\n    return calculateClientSideAvailableHours(resourceId, resourceType, globalWeekNumber, workingHoursData);\r\n}","import React, {useState, useCallback, useMemo} from 'react';\r\nimport {User, Users, Tag, AlertTriangle} from 'lucide-react';\r\nimport useGetProjectsDashboardData, {\r\n    ProjectsDashboardRequest\r\n} from '../../../api/projects-dashboard/useGetProjectsDashboardData';\r\nimport {ProjectTimeline, DashboardAllocationModel} from '../../../types';\r\nimport {useBulkUpdateDashboardAllocations} from '../../../api/allocations/useBulkUpdateDashboardAllocations';\r\nimport {DashboardViewProps} from './DashboardContainer';\r\nimport TimelineHeader from './TimelineHeader';\r\nimport ProjectResourceAllocationCell from './ProjectResourceAllocationCell'; // New import\r\nimport AddResourceAllocationCell from './AddResourceAllocationCell';\r\nimport {AssignmentType} from '../../../types';\r\nimport DisplayTag from '../../utility/DisplayTag';\r\nimport TagSelector from '../../utility/TagSelector';\r\nimport EngagementContextIndicator from '../../utility/EngagementContextIndicator';\r\nimport ErrorDisplay from '../../utility/ErrorDisplay';\r\nimport {useTooltip} from '../../../hooks/useTooltip';\r\nimport {TagModel} from '../../../types';\r\nimport {calculatePersonAllocationFromProjects} from '../../../lib/allocationCalculations';\r\nimport {\r\n    getAvailableHoursForResourceWeek,\r\n    ClientWorkingHoursData\r\n} from '../../../lib/clientWorkingHoursCalculator';\r\nimport useGetBaseWorkingHours from '../../../api/working-hours/useGetBaseWorkingHours';\r\nimport useGetCompanyNonWorkingDays from '../../../api/working-hours/useGetCompanyNonWorkingDays';\r\n\r\ninterface ProjectsViewProps extends DashboardViewProps {\r\n    requestParams: ProjectsDashboardRequest;\r\n}\r\n\r\n// Define the shape of our edited allocations map\r\ninterface EditedAllocation {\r\n    hoursBAU: number;\r\n    hoursNonBAU: number;\r\n    projectId: string;\r\n    resourceId: string;\r\n    globalWeekNumber: number;\r\n    isNew?: boolean; // Flag to indicate if this is a new allocation\r\n    // For new resources, store resource details\r\n    resourceName?: string;\r\n    assignmentType?: AssignmentType;\r\n}\r\n\r\nconst ProjectsView: React.FC<ProjectsViewProps> = ({\r\n    timelineData,\r\n    requestParams\r\n}) => {\r\n    // --- API and State Hooks ---\r\n    const {\r\n        data: dashboardData,\r\n        isLoading,\r\n        error,\r\n        refetch // We'll need this after saving\r\n    } = useGetProjectsDashboardData(requestParams);\r\n\r\n    const {mutate: bulkUpdate, isPending: isSaving} =\r\n        useBulkUpdateDashboardAllocations(); // For saving changes\r\n\r\n    // Working hours data for client-side calculations\r\n    const {data: baseWorkingHours} = useGetBaseWorkingHours();\r\n    const {data: companyNonWorkingDays = []} = useGetCompanyNonWorkingDays();\r\n    // Note: Personal leave is fetched per person, so we'll handle that differently\r\n\r\n    const [expandedProjects, setExpandedProjects] = useState<Set<string>>(\r\n        new Set()\r\n    );\r\n    const [saveError, setSaveError] = useState<unknown>(null);\r\n    const [selectedFilterTags, setSelectedFilterTags] = useState<TagModel[]>(\r\n        []\r\n    );\r\n    const [isFilterVisible, setIsFilterVisible] = useState<boolean>(false);\r\n\r\n    // NEW: State to hold pending changes. Key is the original allocation ID.\r\n    const [editedAllocations, setEditedAllocations] = useState<\r\n        Record<string, EditedAllocation>\r\n    >({});\r\n\r\n    const {TooltipPortal} = useTooltip();\r\n\r\n    // Prepare working hours data for client-side calculations\r\n    const workingHoursData: ClientWorkingHoursData = useMemo(\r\n        () => ({\r\n            baseWorkingHours: baseWorkingHours || null,\r\n            companyNonWorkingDays,\r\n            personalLeave: [] // We'll handle personal leave per person as needed\r\n        }),\r\n        [baseWorkingHours, companyNonWorkingDays]\r\n    );\r\n\r\n    // --- Data Processing and Filtering ---\r\n    const allAvailableTags = useMemo(() => {\r\n        const tagMap = new Map<string, TagModel>();\r\n        dashboardData?.projects.forEach(pt =>\r\n            pt.project.tags?.forEach(tag => tag.id && tagMap.set(tag.id, tag))\r\n        );\r\n        return Array.from(tagMap.values()).sort((a, b) =>\r\n            a.name.localeCompare(b.name)\r\n        );\r\n    }, [dashboardData?.projects]);\r\n\r\n    // NEW: Create a \"processed\" version of projects that includes pending edits for real-time UI updates\r\n    const processedProjects = useMemo((): ProjectTimeline[] => {\r\n        if (!dashboardData?.projects) return [];\r\n\r\n        // If no edits, return original data\r\n        if (Object.keys(editedAllocations).length === 0) {\r\n            return dashboardData.projects;\r\n        }\r\n\r\n        // Deep clone to avoid mutating the original data from react-query cache\r\n        const projectsCopy = JSON.parse(\r\n            JSON.stringify(dashboardData.projects)\r\n        ) as ProjectTimeline[];\r\n\r\n        return projectsCopy.map(project => {\r\n            // Get all unique resource IDs from existing resources and new allocations\r\n            const existingResourceIds = new Set(\r\n                project.resources.map((r: any) => r.id)\r\n            );\r\n            const newResourceIds = new Set(\r\n                Object.values(editedAllocations)\r\n                    .filter(\r\n                        edit =>\r\n                            edit.isNew &&\r\n                            edit.projectId === project.project.id &&\r\n                            !existingResourceIds.has(edit.resourceId)\r\n                    )\r\n                    .map(edit => edit.resourceId)\r\n            );\r\n\r\n            // Create new resource objects for new resource IDs\r\n            const newResources = Array.from(newResourceIds).map(resourceId => {\r\n                // Find the first allocation for this resource to get resource details\r\n                const firstAllocation = Object.values(editedAllocations).find(\r\n                    edit =>\r\n                        edit.isNew &&\r\n                        edit.projectId === project.project.id &&\r\n                        edit.resourceId === resourceId\r\n                );\r\n\r\n                return {\r\n                    id: resourceId,\r\n                    name:\r\n                        firstAllocation?.resourceName ||\r\n                        `Resource ${resourceId}`,\r\n                    assignmentType:\r\n                        firstAllocation?.assignmentType ||\r\n                        AssignmentType.Person,\r\n                    allocations: []\r\n                };\r\n            });\r\n\r\n            return {\r\n                ...project,\r\n                resources: [\r\n                    // Existing resources with their allocations\r\n                    ...project.resources.map((resource: any) => ({\r\n                        ...resource,\r\n                        allocations: [\r\n                            // Existing allocations (potentially modified)\r\n                            ...resource.allocations.map(\r\n                                (alloc: DashboardAllocationModel) => {\r\n                                    const edit = editedAllocations[alloc.id];\r\n                                    if (edit) {\r\n                                        return {\r\n                                            ...alloc,\r\n                                            hoursBAU: edit.hoursBAU,\r\n                                            hoursNonBAU: edit.hoursNonBAU\r\n                                        };\r\n                                    }\r\n                                    return alloc;\r\n                                }\r\n                            ),\r\n                            // New allocations for existing resources\r\n                            ...Object.entries(editedAllocations)\r\n                                .filter(\r\n                                    ([_, edit]) =>\r\n                                        edit.isNew &&\r\n                                        edit.projectId === project.project.id &&\r\n                                        edit.resourceId === resource.id\r\n                                )\r\n                                .map(\r\n                                    ([tempId, edit]) =>\r\n                                        ({\r\n                                            id: tempId, // Temporary ID\r\n                                            globalWeekNumber:\r\n                                                edit.globalWeekNumber,\r\n                                            weekBeginningOn: '', // Will be set by backend\r\n                                            weekEndOn: '', // Will be set by backend\r\n                                            hoursBAU: edit.hoursBAU,\r\n                                            hoursNonBAU: edit.hoursNonBAU,\r\n                                            ...(() => {\r\n                                                const availableHours =\r\n                                                    getAvailableHoursForResourceWeek(\r\n                                                        resource.id,\r\n                                                        resource.assignmentType,\r\n                                                        edit.globalWeekNumber,\r\n                                                        resource.allocations,\r\n                                                        workingHoursData\r\n                                                    );\r\n                                                return {\r\n                                                    percentageOfWorkWeekBAU:\r\n                                                        edit.hoursBAU /\r\n                                                        availableHours,\r\n                                                    percentageOfWorkWeekNonBAU:\r\n                                                        edit.hoursNonBAU /\r\n                                                        availableHours\r\n                                                };\r\n                                            })(),\r\n                                            description: '',\r\n                                            phaseName: undefined,\r\n                                            phaseColor: undefined\r\n                                        }) as DashboardAllocationModel\r\n                                )\r\n                        ]\r\n                    })),\r\n                    // New resources with their allocations\r\n                    ...newResources.map(resource => ({\r\n                        ...resource,\r\n                        allocations: Object.entries(editedAllocations)\r\n                            .filter(\r\n                                ([_, edit]) =>\r\n                                    edit.isNew &&\r\n                                    edit.projectId === project.project.id &&\r\n                                    edit.resourceId === resource.id\r\n                            )\r\n                            .map(\r\n                                ([tempId, edit]) =>\r\n                                    ({\r\n                                        id: tempId, // Temporary ID\r\n                                        globalWeekNumber: edit.globalWeekNumber,\r\n                                        weekBeginningOn: '', // Will be set by backend\r\n                                        weekEndOn: '', // Will be set by backend\r\n                                        hoursBAU: edit.hoursBAU,\r\n                                        hoursNonBAU: edit.hoursNonBAU,\r\n                                        ...(() => {\r\n                                            const availableHours =\r\n                                                getAvailableHoursForResourceWeek(\r\n                                                    resource.id,\r\n                                                    resource.assignmentType,\r\n                                                    edit.globalWeekNumber,\r\n                                                    [], // New resources don't have existing allocations\r\n                                                    workingHoursData\r\n                                                );\r\n                                            return {\r\n                                                percentageOfWorkWeekBAU:\r\n                                                    edit.hoursBAU /\r\n                                                    availableHours,\r\n                                                percentageOfWorkWeekNonBAU:\r\n                                                    edit.hoursNonBAU /\r\n                                                    availableHours\r\n                                            };\r\n                                        })(),\r\n                                        description: '',\r\n                                        phaseName: undefined,\r\n                                        phaseColor: undefined\r\n                                    }) as DashboardAllocationModel\r\n                            )\r\n                    }))\r\n                ]\r\n            };\r\n        });\r\n    }, [dashboardData, editedAllocations]);\r\n\r\n    const filteredProjects = useMemo(() => {\r\n        if (selectedFilterTags.length === 0) return processedProjects;\r\n        const selectedTagIds = new Set(\r\n            selectedFilterTags.map(tag => tag.id).filter(Boolean)\r\n        );\r\n        return processedProjects.filter(pt =>\r\n            pt.project.tags?.some(\r\n                (tag: any) => tag.id && selectedTagIds.has(tag.id)\r\n            )\r\n        );\r\n    }, [processedProjects, selectedFilterTags]);\r\n\r\n    // --- Callbacks and Helper Functions ---\r\n\r\n    // UPDATED: This calculation now uses the \"processed\" data to reflect edits instantly\r\n    // and includes team allocations for persons\r\n    const calculateTotalWeeklyAllocation = useCallback(\r\n        (resourceId: string, globalWeekNumber: number) => {\r\n            // First, check if this is a person by looking at any resource with this ID\r\n            let isPersonResource = false;\r\n            processedProjects.forEach(projectTimeline => {\r\n                const resource = projectTimeline.resources.find(\r\n                    (r: any) => r.id === resourceId\r\n                );\r\n                if (\r\n                    resource &&\r\n                    resource.assignmentType === AssignmentType.Person\r\n                ) {\r\n                    isPersonResource = true;\r\n                }\r\n            });\r\n\r\n            if (isPersonResource) {\r\n                // For persons, use team-aware calculation\r\n                const allocationResult = calculatePersonAllocationFromProjects(\r\n                    resourceId,\r\n                    globalWeekNumber,\r\n                    processedProjects\r\n                );\r\n                return {\r\n                    totalHours:\r\n                        allocationResult.totalHoursBAU +\r\n                        allocationResult.totalHoursNonBAU,\r\n                    totalHoursBAU: allocationResult.totalHoursBAU,\r\n                    totalHoursNonBAU: allocationResult.totalHoursNonBAU,\r\n                    availableHours: allocationResult.availableHours\r\n                };\r\n            } else {\r\n                // For teams, use the existing calculation\r\n                let totalHoursBAU = 0;\r\n                let totalHoursNonBAU = 0;\r\n                let availableHours: number | undefined;\r\n\r\n                processedProjects.forEach(projectTimeline => {\r\n                    const resource = projectTimeline.resources.find(\r\n                        (r: any) => r.id === resourceId\r\n                    );\r\n                    if (resource) {\r\n                        const allocation = resource.allocations.find(\r\n                            (a: DashboardAllocationModel) =>\r\n                                a.globalWeekNumber === globalWeekNumber\r\n                        );\r\n                        if (allocation) {\r\n                            totalHoursBAU += allocation.hoursBAU;\r\n                            totalHoursNonBAU += allocation.hoursNonBAU;\r\n                            // For teams, use the available hours from the allocation (should account for company non-working days)\r\n                            if (allocation.availableHours !== undefined) {\r\n                                availableHours = allocation.availableHours;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                return {\r\n                    totalHours: totalHoursBAU + totalHoursNonBAU,\r\n                    totalHoursBAU,\r\n                    totalHoursNonBAU,\r\n                    availableHours\r\n                };\r\n            }\r\n        },\r\n        [processedProjects]\r\n    );\r\n\r\n    // NEW: Callback for the cell component to register a change\r\n    const handleAllocationChange = (\r\n        allocationId: string | null,\r\n        projectId: string,\r\n        resourceId: string,\r\n        globalWeekNumber: number,\r\n        newHours: {hoursBAU: number; hoursNonBAU: number},\r\n        assignmentType: AssignmentType\r\n    ) => {\r\n        if (allocationId) {\r\n            // Existing allocation\r\n            setEditedAllocations(prev => ({\r\n                ...prev,\r\n                [allocationId]: {\r\n                    ...newHours,\r\n                    projectId,\r\n                    resourceId,\r\n                    globalWeekNumber,\r\n                    assignmentType,\r\n                    isNew: false\r\n                }\r\n            }));\r\n        } else {\r\n            // New allocation - create a temporary ID for tracking\r\n            const tempId = `new-${projectId}-${resourceId}-${globalWeekNumber}`;\r\n            setEditedAllocations(prev => ({\r\n                ...prev,\r\n                [tempId]: {\r\n                    ...newHours,\r\n                    projectId,\r\n                    resourceId,\r\n                    globalWeekNumber,\r\n                    assignmentType,\r\n                    isNew: true\r\n                }\r\n            }));\r\n        }\r\n    };\r\n\r\n    // Handler to save all pending changes\r\n    const handleSaveChanges = () => {\r\n        // Clear any previous save errors\r\n        setSaveError(null);\r\n\r\n        const payload = Object.entries(editedAllocations).map(([id, edit]) => {\r\n            if (edit.isNew) {\r\n                // For new allocations, we don't have a real ID yet\r\n                return {\r\n                    id: null, // Backend will create new allocation\r\n                    projectId: edit.projectId,\r\n                    resourceId: edit.resourceId,\r\n                    globalWeekNumber: edit.globalWeekNumber,\r\n                    hoursBAU: edit.hoursBAU,\r\n                    hoursNonBAU: edit.hoursNonBAU,\r\n                    assignmentType: edit.assignmentType // Include assignment type for new allocations\r\n                };\r\n            } else {\r\n                // Existing allocation\r\n                return {\r\n                    id,\r\n                    projectId: edit.projectId,\r\n                    resourceId: edit.resourceId,\r\n                    globalWeekNumber: edit.globalWeekNumber,\r\n                    hoursBAU: edit.hoursBAU,\r\n                    hoursNonBAU: edit.hoursNonBAU,\r\n                    assignmentType: edit.assignmentType // Include assignment type for existing allocations too\r\n                };\r\n            }\r\n        });\r\n        console.log('Saving changes:', payload);\r\n\r\n        bulkUpdate(\r\n            {allocations: payload},\r\n            {\r\n                onSuccess: () => {\r\n                    setEditedAllocations({});\r\n                    setSaveError(null); // Clear any errors on success\r\n                    refetch(); // Refresh data from server\r\n                    // Add a success toast notification here\r\n                },\r\n                onError: error => {\r\n                    setSaveError(error); // Store the error for display\r\n                    console.error('Failed to save changes', error);\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    // NEW: Handler to discard all changes\r\n    const handleDiscardChanges = () => {\r\n        setEditedAllocations({});\r\n        // Add a toast notification here if desired\r\n    };\r\n\r\n    // NEW: Handler for adding a new resource and allocation to a project\r\n    const handleResourceAndAllocationSelect = (\r\n        resourceId: string,\r\n        assignmentType: AssignmentType,\r\n        resourceName: string,\r\n        projectId: string,\r\n        globalWeekNumber: number,\r\n        hours: {hoursBAU: number; hoursNonBAU: number}\r\n    ) => {\r\n        console.log('Adding resource and allocation to project:', {\r\n            projectId,\r\n            resourceId,\r\n            assignmentType,\r\n            resourceName,\r\n            globalWeekNumber,\r\n            hours\r\n        });\r\n\r\n        // Create a new allocation with the selected resource\r\n        // Use a temporary ID for the new allocation\r\n        const tempAllocationId = `new-${projectId}-${resourceId}-${globalWeekNumber}`;\r\n\r\n        setEditedAllocations(prev => ({\r\n            ...prev,\r\n            [tempAllocationId]: {\r\n                ...hours,\r\n                projectId,\r\n                resourceId,\r\n                globalWeekNumber,\r\n                isNew: true,\r\n                resourceName,\r\n                assignmentType\r\n            }\r\n        }));\r\n    };\r\n\r\n    const getBarStyles = useCallback(\r\n        (\r\n            itemStartGlobalWeek: number,\r\n            itemDurationInWeeks: number\r\n        ): React.CSSProperties | null => {\r\n            // Simplified for the cell, which uses the main timeline context\r\n            const viewStartGlobalWeek = timelineData.startGlobalWeek;\r\n            const totalWeeksInView = timelineData.columns.length;\r\n\r\n            const itemEndGlobalWeek =\r\n                itemStartGlobalWeek + itemDurationInWeeks - 1;\r\n            const viewEndGlobalWeek =\r\n                viewStartGlobalWeek + totalWeeksInView - 1;\r\n\r\n            if (\r\n                itemEndGlobalWeek < viewStartGlobalWeek ||\r\n                itemStartGlobalWeek > viewEndGlobalWeek\r\n            )\r\n                return null;\r\n\r\n            const startOffsetWeeks = itemStartGlobalWeek - viewStartGlobalWeek;\r\n            const widthPercent = (1 / totalWeeksInView) * 100;\r\n            const leftPercent = (startOffsetWeeks / totalWeeksInView) * 100;\r\n\r\n            return {\r\n                position: 'absolute',\r\n                left: `${leftPercent}%`,\r\n                width: `${widthPercent}%`,\r\n                height: '24px'\r\n            };\r\n        },\r\n        [timelineData]\r\n    );\r\n\r\n    // ... (toggleProject, etc. remain the same)\r\n    React.useEffect(() => {\r\n        if (dashboardData?.projects && dashboardData.projects.length > 0) {\r\n            setExpandedProjects(\r\n                new Set(\r\n                    dashboardData.projects.map(\r\n                        (p: ProjectTimeline) => p.project.id\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }, [dashboardData?.projects]);\r\n\r\n    const toggleProject = (projectId: string) => {\r\n        const newExpanded = new Set(expandedProjects);\r\n        if (newExpanded.has(projectId)) newExpanded.delete(projectId);\r\n        else newExpanded.add(projectId);\r\n        setExpandedProjects(newExpanded);\r\n    };\r\n\r\n    const getBarStylesForProject = useCallback(\r\n        (\r\n            itemStartGlobalWeek: number,\r\n            itemDurationInWeeks: number,\r\n            viewStartGlobalWeek: number,\r\n            totalWeeksInView: number\r\n        ): React.CSSProperties | null => {\r\n            const itemEndGlobalWeek =\r\n                itemStartGlobalWeek + itemDurationInWeeks - 1;\r\n            const viewEndGlobalWeek =\r\n                viewStartGlobalWeek + totalWeeksInView - 1;\r\n\r\n            if (\r\n                itemEndGlobalWeek < viewStartGlobalWeek ||\r\n                itemStartGlobalWeek > viewEndGlobalWeek\r\n            ) {\r\n                return null; // The item is not in the current view\r\n            }\r\n\r\n            const visibleStartWeek = Math.max(\r\n                itemStartGlobalWeek,\r\n                viewStartGlobalWeek\r\n            );\r\n            const visibleEndWeek = Math.min(\r\n                itemEndGlobalWeek,\r\n                viewEndGlobalWeek\r\n            );\r\n\r\n            const startOffsetWeeks = visibleStartWeek - viewStartGlobalWeek;\r\n            const visibleDurationWeeks = visibleEndWeek - visibleStartWeek + 1;\r\n\r\n            if (visibleDurationWeeks <= 0) return null;\r\n\r\n            const leftPercent = (startOffsetWeeks / totalWeeksInView) * 100;\r\n            const widthPercent =\r\n                (visibleDurationWeeks / totalWeeksInView) * 100;\r\n\r\n            return {\r\n                position: 'absolute',\r\n                left: `${leftPercent}%`,\r\n                width: `${widthPercent}%`,\r\n                height: '24px',\r\n                borderRadius: '4px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                color: 'white',\r\n                fontSize: '11px',\r\n                fontWeight: '500',\r\n                boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\r\n                overflow: 'hidden',\r\n                textOverflow: 'ellipsis',\r\n                whiteSpace: 'nowrap',\r\n                padding: '0 4px'\r\n            };\r\n        },\r\n        []\r\n    );\r\n\r\n    const hasPendingChanges = Object.keys(editedAllocations).length > 0;\r\n\r\n    return (\r\n        <div>\r\n            {/* Error Display for Save Failures */}\r\n            {saveError ? (\r\n                <div\r\n                    style={{\r\n                        position: 'sticky',\r\n                        top: 0,\r\n                        zIndex: 12,\r\n                        padding: '8px 16px'\r\n                    }}\r\n                >\r\n                    <ErrorDisplay\r\n                        error={saveError}\r\n                        title=\"Failed to save changes\"\r\n                        onDismiss={() => setSaveError(null)}\r\n                    />\r\n                </div>\r\n            ) : null}\r\n\r\n            {/* NEW: Save/Discard Bar */}\r\n            {hasPendingChanges && (\r\n                <div\r\n                    style={{\r\n                        position: 'sticky',\r\n                        top: 0,\r\n                        zIndex: 11,\r\n                        background: 'rgba(255, 251, 235, 0.98)',\r\n                        padding: '6px 16px',\r\n                        borderBottom: '1px solid #fcd34d',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'space-between',\r\n                        backdropFilter: 'blur(4px)'\r\n                    }}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            gap: '6px',\r\n                            color: '#b45309',\r\n                            fontWeight: 500,\r\n                            fontSize: '13px'\r\n                        }}\r\n                    >\r\n                        <AlertTriangle size={14} />\r\n                        You have {Object.keys(editedAllocations).length} unsaved\r\n                        changes.\r\n                    </div>\r\n                    <div style={{display: 'flex', gap: '8px'}}>\r\n                        <button\r\n                            onClick={handleDiscardChanges}\r\n                            style={{\r\n                                padding: '4px 12px',\r\n                                border: '1px solid #d1d5db',\r\n                                borderRadius: '4px',\r\n                                background: 'white',\r\n                                cursor: 'pointer',\r\n                                fontWeight: 500,\r\n                                fontSize: '12px'\r\n                            }}\r\n                        >\r\n                            Discard\r\n                        </button>\r\n                        <button\r\n                            onClick={handleSaveChanges}\r\n                            style={{\r\n                                padding: '4px 12px',\r\n                                border: 'none',\r\n                                borderRadius: '4px',\r\n                                background: '#16a34a',\r\n                                color: 'white',\r\n                                cursor: 'pointer',\r\n                                fontWeight: 500,\r\n                                fontSize: '12px'\r\n                            }}\r\n                        >\r\n                            {isSaving ? 'Saving...' : 'Save Changes'}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            <TimelineHeader\r\n                timelineData={timelineData}\r\n                title=\"Projects\"\r\n                onToggleFilter={() => setIsFilterVisible(!isFilterVisible)}\r\n                isFilterVisible={isFilterVisible}\r\n                hasActiveFilters={selectedFilterTags.length > 0}\r\n            />\r\n            <TooltipPortal />\r\n\r\n            {/* Tags Filter Row */}\r\n            {allAvailableTags.length > 0 && isFilterVisible && (\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        background: 'white',\r\n                        borderBottom: '1px solid #f1f5f9',\r\n                        minHeight: '50px'\r\n                    }}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            width: '300px',\r\n                            padding: '12px 16px',\r\n                            borderRight: '1px solid #e5e7eb',\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            gap: '8px'\r\n                        }}\r\n                    >\r\n                        <Tag size={16} className=\"text-muted\" />\r\n                        <span style={{fontSize: '13px', color: '#6b7280'}}>\r\n                            Filter by tags:\r\n                        </span>\r\n                    </div>\r\n                    <div\r\n                        style={{\r\n                            flex: 1,\r\n                            padding: '8px 16px',\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            gap: '12px'\r\n                        }}\r\n                    >\r\n                        <div style={{flex: 1, maxWidth: '400px'}}>\r\n                            <TagSelector\r\n                                selectedTags={selectedFilterTags}\r\n                                onChange={setSelectedFilterTags}\r\n                                placeholder=\"Select tags to filter projects...\"\r\n                            />\r\n                        </div>\r\n                        {selectedFilterTags.length > 0 && (\r\n                            <span\r\n                                style={{\r\n                                    fontSize: '12px',\r\n                                    color: '#6b7280',\r\n                                    whiteSpace: 'nowrap'\r\n                                }}\r\n                            >\r\n                                Showing {filteredProjects.length} of{' '}\r\n                                {processedProjects.length} projects\r\n                            </span>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Project Rows */}\r\n            <div style={{background: 'white'}}>\r\n                {isLoading ? (\r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                            justifyContent: 'center',\r\n                            alignItems: 'center',\r\n                            height: '200px',\r\n                            fontSize: '16px',\r\n                            color: '#6b7280'\r\n                        }}\r\n                    >\r\n                        Loading projects...\r\n                    </div>\r\n                ) : error ? (\r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                            justifyContent: 'center',\r\n                            alignItems: 'center',\r\n                            height: '200px',\r\n                            fontSize: '16px',\r\n                            color: '#dc2626'\r\n                        }}\r\n                    >\r\n                        Error loading projects: {error.message}\r\n                    </div>\r\n                ) : filteredProjects.length === 0 ? (\r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                            justifyContent: 'center',\r\n                            alignItems: 'center',\r\n                            height: '200px',\r\n                            fontSize: '16px',\r\n                            color: '#6b7280'\r\n                        }}\r\n                    >\r\n                        {selectedFilterTags.length > 0\r\n                            ? 'No projects match the selected tags'\r\n                            : 'No projects found'}\r\n                    </div>\r\n                ) : (\r\n                    filteredProjects.map(projectTimeline => {\r\n                        return (\r\n                            <div\r\n                                key={projectTimeline.project.id}\r\n                                style={{borderBottom: '1px solid #f1f5f9'}}\r\n                            >\r\n                                {/* Project Header */}\r\n                                <div\r\n                                    style={{\r\n                                        display: 'flex',\r\n                                        minHeight: '80px',\r\n                                        cursor: 'pointer',\r\n                                        background: expandedProjects.has(\r\n                                            projectTimeline.project.id\r\n                                        )\r\n                                            ? '#f8fafc'\r\n                                            : 'white'\r\n                                    }}\r\n                                    onClick={() =>\r\n                                        toggleProject(\r\n                                            projectTimeline.project.id\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    <div\r\n                                        style={{\r\n                                            width: '300px',\r\n                                            padding: '16px',\r\n                                            borderRight: '1px solid #e5e7eb',\r\n                                            display: 'flex',\r\n                                            alignItems: 'center',\r\n                                            gap: '12px'\r\n                                        }}\r\n                                    >\r\n                                        <span\r\n                                            style={{\r\n                                                fontSize: '18px',\r\n                                                color: expandedProjects.has(\r\n                                                    projectTimeline.project.id\r\n                                                )\r\n                                                    ? '#374151'\r\n                                                    : '#9ca3af'\r\n                                            }}\r\n                                        >\r\n                                            {expandedProjects.has(\r\n                                                projectTimeline.project.id\r\n                                            )\r\n                                                ? '▼'\r\n                                                : '▶'}\r\n                                        </span>\r\n                                        <div>\r\n                                            <div\r\n                                                style={{\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                    gap: '8px',\r\n                                                    marginBottom: '4px'\r\n                                                }}\r\n                                            >\r\n                                                <div\r\n                                                    style={{\r\n                                                        fontWeight: '600',\r\n                                                        color: '#1f2937',\r\n                                                        fontSize: '14px'\r\n                                                    }}\r\n                                                >\r\n                                                    {\r\n                                                        projectTimeline.project\r\n                                                            .name\r\n                                                    }\r\n                                                </div>\r\n                                                <EngagementContextIndicator\r\n                                                    engagementContext={\r\n                                                        projectTimeline.project\r\n                                                            .engagementContext\r\n                                                    }\r\n                                                    size=\"sm\"\r\n                                                />\r\n                                            </div>\r\n                                            <div\r\n                                                style={{\r\n                                                    fontSize: '12px',\r\n                                                    color: '#6b7280',\r\n                                                    lineHeight: '1.4'\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    projectTimeline.project\r\n                                                        .description\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div\r\n                                        style={{\r\n                                            flex: 1,\r\n                                            position: 'relative',\r\n                                            padding: '16px 0'\r\n                                        }}\r\n                                    >\r\n                                        <div\r\n                                            style={{\r\n                                                position: 'relative',\r\n                                                height: '36px',\r\n                                                margin: '8px 16px'\r\n                                            }}\r\n                                        >\r\n                                            {/* Project extent background bar */}\r\n                                            {(() => {\r\n                                                const projectBarStyle =\r\n                                                    getBarStylesForProject(\r\n                                                        projectTimeline.project\r\n                                                            .startGlobalWeekNumber,\r\n                                                        projectTimeline.project\r\n                                                            .durationInWeeks,\r\n                                                        timelineData.startGlobalWeek,\r\n                                                        timelineData.columns\r\n                                                            .length\r\n                                                    );\r\n\r\n                                                if (!projectBarStyle)\r\n                                                    return null;\r\n\r\n                                                return (\r\n                                                    <div\r\n                                                        title={`Project extent: ${projectTimeline.project.durationInWeeks} weeks`}\r\n                                                        style={{\r\n                                                            ...projectBarStyle,\r\n                                                            background:\r\n                                                                'rgb(79, 70, 229)',\r\n                                                            zIndex: 1\r\n                                                        }}\r\n                                                    />\r\n                                                );\r\n                                            })()}\r\n\r\n                                            {/* Project phases on top */}\r\n                                            {projectTimeline.project.phases.map(\r\n                                                (phase: any) => {\r\n                                                    const barStyle =\r\n                                                        getBarStylesForProject(\r\n                                                            phase.startGlobalWeekNumber,\r\n                                                            phase.durationInWeeks,\r\n                                                            timelineData.startGlobalWeek,\r\n                                                            timelineData.columns\r\n                                                                .length\r\n                                                        );\r\n\r\n                                                    if (!barStyle) return null;\r\n\r\n                                                    return (\r\n                                                        <div\r\n                                                            key={phase.id}\r\n                                                            title={`${phase.name} (${phase.durationInWeeks} weeks)`}\r\n                                                            style={{\r\n                                                                ...barStyle,\r\n                                                                background:\r\n                                                                    phase.color,\r\n                                                                zIndex: 2\r\n                                                            }}\r\n                                                        >\r\n                                                            {phase.name}\r\n                                                        </div>\r\n                                                    );\r\n                                                }\r\n                                            )}\r\n                                        </div>\r\n                                        <div\r\n                                            style={{\r\n                                                display: 'flex',\r\n                                                gap: '8px',\r\n                                                margin: '12px 16px 8px 16px',\r\n                                                flexWrap: 'wrap',\r\n                                                alignItems: 'center'\r\n                                            }}\r\n                                        >\r\n                                            {/* Tags */}\r\n                                            {projectTimeline.project.tags &&\r\n                                                projectTimeline.project.tags\r\n                                                    .length > 0 && (\r\n                                                    <>\r\n                                                        {projectTimeline.project.tags.map(\r\n                                                            (tag: any) => (\r\n                                                                <DisplayTag\r\n                                                                    key={\r\n                                                                        tag.id ||\r\n                                                                        tag.name\r\n                                                                    }\r\n                                                                    tag={tag}\r\n                                                                    size=\"sm\"\r\n                                                                />\r\n                                                            )\r\n                                                        )}\r\n                                                        {/* Separator between tags and resources */}\r\n                                                        <div\r\n                                                            style={{\r\n                                                                width: '1px',\r\n                                                                height: '16px',\r\n                                                                background:\r\n                                                                    '#e5e7eb',\r\n                                                                margin: '0 4px'\r\n                                                            }}\r\n                                                        />\r\n                                                    </>\r\n                                                )}\r\n\r\n                                            {/* Resources */}\r\n                                            {projectTimeline.resources\r\n                                                .slice(0, 4)\r\n                                                .map((resource: any) => (\r\n                                                    <div\r\n                                                        key={`${resource.id}-summary`}\r\n                                                        style={{\r\n                                                            display: 'flex',\r\n                                                            alignItems:\r\n                                                                'center',\r\n                                                            gap: '4px',\r\n                                                            fontSize: '11px',\r\n                                                            color: '#6b7280'\r\n                                                        }}\r\n                                                    >\r\n                                                        {resource.assignmentType ===\r\n                                                        AssignmentType.Person ? (\r\n                                                            <User size={12} />\r\n                                                        ) : (\r\n                                                            <Users size={12} />\r\n                                                        )}\r\n                                                        {resource.name}\r\n                                                        {/* Show team membership for persons */}\r\n                                                        {resource.assignmentType ===\r\n                                                            AssignmentType.Person &&\r\n                                                            resource.teams &&\r\n                                                            resource.teams\r\n                                                                .length > 0 && (\r\n                                                                <span\r\n                                                                    style={{\r\n                                                                        fontSize:\r\n                                                                            '10px',\r\n                                                                        color: '#9ca3af',\r\n                                                                        background:\r\n                                                                            '#f1f5f9',\r\n                                                                        padding:\r\n                                                                            '1px 4px',\r\n                                                                        borderRadius:\r\n                                                                            '2px',\r\n                                                                        marginLeft:\r\n                                                                            '2px'\r\n                                                                    }}\r\n                                                                    title={`Member of: ${resource.teams.map((t: any) => t.name).join(', ')}`}\r\n                                                                >\r\n                                                                    {\r\n                                                                        resource\r\n                                                                            .teams\r\n                                                                            .length\r\n                                                                    }\r\n                                                                    T\r\n                                                                </span>\r\n                                                            )}\r\n                                                    </div>\r\n                                                ))}\r\n                                            {projectTimeline.resources.length >\r\n                                                4 && (\r\n                                                <span\r\n                                                    style={{\r\n                                                        fontSize: '11px',\r\n                                                        color: '#9ca3af'\r\n                                                    }}\r\n                                                >\r\n                                                    +\r\n                                                    {projectTimeline.resources\r\n                                                        .length - 4}{' '}\r\n                                                    more\r\n                                                </span>\r\n                                            )}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {/* Expanded Details */}\r\n                                {expandedProjects.has(\r\n                                    projectTimeline.project.id\r\n                                ) && (\r\n                                    <div\r\n                                        style={{\r\n                                            background: '#fefefe',\r\n                                            borderTop: '1px solid #f1f5f9'\r\n                                        }}\r\n                                    >\r\n                                        {/* Resource Allocation Rows */}\r\n                                        <div\r\n                                            style={{\r\n                                                borderTop: '1px solid #f1f5f9'\r\n                                            }}\r\n                                        >\r\n                                            <div style={{display: 'flex'}}>\r\n                                                <div\r\n                                                    style={{\r\n                                                        width: '300px',\r\n                                                        padding:\r\n                                                            '16px 16px 8px 16px',\r\n                                                        borderRight:\r\n                                                            '1px solid #e5e7eb',\r\n                                                        fontSize: '13px',\r\n                                                        color: '#6b7280',\r\n                                                        fontWeight: '500'\r\n                                                    }}\r\n                                                >\r\n                                                    Resource Allocation\r\n                                                </div>\r\n                                                <div style={{flex: 1}}>\r\n                                                    {/* Empty Header */}\r\n                                                </div>\r\n                                            </div>\r\n                                            {projectTimeline.resources.map(\r\n                                                (resource: any) => (\r\n                                                    <div\r\n                                                        key={resource.id}\r\n                                                        style={{\r\n                                                            display: 'flex',\r\n                                                            minHeight: '40px',\r\n                                                            borderTop:\r\n                                                                '1px solid #f9fafb'\r\n                                                        }}\r\n                                                    >\r\n                                                        <div\r\n                                                            style={{\r\n                                                                width: '300px',\r\n                                                                padding:\r\n                                                                    '8px 16px',\r\n                                                                borderRight:\r\n                                                                    '1px solid #e5e7eb',\r\n                                                                fontSize:\r\n                                                                    '12px',\r\n                                                                color: '#475569',\r\n                                                                display: 'flex',\r\n                                                                alignItems:\r\n                                                                    'center',\r\n                                                                gap: '8px'\r\n                                                            }}\r\n                                                        >\r\n                                                            {resource.assignmentType ===\r\n                                                            AssignmentType.Person ? (\r\n                                                                <User\r\n                                                                    size={14}\r\n                                                                />\r\n                                                            ) : (\r\n                                                                <Users\r\n                                                                    size={14}\r\n                                                                />\r\n                                                            )}\r\n                                                            {resource.name}\r\n                                                            {/* Show team membership for persons */}\r\n                                                            {resource.assignmentType ===\r\n                                                                AssignmentType.Person &&\r\n                                                                resource.teams &&\r\n                                                                resource.teams\r\n                                                                    .length >\r\n                                                                    0 && (\r\n                                                                    <span\r\n                                                                        style={{\r\n                                                                            fontSize:\r\n                                                                                '10px',\r\n                                                                            color: '#6b7280',\r\n                                                                            background:\r\n                                                                                '#f1f5f9',\r\n                                                                            padding:\r\n                                                                                '2px 4px',\r\n                                                                            borderRadius:\r\n                                                                                '3px',\r\n                                                                            marginLeft:\r\n                                                                                '4px'\r\n                                                                        }}\r\n                                                                        title={`Member of: ${resource.teams.map((t: any) => t.name).join(', ')}`}\r\n                                                                    >\r\n                                                                        {resource\r\n                                                                            .teams\r\n                                                                            .length ===\r\n                                                                        1\r\n                                                                            ? '1 team'\r\n                                                                            : `${resource.teams.length} teams`}\r\n                                                                    </span>\r\n                                                                )}\r\n                                                        </div>\r\n                                                        <div\r\n                                                            style={{\r\n                                                                flex: 1,\r\n                                                                position:\r\n                                                                    'relative',\r\n                                                                padding: '2px 0'\r\n                                                            }}\r\n                                                        >\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    position:\r\n                                                                        'relative',\r\n                                                                    height: '24px',\r\n                                                                    margin: '0'\r\n                                                                }}\r\n                                                            >\r\n                                                                {timelineData.columns.map(\r\n                                                                    column => {\r\n                                                                        const allocation =\r\n                                                                            resource.allocations.find(\r\n                                                                                (\r\n                                                                                    alloc: DashboardAllocationModel\r\n                                                                                ) =>\r\n                                                                                    alloc.globalWeekNumber ===\r\n                                                                                    column.globalWeekNumber\r\n                                                                            );\r\n                                                                        const canEdit =\r\n                                                                            projectTimeline\r\n                                                                                .project\r\n                                                                                .canEdit ||\r\n                                                                            projectTimeline\r\n                                                                                .project\r\n                                                                                .canEditResources;\r\n\r\n                                                                        return (\r\n                                                                            <ProjectResourceAllocationCell\r\n                                                                                key={`${resource.id}-${column.globalWeekNumber}`}\r\n                                                                                allocation={\r\n                                                                                    allocation ||\r\n                                                                                    null\r\n                                                                                }\r\n                                                                                resource={\r\n                                                                                    resource\r\n                                                                                }\r\n                                                                                project={\r\n                                                                                    projectTimeline.project\r\n                                                                                }\r\n                                                                                globalWeekNumber={\r\n                                                                                    column.globalWeekNumber\r\n                                                                                }\r\n                                                                                canEdit={\r\n                                                                                    canEdit\r\n                                                                                }\r\n                                                                                onAllocationChange={\r\n                                                                                    handleAllocationChange\r\n                                                                                }\r\n                                                                                getBarStyles={(\r\n                                                                                    startWeek,\r\n                                                                                    duration\r\n                                                                                ) =>\r\n                                                                                    getBarStyles(\r\n                                                                                        startWeek,\r\n                                                                                        duration\r\n                                                                                    )\r\n                                                                                }\r\n                                                                                calculateTotalWeeklyAllocation={\r\n                                                                                    calculateTotalWeeklyAllocation\r\n                                                                                }\r\n                                                                            />\r\n                                                                        );\r\n                                                                    }\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )\r\n                                            )}\r\n\r\n                                            {/* Add Resource Row - Only show if user can edit */}\r\n                                            {(projectTimeline.project.canEdit ||\r\n                                                projectTimeline.project\r\n                                                    .canEditResources) && (\r\n                                                <div\r\n                                                    style={{\r\n                                                        display: 'flex',\r\n                                                        minHeight: '40px',\r\n                                                        borderTop:\r\n                                                            '1px solid #f9fafb'\r\n                                                    }}\r\n                                                >\r\n                                                    <div\r\n                                                        style={{\r\n                                                            width: '300px',\r\n                                                            padding: '8px 16px',\r\n                                                            borderRight:\r\n                                                                '1px solid #e5e7eb',\r\n                                                            fontSize: '12px',\r\n                                                            color: '#6b7280',\r\n                                                            display: 'flex',\r\n                                                            alignItems:\r\n                                                                'center',\r\n                                                            gap: '8px'\r\n                                                        }}\r\n                                                    >\r\n                                                        <span\r\n                                                            style={{\r\n                                                                fontStyle:\r\n                                                                    'italic'\r\n                                                            }}\r\n                                                        >\r\n                                                            Add Resource\r\n                                                        </span>\r\n                                                    </div>\r\n                                                    <div\r\n                                                        style={{\r\n                                                            flex: 1,\r\n                                                            position:\r\n                                                                'relative',\r\n                                                            padding: '2px 0'\r\n                                                        }}\r\n                                                    >\r\n                                                        <div\r\n                                                            style={{\r\n                                                                position:\r\n                                                                    'relative',\r\n                                                                height: '24px',\r\n                                                                margin: '0'\r\n                                                            }}\r\n                                                        >\r\n                                                            {timelineData.columns.map(\r\n                                                                column => (\r\n                                                                    <AddResourceAllocationCell\r\n                                                                        key={`add-resource-${projectTimeline.project.id}-${column.globalWeekNumber}`}\r\n                                                                        project={\r\n                                                                            projectTimeline.project\r\n                                                                        }\r\n                                                                        globalWeekNumber={\r\n                                                                            column.globalWeekNumber\r\n                                                                        }\r\n                                                                        canEdit={\r\n                                                                            true\r\n                                                                        }\r\n                                                                        onResourceAndAllocationSelect={\r\n                                                                            handleResourceAndAllocationSelect\r\n                                                                        }\r\n                                                                        getBarStyles={(\r\n                                                                            startWeek,\r\n                                                                            duration\r\n                                                                        ) =>\r\n                                                                            getBarStyles(\r\n                                                                                startWeek,\r\n                                                                                duration\r\n                                                                            )\r\n                                                                        }\r\n                                                                    />\r\n                                                                )\r\n                                                            )}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        );\r\n                    })\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProjectsView;\r\n","import {useQuery, UseQueryOptions, UseQueryResult} from '@tanstack/react-query';\r\nimport baseUrl from '../baseUrl';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport {handleResponse} from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\nimport { \r\n    ResourcesDashboardData\r\n} from '../../types';\r\n\r\n// Request parameters for the API\r\nexport interface ResourcesDashboardRequest {\r\n    startGlobalWeekNumber?: number;\r\n    numberOfWeeks?: number;\r\n}\r\n\r\ntype ResourcesDashboardDataQueryOptions = Omit<\r\n    UseQueryOptions<\r\n        ResourcesDashboardData,\r\n        Error | ProblemDetailsError,\r\n        ResourcesDashboardData,\r\n        readonly unknown[]\r\n    >,\r\n    'queryKey' | 'queryFn'\r\n>;\r\n\r\nconst useGetResourcesDashboardData = (\r\n    params: ResourcesDashboardRequest,\r\n    options?: ResourcesDashboardDataQueryOptions\r\n): UseQueryResult<ResourcesDashboardData, Error> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    const queryString = params\r\n        ? new URLSearchParams(\r\n              Object.fromEntries(\r\n                  Object.entries(params).filter(([, v]) => v != null)\r\n              ) as Record<string, string>\r\n          ).toString()\r\n        : '';\r\n\r\n    const url = `${baseUrl}/api/resources/dashboard-data${queryString ? `?${queryString}` : ''}`;\r\n\r\n    const queryKey = ['resources-dashboard-data', params] as const;\r\n\r\n    return useQuery({\r\n        queryKey,\r\n        queryFn: async () => {\r\n            const response = await authenticatedFetch(url);\r\n            return handleResponse<ResourcesDashboardData>(response);\r\n        },\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useGetResourcesDashboardData;\r\n","import React, {useCallback, useState, useMemo} from 'react';\r\nimport {User, Users, Tag} from 'lucide-react';\r\nimport {DashboardViewProps} from './DashboardContainer';\r\nimport TimelineHeader from './TimelineHeader';\r\nimport useGetResourcesDashboardData, {\r\n    ResourcesDashboardRequest\r\n} from '../../../api/resources-dashboard/useGetResourcesDashboardData';\r\nimport {\r\n    AssignmentType,\r\n    ResourceTimeline,\r\n    WeeklyAllocation\r\n} from '../../../types';\r\nimport {getHeatmapColor} from '../../../lib/heatmapColors';\r\nimport {useTooltip} from '../../../hooks/useTooltip';\r\nimport AllocationTooltip from './AllocationTooltip';\r\nimport TagSelector from '../../utility/TagSelector';\r\nimport {TagModel} from '../../../types';\r\nimport {calculatePersonAllocationFromResources} from '../../../lib/allocationCalculations';\r\n\r\ninterface ResourcesViewProps extends DashboardViewProps {\r\n    requestParams: ResourcesDashboardRequest;\r\n}\r\n\r\nconst ResourcesView: React.FC<ResourcesViewProps> = ({\r\n    timelineData,\r\n    requestParams\r\n}) => {\r\n    const {\r\n        data: dashboardData,\r\n        isLoading,\r\n        error\r\n    } = useGetResourcesDashboardData(requestParams);\r\n\r\n    const resources = dashboardData?.resources || [];\r\n    const [expandedResources, setExpandedResources] = useState<Set<string>>(\r\n        new Set()\r\n    );\r\n    const [selectedFilterTags, setSelectedFilterTags] = useState<TagModel[]>(\r\n        []\r\n    );\r\n    const [isFilterVisible, setIsFilterVisible] = useState<boolean>(false);\r\n\r\n    const {tooltipProps, TooltipPortal} = useTooltip();\r\n\r\n    // Get all unique tags from all project details across all resources\r\n    const allAvailableTags = useMemo(() => {\r\n        const tagMap = new Map<string, TagModel>();\r\n        resources.forEach(resource => {\r\n            resource.projectDetails.forEach(projectDetail => {\r\n                projectDetail.project.tags?.forEach(tag => {\r\n                    if (tag.id) {\r\n                        tagMap.set(tag.id, tag);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        return Array.from(tagMap.values()).sort((a, b) =>\r\n            a.name.localeCompare(b.name)\r\n        );\r\n    }, [resources]);\r\n\r\n    // Filter resources based on selected tags (OR logic)\r\n    // A resource is shown if it has ANY project with ANY of the selected tags\r\n    const filteredResources = useMemo(() => {\r\n        if (selectedFilterTags.length === 0) {\r\n            return resources;\r\n        }\r\n\r\n        const selectedTagIds = new Set(\r\n            selectedFilterTags.map(tag => tag.id).filter(Boolean)\r\n        );\r\n\r\n        return resources.filter(resource => {\r\n            // Check if this resource has any project with any of the selected tags\r\n            return resource.projectDetails.some(projectDetail =>\r\n                projectDetail.project.tags?.some(\r\n                    tag => tag.id && selectedTagIds.has(tag.id)\r\n                )\r\n            );\r\n        });\r\n    }, [resources, selectedFilterTags]);\r\n\r\n    const getBarStyles = useCallback(\r\n        (\r\n            itemStartGlobalWeek: number,\r\n            itemDurationInWeeks: number,\r\n            viewStartGlobalWeek: number,\r\n            totalWeeksInView: number\r\n        ): React.CSSProperties | null => {\r\n            const itemEndGlobalWeek =\r\n                itemStartGlobalWeek + itemDurationInWeeks - 1;\r\n            const viewEndGlobalWeek =\r\n                viewStartGlobalWeek + totalWeeksInView - 1;\r\n\r\n            if (\r\n                itemEndGlobalWeek < viewStartGlobalWeek ||\r\n                itemStartGlobalWeek > viewEndGlobalWeek\r\n            ) {\r\n                return null; // The item is not in the current view\r\n            }\r\n\r\n            const visibleStartWeek = Math.max(\r\n                itemStartGlobalWeek,\r\n                viewStartGlobalWeek\r\n            );\r\n            const visibleEndWeek = Math.min(\r\n                itemEndGlobalWeek,\r\n                viewEndGlobalWeek\r\n            );\r\n\r\n            const startOffsetWeeks = visibleStartWeek - viewStartGlobalWeek;\r\n            const visibleDurationWeeks = visibleEndWeek - visibleStartWeek + 1;\r\n\r\n            if (visibleDurationWeeks <= 0) return null;\r\n\r\n            const leftPercent = (startOffsetWeeks / totalWeeksInView) * 100;\r\n            const widthPercent =\r\n                (visibleDurationWeeks / totalWeeksInView) * 100;\r\n\r\n            return {\r\n                position: 'absolute',\r\n                left: `${leftPercent}%`,\r\n                width: `${widthPercent}%`,\r\n                height: '24px',\r\n                borderRadius: '4px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                color: 'white',\r\n                fontSize: '11px',\r\n                fontWeight: '500',\r\n                boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\r\n                overflow: 'hidden',\r\n                textOverflow: 'ellipsis',\r\n                whiteSpace: 'nowrap',\r\n                padding: '0 4px'\r\n            };\r\n        },\r\n        []\r\n    );\r\n\r\n    const toggleResource = (resourceId: string) => {\r\n        setExpandedResources(prev => {\r\n            const newSet = new Set(prev);\r\n            if (newSet.has(resourceId)) {\r\n                newSet.delete(resourceId);\r\n            } else {\r\n                newSet.add(resourceId);\r\n            }\r\n            return newSet;\r\n        });\r\n    };\r\n\r\n    const findAllocationForWeek = (\r\n        resource: ResourceTimeline,\r\n        globalWeekNumber: number\r\n    ): WeeklyAllocation | undefined => {\r\n        // Assumes the API returns allocations with the global week number\r\n        return resource.allocations.find(\r\n            alloc => alloc.globalWeekNumber === globalWeekNumber\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <TimelineHeader\r\n                timelineData={timelineData}\r\n                title=\"Resources\"\r\n                onToggleFilter={() => setIsFilterVisible(!isFilterVisible)}\r\n                isFilterVisible={isFilterVisible}\r\n                hasActiveFilters={selectedFilterTags.length > 0}\r\n            />\r\n            <TooltipPortal />\r\n\r\n            {/* Tags Filter Row */}\r\n            {allAvailableTags.length > 0 && isFilterVisible && (\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        background: 'white',\r\n                        borderBottom: '1px solid #f1f5f9',\r\n                        minHeight: '50px'\r\n                    }}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            width: '300px',\r\n                            padding: '12px 16px',\r\n                            borderRight: '1px solid #e5e7eb',\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            gap: '8px'\r\n                        }}\r\n                    >\r\n                        <Tag size={16} className=\"text-muted\" />\r\n                        <span style={{fontSize: '13px', color: '#6b7280'}}>\r\n                            Filter by tags:\r\n                        </span>\r\n                    </div>\r\n                    <div\r\n                        style={{\r\n                            flex: 1,\r\n                            padding: '8px 16px',\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            gap: '12px'\r\n                        }}\r\n                    >\r\n                        <div style={{flex: 1, maxWidth: '400px'}}>\r\n                            <TagSelector\r\n                                selectedTags={selectedFilterTags}\r\n                                onChange={setSelectedFilterTags}\r\n                                placeholder=\"Select tags to filter resources...\"\r\n                            />\r\n                        </div>\r\n                        {selectedFilterTags.length > 0 && (\r\n                            <span\r\n                                style={{\r\n                                    fontSize: '12px',\r\n                                    color: '#6b7280',\r\n                                    whiteSpace: 'nowrap'\r\n                                }}\r\n                            >\r\n                                Showing {filteredResources.length} of{' '}\r\n                                {resources.length} resources\r\n                            </span>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            <div style={{background: 'white'}}>\r\n                {isLoading && <div>Loading resources...</div>}\r\n                {error && <div>Error: {error.message}</div>}\r\n                {!isLoading && !error && filteredResources.length === 0 && (\r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                            justifyContent: 'center',\r\n                            alignItems: 'center',\r\n                            height: '200px',\r\n                            fontSize: '16px',\r\n                            color: '#6b7280'\r\n                        }}\r\n                    >\r\n                        {selectedFilterTags.length > 0\r\n                            ? 'No resources match the selected tags'\r\n                            : 'No resources found'}\r\n                    </div>\r\n                )}\r\n                {!isLoading &&\r\n                    !error &&\r\n                    filteredResources.map(resource => (\r\n                        <div\r\n                            key={resource.id}\r\n                            style={{borderBottom: '1px solid #f1f5f9'}}\r\n                        >\r\n                            {/* Resource Row */}\r\n                            <div\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    minHeight: '50px',\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                                onClick={() => toggleResource(resource.id)}\r\n                            >\r\n                                <div\r\n                                    style={{\r\n                                        width: '300px',\r\n                                        padding: '8px 16px',\r\n                                        borderRight: '1px solid #e5e7eb',\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        gap: '8px',\r\n                                        background: expandedResources.has(\r\n                                            resource.id\r\n                                        )\r\n                                            ? '#f8fafc'\r\n                                            : 'white'\r\n                                    }}\r\n                                >\r\n                                    <span style={{color: '#64748b'}}>\r\n                                        {resource.type ===\r\n                                        AssignmentType.Person ? (\r\n                                            <User size={16} />\r\n                                        ) : (\r\n                                            <Users size={16} />\r\n                                        )}\r\n                                    </span>\r\n                                    <span\r\n                                        style={{\r\n                                            fontWeight: 500,\r\n                                            color: '#1e293b'\r\n                                        }}\r\n                                    >\r\n                                        {resource.name}\r\n                                    </span>\r\n                                    {/* Show team membership for persons */}\r\n                                    {resource.type === AssignmentType.Person && resource.teams && resource.teams.length > 0 && (\r\n                                        <span\r\n                                            style={{\r\n                                                fontSize: '11px',\r\n                                                color: '#6b7280',\r\n                                                background: '#f1f5f9',\r\n                                                padding: '2px 6px',\r\n                                                borderRadius: '4px',\r\n                                                marginLeft: '8px'\r\n                                            }}\r\n                                            title={`Member of: ${resource.teams.map(t => t.name).join(', ')}`}\r\n                                        >\r\n                                            {resource.teams.length === 1 ? '1 team' : `${resource.teams.length} teams`}\r\n                                        </span>\r\n                                    )}\r\n                                    <span\r\n                                        style={{\r\n                                            marginLeft: 'auto',\r\n                                            fontSize: '18px',\r\n                                            color: '#9ca3af'\r\n                                        }}\r\n                                    >\r\n                                        {expandedResources.has(resource.id)\r\n                                            ? '▼'\r\n                                            : '▶'}\r\n                                    </span>\r\n                                </div>\r\n                                <div\r\n                                    style={{\r\n                                        flex: 1,\r\n                                        display: 'flex',\r\n                                        background: '#fdfdfd',\r\n                                        position: 'relative'\r\n                                    }}\r\n                                >\r\n                                    {timelineData.columns.map((col, index) => {\r\n                                        const allocation = findAllocationForWeek(resource, col.globalWeekNumber);\r\n                                        \r\n                                        // For persons, calculate total allocation including team hours\r\n                                        let displayHours = 0;\r\n                                        let percentageBAU = 0;\r\n                                        let percentageNonBAU = 0;\r\n                                        let totalAllocation = null;\r\n                                        \r\n                                        if (resource.type === AssignmentType.Person) {\r\n                                            totalAllocation = calculatePersonAllocationFromResources(\r\n                                                resource.id,\r\n                                                col.globalWeekNumber,\r\n                                                resources\r\n                                            );\r\n                                            displayHours = totalAllocation.totalHoursBAU + totalAllocation.totalHoursNonBAU;\r\n                                            \r\n                                            // Use week-specific available hours from the calculation result\r\n                                            const availableHours = totalAllocation.availableHours ?? 40; // fallback to 40 if not available\r\n                                            percentageBAU = totalAllocation.totalHoursBAU / availableHours;\r\n                                            percentageNonBAU = totalAllocation.totalHoursNonBAU / availableHours;\r\n                                        } else {\r\n                                            // For teams, use the existing allocation data\r\n                                            displayHours = allocation ? allocation.totalHoursBAU + allocation.totalHoursNonBAU : 0;\r\n                                            percentageBAU = allocation?.allocationPercentageBAU ?? 0;\r\n                                            percentageNonBAU = allocation?.allocationPercentageNonBAU ?? 0;\r\n                                        }\r\n\r\n                                        const color = getHeatmapColor(percentageBAU, percentageNonBAU);\r\n                                        \r\n                                        let title = `Week ${col.weekOfYear} (${col.year}): `;\r\n                                        if (resource.type === AssignmentType.Person && totalAllocation) {\r\n                                            const totalPercentage = Math.round((percentageBAU + percentageNonBAU) * 100);\r\n                                            title += `${totalPercentage}% (${displayHours.toFixed(1)} hrs total)`;\r\n                                            if (totalAllocation.teamHoursBAU + totalAllocation.teamHoursNonBAU > 0) {\r\n                                                title += ` - Direct: ${(totalAllocation.directHoursBAU + totalAllocation.directHoursNonBAU).toFixed(1)}h, Team: ${(totalAllocation.teamHoursBAU + totalAllocation.teamHoursNonBAU).toFixed(1)}h`;\r\n                                            }\r\n                                        } else {\r\n                                            title += displayHours > 0\r\n                                                ? `${Math.round((percentageBAU + percentageNonBAU) * 100)}% (${displayHours.toFixed(1)} hrs)`\r\n                                                : 'No allocation';\r\n                                        }\r\n\r\n                                        return (\r\n                                            <div\r\n                                                key={index}\r\n                                                title={title}\r\n                                                style={{\r\n                                                    flex: 1,\r\n                                                    borderRight: '1px solid #f1f5f9',\r\n                                                    background: color,\r\n                                                    minWidth: '50px',\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                    justifyContent: 'center',\r\n                                                    fontSize: '11px',\r\n                                                    fontWeight: '500',\r\n                                                    color: displayHours > 0 ? 'white' : '#9ca3af'\r\n                                                }}\r\n                                            >\r\n                                                {displayHours > 0 ? `${displayHours.toFixed(0)}h` : ''}\r\n                                            </div>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Expanded Content */}\r\n                            {expandedResources.has(resource.id) && (\r\n                                <div\r\n                                    style={{\r\n                                        background: '#fefefe',\r\n                                        borderTop: '1px solid #f1f5f9'\r\n                                    }}\r\n                                >\r\n                                    {resource.projectDetails.length === 0 ? (\r\n                                        <div\r\n                                            style={{\r\n                                                display: 'flex',\r\n                                                padding: '16px',\r\n                                                color: '#6b7280',\r\n                                                fontSize: '12px'\r\n                                            }}\r\n                                        >\r\n                                            <div\r\n                                                style={{\r\n                                                    width: '300px',\r\n                                                    borderRight:\r\n                                                        '1px solid #e5e7eb'\r\n                                                }}\r\n                                            >\r\n                                                {/* Gutter */}\r\n                                            </div>\r\n                                            <div\r\n                                                style={{\r\n                                                    flex: 1,\r\n                                                    paddingLeft: '16px'\r\n                                                }}\r\n                                            >\r\n                                                No project allocations in this\r\n                                                time range.\r\n                                            </div>\r\n                                        </div>\r\n                                    ) : (\r\n                                        resource.projectDetails.map(\r\n                                            projectDetail => (\r\n                                                <div\r\n                                                    key={\r\n                                                        projectDetail.project.id\r\n                                                    }\r\n                                                    style={{\r\n                                                        borderBottom:\r\n                                                            '1px solid #f9fafb'\r\n                                                    }}\r\n                                                >\r\n                                                    {/* Project Header */}\r\n                                                    <div\r\n                                                        style={{\r\n                                                            display: 'flex',\r\n                                                            minHeight: '40px'\r\n                                                        }}\r\n                                                    >\r\n                                                        <div\r\n                                                            style={{\r\n                                                                width: '300px',\r\n                                                                padding:\r\n                                                                    '12px 16px',\r\n                                                                borderRight:\r\n                                                                    '1px solid #e5e7eb',\r\n                                                                fontSize:\r\n                                                                    '13px',\r\n                                                                color: '#6b7280',\r\n                                                                fontWeight:\r\n                                                                    '500',\r\n                                                                display: 'flex',\r\n                                                                alignItems:\r\n                                                                    'center'\r\n                                                            }}\r\n                                                        >\r\n                                                            {\r\n                                                                projectDetail\r\n                                                                    .project\r\n                                                                    .name\r\n                                                            }\r\n                                                        </div>\r\n                                                        <div\r\n                                                            style={{\r\n                                                                flex: 1,\r\n                                                                position:\r\n                                                                    'relative',\r\n                                                                display: 'flex',\r\n                                                                alignItems: 'center',\r\n                                                                padding: '8px 0'\r\n                                                            }}\r\n                                                        >\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    position:\r\n                                                                        'relative',\r\n                                                                    height: '24px',\r\n                                                                    width: '100%',\r\n                                                                    margin: '0'\r\n                                                                }}\r\n                                                            >\r\n                                                                {projectDetail.allocations.map(\r\n                                                                    allocation => {\r\n                                                                        const barStyle =\r\n                                                                            getBarStyles(\r\n                                                                                allocation.globalWeekNumber,\r\n                                                                                1, // Single week allocation\r\n                                                                                timelineData.startGlobalWeek,\r\n                                                                                timelineData\r\n                                                                                    .columns\r\n                                                                                    .length\r\n                                                                            );\r\n\r\n                                                                        if (\r\n                                                                            !barStyle\r\n                                                                        )\r\n                                                                            return null;\r\n\r\n                                                                        // Calculate total allocation once for persons\r\n                                                                        const totalAllocation = resource.type === AssignmentType.Person\r\n                                                                            ? calculatePersonAllocationFromResources(\r\n                                                                                  resource.id,\r\n                                                                                  allocation.globalWeekNumber,\r\n                                                                                  resources\r\n                                                                              )\r\n                                                                            : null;\r\n\r\n                                                                        return (\r\n                                                                            <div\r\n                                                                                key={\r\n                                                                                    allocation.id\r\n                                                                                }\r\n                                                                                style={{\r\n                                                                                    ...barStyle,\r\n                                                                                    background:\r\n                                                                                        allocation.phaseColor ||\r\n                                                                                        projectDetail.color,\r\n                                                                                    cursor: 'pointer'\r\n                                                                                }}\r\n                                                                                {...tooltipProps}\r\n                                                                                onMouseEnter={e => {\r\n                                                                                    const tooltipContent =\r\n                                                                                        (\r\n                                                                                            <AllocationTooltip\r\n                                                                                                allocation={{\r\n                                                                                                    id: allocation.id,\r\n                                                                                                    globalWeekNumber:\r\n                                                                                                        allocation.globalWeekNumber,\r\n                                                                                                    weekBeginningOn:\r\n                                                                                                        allocation.weekBeginningOn,\r\n                                                                                                    weekEndOn:\r\n                                                                                                        allocation.weekEndOn,\r\n                                                                                                    hoursBAU:\r\n                                                                                                        allocation.hoursBAU,\r\n                                                                                                    hoursNonBAU:\r\n                                                                                                        allocation.hoursNonBAU,\r\n                                                                                                    percentageBAU: 0, // Not used in this context\r\n                                                                                                    percentageNonBAU: 0, // Not used in this context\r\n                                                                                                    description:\r\n                                                                                                        allocation.description,\r\n                                                                                                    phaseName:\r\n                                                                                                        allocation.phaseName,\r\n                                                                                                    phaseColor:\r\n                                                                                                        allocation.phaseColor\r\n                                                                                                }}\r\n                                                                                                resourceName={\r\n                                                                                                    resource.name\r\n                                                                                                }\r\n                                                                                                projectType={\r\n                                                                                                    projectDetail\r\n                                                                                                        .project\r\n                                                                                                        .name\r\n                                                                                                }\r\n                                                                                                teamAllocations={\r\n                                                                                                    totalAllocation?.teamAllocations\r\n                                                                                                }\r\n                                                                                                totalWeeklyHours={\r\n                                                                                                    totalAllocation\r\n                                                                                                        ? totalAllocation.totalHoursBAU + totalAllocation.totalHoursNonBAU\r\n                                                                                                        : undefined\r\n                                                                                                }\r\n                                                                                                totalWeeklyPercentage={\r\n                                                                                                    totalAllocation\r\n                                                                                                        ? (totalAllocation.totalHoursBAU + totalAllocation.totalHoursNonBAU) / (totalAllocation.availableHours ?? 40)\r\n                                                                                                        : undefined\r\n                                                                                                }\r\n                                                                                            />\r\n                                                                                        );\r\n                                                                                    tooltipProps.onMouseEnter(\r\n                                                                                        e,\r\n                                                                                        tooltipContent\r\n                                                                                    );\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                {`${(allocation.hoursBAU + allocation.hoursNonBAU).toFixed(1)}h`}\r\n                                                                            </div>\r\n                                                                        );\r\n                                                                    }\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )\r\n                                        )\r\n                                    )}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResourcesView;\r\n","import React, {useState, useMemo} from 'react';\r\nimport {\r\n    format,\r\n    getQuarter,\r\n    getYear,\r\n    addDays,\r\n    startOfQuarter,\r\n    addQuarters\r\n} from 'date-fns';\r\nimport DashboardControls from './DashboardControls';\r\nimport ProjectsView from './ProjectsView';\r\nimport ResourcesView from './ResourcesView';\r\nimport {getMondayFromGlobalWeek, getWeekInfo} from '../../../lib/scheduling.ts';\r\n\r\n// Types\r\nexport interface TimelineConfigEntry {\r\n    units: number;\r\n    unitName: string;\r\n    addFn: (date: Date, amount: number) => Date;\r\n}\r\n\r\nexport interface AppTimelineConfig {\r\n    daily: TimelineConfigEntry;\r\n    weekly: TimelineConfigEntry;\r\n    monthly: TimelineConfigEntry;\r\n}\r\n\r\nexport interface TimelineNavOption {\r\n    label: string;\r\n    globalWeek: number;\r\n}\r\n\r\nexport interface TimelineColumn {\r\n    globalWeekNumber: number;\r\n    startDate: Date;\r\n    endDate: Date;\r\n    label: string;\r\n    month: string;\r\n    quarter: string;\r\n    year: string;\r\n    weekOfYear: number;\r\n}\r\n\r\nexport interface TimelineGroup {\r\n    label: string;\r\n    startIndex: number;\r\n    span: number;\r\n}\r\n\r\nexport interface TimelineData {\r\n    columns: TimelineColumn[];\r\n    monthGroups: TimelineGroup[];\r\n    quarterGroups: TimelineGroup[];\r\n    yearGroups: TimelineGroup[];\r\n    startGlobalWeek: number;\r\n    endGlobalWeek: number;\r\n}\r\n\r\nexport type DashboardViewType = 'projects' | 'resources';\r\n\r\nexport interface DashboardControlsProps {\r\n    viewType: DashboardViewType;\r\n    onViewTypeChange: (viewType: DashboardViewType) => void;\r\n    onNavigate: (direction: 'prev' | 'next' | 'today') => void;\r\n    onGoToWeek: (globalWeek: number) => void;\r\n    navOptions: TimelineNavOption[];\r\n}\r\n\r\nexport interface DashboardViewProps {\r\n    timelineData: TimelineData;\r\n}\r\n\r\n// Configuration\r\nconst WEEKS_TO_DISPLAY = 12;\r\n\r\nconst generateTimelineNavigationOptions = (\r\n    currentWeek: number\r\n): TimelineNavOption[] => {\r\n    const mondayOfCurrentWeek = getMondayFromGlobalWeek(currentWeek);\r\n    const currentQuarterStart = startOfQuarter(mondayOfCurrentWeek);\r\n    \r\n    const generateQuarterOption = (quartersToAdd: number): TimelineNavOption => {\r\n        const quarterDate = addQuarters(currentQuarterStart, quartersToAdd);\r\n        const quarter = getQuarter(quarterDate);\r\n        const year = getYear(quarterDate);\r\n        \r\n        return {\r\n            label: `Q${quarter} ${year}`,\r\n            globalWeek: getWeekInfo(quarterDate).globalWeekNumber\r\n        };\r\n    };\r\n    \r\n    return [\r\n        generateQuarterOption(0), // Current Quarter\r\n        generateQuarterOption(1), // Next Quarter\r\n        generateQuarterOption(2), // Next 2 Quarters\r\n        generateQuarterOption(4)  // Next 4 Quarters (1 year ahead)\r\n    ];\r\n};\r\n\r\nconst generateTimelineData = (\r\n    startGlobalWeek: number,\r\n    numberOfWeeks: number\r\n): TimelineData => {\r\n    const columns: TimelineColumn[] = [];\r\n\r\n    for (let i = 0; i < numberOfWeeks; i++) {\r\n        const currentGlobalWeek = startGlobalWeek + i;\r\n        const weekInfo = getWeekInfo(\r\n            getMondayFromGlobalWeek(currentGlobalWeek)\r\n        );\r\n\r\n        columns.push({\r\n            globalWeekNumber: weekInfo.globalWeekNumber,\r\n            startDate: weekInfo.mondayOfWeek,\r\n            endDate: addDays(weekInfo.mondayOfWeek, 6), // Monday to Sunday\r\n            label: `W${weekInfo.weekOfYear}`,\r\n            month: format(weekInfo.mondayOfWeek, 'MMM'),\r\n            quarter: `Q${getQuarter(weekInfo.mondayOfWeek)}`,\r\n            year: getYear(weekInfo.mondayOfWeek).toString(),\r\n            weekOfYear: weekInfo.weekOfYear\r\n        });\r\n    }\r\n\r\n    const monthGroups = columns.reduce<TimelineGroup[]>((acc, col, index) => {\r\n        const monthYear = `${col.month} ${col.year}`;\r\n        let group = acc.find(g => g.label === monthYear);\r\n        if (!group) {\r\n            group = {label: monthYear, startIndex: index, span: 0};\r\n            acc.push(group);\r\n        }\r\n        group.span++;\r\n        return acc;\r\n    }, []);\r\n\r\n    const quarterGroups = columns.reduce<TimelineGroup[]>((acc, col, index) => {\r\n        const quarterYear = `${col.quarter} ${col.year}`;\r\n        let group = acc.find(g => g.label === quarterYear);\r\n        if (!group) {\r\n            group = {label: quarterYear, startIndex: index, span: 0};\r\n            acc.push(group);\r\n        }\r\n        group.span++;\r\n        return acc;\r\n    }, []);\r\n\r\n    const yearGroups = columns.reduce<TimelineGroup[]>((acc, col, index) => {\r\n        const year = col.year;\r\n        let group = acc.find(g => g.label === year);\r\n        if (!group) {\r\n            group = {label: year, startIndex: index, span: 0};\r\n            acc.push(group);\r\n        }\r\n        group.span++;\r\n        return acc;\r\n    }, []);\r\n\r\n    return {\r\n        columns,\r\n        monthGroups,\r\n        quarterGroups,\r\n        yearGroups,\r\n        startGlobalWeek,\r\n        endGlobalWeek: startGlobalWeek + numberOfWeeks - 1\r\n    };\r\n};\r\n\r\nconst DashboardContainer: React.FC = () => {\r\n    const [viewType, setViewType] = useState<DashboardViewType>('projects');\r\n\r\n    // STATE CHANGE: We now track the starting global week for our view\r\n    const [startGlobalWeek, setStartGlobalWeek] = useState(\r\n        () => getWeekInfo(new Date()).globalWeekNumber - 4\r\n    ); // Default to show a bit of history\r\n\r\n    // Generate timeline data based on the current state\r\n    const timelineData = useMemo<TimelineData>(() => {\r\n        return generateTimelineData(startGlobalWeek, WEEKS_TO_DISPLAY);\r\n    }, [startGlobalWeek]);\r\n\r\n    // Generate navigation options dynamically\r\n    const navOptions = useMemo<TimelineNavOption[]>(() => {\r\n        const currentWeek = getWeekInfo(new Date()).globalWeekNumber;\r\n        return generateTimelineNavigationOptions(currentWeek);\r\n    }, []);\r\n\r\n    const navigateTimeline = (direction: 'prev' | 'next' | 'today') => {\r\n        if (direction === 'today') {\r\n            setStartGlobalWeek(getWeekInfo(new Date()).globalWeekNumber - 4);\r\n            return;\r\n        }\r\n\r\n        const increment = direction === 'prev' ? -1 : 1;\r\n        const step = Math.max(1, Math.floor(WEEKS_TO_DISPLAY / 2)); // Jump half the view\r\n        setStartGlobalWeek(prevWeek => prevWeek + increment * step);\r\n    };\r\n\r\n    const goToWeek = (globalWeek: number) => {\r\n        setStartGlobalWeek(globalWeek);\r\n    };\r\n\r\n    const controlsProps: DashboardControlsProps = {\r\n        viewType,\r\n        onViewTypeChange: setViewType,\r\n        onNavigate: navigateTimeline,\r\n        onGoToWeek: goToWeek,\r\n        navOptions\r\n    };\r\n\r\n    const viewProps: DashboardViewProps = {\r\n        timelineData\r\n    };\r\n\r\n    // We pass the new global week params to the hooks\r\n    const requestParams = {\r\n        startGlobalWeekNumber: startGlobalWeek,\r\n        numberOfWeeks: WEEKS_TO_DISPLAY\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"dashboard-container\"\r\n            style={{\r\n                fontFamily: 'system-ui, -apple-system, sans-serif',\r\n                padding: '20px'\r\n            }}\r\n        >\r\n            <DashboardControls {...controlsProps} />\r\n\r\n            {viewType === 'projects' ? (\r\n                <ProjectsView\r\n                    timelineData={timelineData}\r\n                    requestParams={requestParams}\r\n                />\r\n            ) : (\r\n                <ResourcesView {...viewProps} requestParams={requestParams} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DashboardContainer;\r\n","import React from 'react';\r\nimport DashboardContainer from './DashboardContainer';\r\n\r\nconst DashboardPage: React.FC = () => {\r\n    return <DashboardContainer />;\r\n};\r\n\r\nexport default DashboardPage;\r\n"],"names":["DashboardControls","viewType","onViewTypeChange","onNavigate","onGoToWeek","navOptions","jsx","jsxs","opt","useGetProjectsDashboardData","params","options","authenticatedFetch","useCreateAuthenticatedFetch","queryString","v","url","baseUrl","useQuery","response","handleResponse","useBulkUpdateDashboardAllocations","queryClient","useQueryClient","useMutation","command","TimelineHeader","timelineData","title","onToggleFilter","isFilterVisible","hasActiveFilters","group","idx","Filter","col","index","today","todayWeekInfo","getWeekInfo","isToday","dayPositionPercent","mondayOfThisWeek","dayOfWeek","format","COLORS","THRESHOLDS","getAllocationSeverity","percentage","type","getHeatmapColor","percentageBAU","percentageNonBAU","hasBAU","hasNonBAU","severities","highestPriority","s","selectedSeverity","getWarningColor","AllocationTooltip","allocation","resourceName","projectType","totalWeeklyHours","totalWeeklyPercentage","availableHours","baseHours","teamAllocations","weekStart","weekEnd","Calendar","Clock","Users","team","Fragment","useTooltip","tooltip","setTooltip","useState","timeoutRef","useRef","showTooltip","useCallback","event","content","hideTooltip","prev","updateTooltipPosition","useEffect","ProjectResourceAllocationCell","resource","project","globalWeekNumber","canEdit","onAllocationChange","getBarStyles","calculateTotalWeeklyAllocation","isEditing","setIsEditing","isHovered","setIsHovered","editedHours","setEditedHours","popoverRef","tooltipProps","TooltipPortal","handleClickOutside","handleCancel","handleSave","allocationId","hoursToSave","EngagementContext","weeklyTotals","backgroundColor","totalHoursInCell","hasAllocation","barStyle","tooltipContent","useMemo","bauOverAllocationWarning","isBAUProject","e","X","Save","Edit2","AddResourceAllocationCell","onResourceAndAllocationSelect","isModalOpen","setIsModalOpen","assignmentType","setAssignmentType","AssignmentType","selectedResource","setSelectedResource","page","setPage","perPage","setPerPage","searchText","setSearchText","pagedPeople","isLoadingPeople","useGetPagedPersons","pagedTeams","isLoadingTeams","useGetPagedTeams","handleCellClick","handleResourceSelect","resourceId","handleSearch","text","handleAssignmentTypeChange","isLoading","pagedData","Modal","ModalHeader","ModalBody","FormGroup","Label","Input","SearchComponent","_a","ListGroup","_b","person","ListGroupItem","User","_c","Pagination","ModalFooter","Button","EngagementContextIndicator","engagementContext","size","isBAU","baseStyle","bauStyle","nonBauStyle","calculatePersonAllocationFromResources","personId","allResources","personResource","r","personWeeklyAllocation","a","directHoursBAU","directHoursNonBAU","teamHoursBAU","teamHoursNonBAU","teamResource","teamWeeklyAllocation","teamBAU","teamNonBAU","totalHoursBAU","totalHoursNonBAU","calculatePersonAllocationFromProjects","allProjects","personTeams","existingTeamAllocation","ta","calculateClientSideAvailableHours","resourceType","workingHoursData","baseWorkingHours","companyNonWorkingDays","personalLeave","companyNonWorkingHours","calculateCompanyNonWorkingHoursForWeek","personalLeaveHours","calculatePersonalLeaveHoursForWeek","_globalWeekNumber","_companyNonWorkingDays","_baseHoursPerWeek","_personId","_personalLeave","getAvailableHoursForResourceWeek","existingAllocations","existingAllocation","alloc","ProjectsView","requestParams","dashboardData","error","refetch","bulkUpdate","isSaving","useGetBaseWorkingHours","useGetCompanyNonWorkingDays","expandedProjects","setExpandedProjects","saveError","setSaveError","selectedFilterTags","setSelectedFilterTags","setIsFilterVisible","editedAllocations","setEditedAllocations","allAvailableTags","tagMap","pt","tag","b","processedProjects","existingResourceIds","newResourceIds","edit","newResources","firstAllocation","_","tempId","filteredProjects","selectedTagIds","isPersonResource","projectTimeline","allocationResult","handleAllocationChange","projectId","newHours","handleSaveChanges","payload","id","handleDiscardChanges","handleResourceAndAllocationSelect","hours","tempAllocationId","itemStartGlobalWeek","itemDurationInWeeks","viewStartGlobalWeek","totalWeeksInView","itemEndGlobalWeek","viewEndGlobalWeek","startOffsetWeeks","widthPercent","React","p","toggleProject","newExpanded","getBarStylesForProject","visibleStartWeek","visibleEndWeek","visibleDurationWeeks","leftPercent","hasPendingChanges","ErrorDisplay","AlertTriangle","Tag","TagSelector","projectBarStyle","phase","DisplayTag","t","column","startWeek","duration","useGetResourcesDashboardData","ResourcesView","resources","expandedResources","setExpandedResources","projectDetail","filteredResources","toggleResource","newSet","findAllocationForWeek","displayHours","totalAllocation","color","totalPercentage","WEEKS_TO_DISPLAY","generateTimelineNavigationOptions","currentWeek","mondayOfCurrentWeek","getMondayFromGlobalWeek","currentQuarterStart","startOfQuarter","generateQuarterOption","quartersToAdd","quarterDate","addQuarters","quarter","getQuarter","year","getYear","generateTimelineData","startGlobalWeek","numberOfWeeks","columns","currentGlobalWeek","weekInfo","addDays","monthGroups","acc","monthYear","g","quarterGroups","quarterYear","yearGroups","DashboardContainer","setViewType","setStartGlobalWeek","controlsProps","direction","increment","step","prevWeek","globalWeek","viewProps","DashboardPage"],"mappings":"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"}