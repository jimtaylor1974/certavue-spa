{"version":3,"file":"AssistantTestPage-BxDWNuEZ.js","sources":["../../src/api/assistants/useGetThreads.ts","../../src/api/assistants/useDeleteThread.ts","../../src/api/assistants/useSetThreadName.ts","../../src/components/ai/ThreadList.tsx","../../src/components/sysadmin/ai/AssistantTestPage.tsx"],"sourcesContent":["import {useQuery} from '@tanstack/react-query';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch.ts';\r\nimport {handleResponse} from '../handleResponse.ts';\r\nimport baseUrl from '../baseUrl.ts';\r\nimport {PagedResult} from '../../types.ts';\r\nimport {AssistantThreadDto} from './types.ts';\r\n\r\ninterface UseGetThreadsOptions {\r\n    page?: number;\r\n    perPage?: number;\r\n    enabled?: boolean;\r\n}\r\n\r\nexport const useGetThreads = (\r\n    assistantKeyOrId: string,\r\n    options: UseGetThreadsOptions = {}\r\n) => {\r\n    const {page = 1, perPage = 20, enabled = true} = options;\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    return useQuery({\r\n        queryKey: ['assistants', assistantKeyOrId, 'threads', {page, perPage}],\r\n        queryFn: async () => {\r\n            const params = new URLSearchParams({\r\n                page: page.toString(),\r\n                perPage: perPage.toString()\r\n            });\r\n\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/assistants/${assistantKeyOrId}/threads?${params}`\r\n            );\r\n            return handleResponse<PagedResult<AssistantThreadDto>>(response);\r\n        },\r\n        enabled: enabled && !!assistantKeyOrId\r\n    });\r\n};\r\n","import { useMutation } from '@tanstack/react-query';\r\nimport { useCreateAuthenticatedFetch } from '../useCreateAuthenticatedFetch.ts';\r\nimport baseUrl from '../baseUrl.ts';\r\n\r\nexport const useDeleteThread = () => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    return useMutation({\r\n        mutationFn: async (threadId: string) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/threads/${threadId}`,\r\n                {\r\n                    method: 'DELETE'\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to delete thread');\r\n            }\r\n        }\r\n    });\r\n};","import { useMutation } from '@tanstack/react-query';\r\nimport { useCreateAuthenticatedFetch } from '../useCreateAuthenticatedFetch.ts';\r\nimport baseUrl from '../baseUrl.ts';\r\n\r\ninterface SetThreadNameRequest {\r\n    threadId: string;\r\n    name: string;\r\n}\r\n\r\nexport const useSetThreadName = () => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    return useMutation({\r\n        mutationFn: async ({ threadId, name }: SetThreadNameRequest) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/threads/${threadId}/name`,\r\n                {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({ name })\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to set thread name');\r\n            }\r\n        }\r\n    });\r\n};","import React, {useState} from 'react';\r\nimport {\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Button,\r\n    Spinner,\r\n    Pagination,\r\n    PaginationItem,\r\n    PaginationLink,\r\n    Dropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Input,\r\n    Form,\r\n    FormGroup,\r\n    Label\r\n} from 'reactstrap';\r\nimport {\r\n    Plus,\r\n    ChevronLeft,\r\n    ChevronRight,\r\n    MoreVertical,\r\n    Edit,\r\n    Trash2\r\n} from 'lucide-react';\r\nimport {useGetThreads} from '../../api/assistants/useGetThreads.ts';\r\nimport {useDeleteThread} from '../../api/assistants/useDeleteThread.ts';\r\nimport {useSetThreadName} from '../../api/assistants/useSetThreadName.ts';\r\nimport {AssistantThreadDto} from '../../api/assistants/types.ts';\r\n\r\ninterface ThreadListProps {\r\n    assistantKeyOrId: string;\r\n    selectedThreadId?: string;\r\n    onThreadSelect: (threadId: string) => void;\r\n    onNewThread: () => void;\r\n    onThreadsRefetch?: (refetchFn: () => void) => void;\r\n    className?: string;\r\n}\r\n\r\nconst ThreadList: React.FC<ThreadListProps> = ({\r\n    assistantKeyOrId,\r\n    selectedThreadId,\r\n    onThreadSelect,\r\n    onNewThread,\r\n    onThreadsRefetch,\r\n    className = ''\r\n}) => {\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [openDropdownId, setOpenDropdownId] = useState<string | null>(null);\r\n    const [renameModalOpen, setRenameModalOpen] = useState(false);\r\n    const [deleteModalOpen, setDeleteModalOpen] = useState(false);\r\n    const [selectedThread, setSelectedThread] =\r\n        useState<AssistantThreadDto | null>(null);\r\n    const [newThreadName, setNewThreadName] = useState('');\r\n    const perPage = 20;\r\n\r\n    const {\r\n        data: threadsData,\r\n        isLoading,\r\n        refetch\r\n    } = useGetThreads(assistantKeyOrId, {\r\n        page: currentPage,\r\n        perPage,\r\n        enabled: !!assistantKeyOrId\r\n    });\r\n\r\n    const deleteThreadMutation = useDeleteThread();\r\n    const setThreadNameMutation = useSetThreadName();\r\n\r\n    const threads = threadsData?.items || [];\r\n    const pagination = threadsData;\r\n\r\n    // Expose refetch to parent if callback provided\r\n    React.useEffect(() => {\r\n        if (onThreadsRefetch) {\r\n            onThreadsRefetch(refetch);\r\n        }\r\n    }, [refetch, onThreadsRefetch]);\r\n\r\n    const handlePageChange = (page: number) => {\r\n        setCurrentPage(page);\r\n    };\r\n\r\n    const handleDropdownToggle = (threadId: string) => {\r\n        setOpenDropdownId(openDropdownId === threadId ? null : threadId);\r\n    };\r\n\r\n    const handleRenameClick = (thread: AssistantThreadDto) => {\r\n        setSelectedThread(thread);\r\n        setNewThreadName(thread.name || 'New Conversation');\r\n        setRenameModalOpen(true);\r\n        setOpenDropdownId(null);\r\n    };\r\n\r\n    const handleDeleteClick = (thread: AssistantThreadDto) => {\r\n        setSelectedThread(thread);\r\n        setDeleteModalOpen(true);\r\n        setOpenDropdownId(null);\r\n    };\r\n\r\n    const handleRenameSubmit = async () => {\r\n        if (!selectedThread || !newThreadName.trim()) return;\r\n\r\n        try {\r\n            await setThreadNameMutation.mutateAsync({\r\n                threadId: selectedThread.id,\r\n                name: newThreadName.trim()\r\n            });\r\n            refetch();\r\n            setRenameModalOpen(false);\r\n            setSelectedThread(null);\r\n            setNewThreadName('');\r\n        } catch (error) {\r\n            console.error('Failed to rename thread:', error);\r\n        }\r\n    };\r\n\r\n    const handleDeleteConfirm = async () => {\r\n        if (!selectedThread) return;\r\n\r\n        try {\r\n            await deleteThreadMutation.mutateAsync(selectedThread.id);\r\n            refetch();\r\n            setDeleteModalOpen(false);\r\n            setSelectedThread(null);\r\n\r\n            // If the deleted thread was selected, clear selection\r\n            if (selectedThreadId === selectedThread.id) {\r\n                onThreadSelect('');\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to delete thread:', error);\r\n        }\r\n    };\r\n\r\n    const handleModalClose = () => {\r\n        setRenameModalOpen(false);\r\n        setDeleteModalOpen(false);\r\n        setSelectedThread(null);\r\n        setNewThreadName('');\r\n    };\r\n\r\n    const renderPaginationItems = () => {\r\n        if (!pagination || pagination.totalPages <= 1) return null;\r\n\r\n        const items = [];\r\n        const maxVisiblePages = 5;\r\n        const startPage = Math.max(\r\n            1,\r\n            currentPage - Math.floor(maxVisiblePages / 2)\r\n        );\r\n        const endPage = Math.min(\r\n            pagination.totalPages,\r\n            startPage + maxVisiblePages - 1\r\n        );\r\n\r\n        // Previous button\r\n        items.push(\r\n            <PaginationItem key=\"prev\" disabled={!pagination.hasPrevious}>\r\n                <PaginationLink\r\n                    onClick={() =>\r\n                        pagination.hasPrevious &&\r\n                        handlePageChange(currentPage - 1)\r\n                    }\r\n                    style={{\r\n                        cursor: pagination.hasPrevious ? 'pointer' : 'default'\r\n                    }}\r\n                >\r\n                    <ChevronLeft size={16} />\r\n                </PaginationLink>\r\n            </PaginationItem>\r\n        );\r\n\r\n        // Page numbers\r\n        for (let i = startPage; i <= endPage; i++) {\r\n            items.push(\r\n                <PaginationItem key={i} active={i === currentPage}>\r\n                    <PaginationLink\r\n                        onClick={() => handlePageChange(i)}\r\n                        style={{cursor: 'pointer'}}\r\n                    >\r\n                        {i}\r\n                    </PaginationLink>\r\n                </PaginationItem>\r\n            );\r\n        }\r\n\r\n        // Next button\r\n        items.push(\r\n            <PaginationItem key=\"next\" disabled={!pagination.hasNext}>\r\n                <PaginationLink\r\n                    onClick={() =>\r\n                        pagination.hasNext && handlePageChange(currentPage + 1)\r\n                    }\r\n                    style={{cursor: pagination.hasNext ? 'pointer' : 'default'}}\r\n                >\r\n                    <ChevronRight size={16} />\r\n                </PaginationLink>\r\n            </PaginationItem>\r\n        );\r\n\r\n        return items;\r\n    };\r\n\r\n    const formatDate = (dateString: string) => {\r\n        const date = new Date(dateString);\r\n        const now = new Date();\r\n        const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);\r\n\r\n        if (diffInHours < 24) {\r\n            return date.toLocaleTimeString([], {\r\n                hour: '2-digit',\r\n                minute: '2-digit'\r\n            });\r\n        } else if (diffInHours < 24 * 7) {\r\n            return date.toLocaleDateString([], {weekday: 'short'});\r\n        } else {\r\n            return date.toLocaleDateString([], {\r\n                month: 'short',\r\n                day: 'numeric'\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={className}>\r\n            <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                <h5 className=\"mb-0\">Conversations</h5>\r\n                <Button\r\n                    color=\"primary\"\r\n                    size=\"sm\"\r\n                    onClick={onNewThread}\r\n                    disabled={isLoading}\r\n                >\r\n                    <Plus size={16} className=\"me-1\" />\r\n                    New\r\n                </Button>\r\n            </div>\r\n\r\n            {isLoading ? (\r\n                <div className=\"d-flex justify-content-center py-4\">\r\n                    <Spinner color=\"primary\" />\r\n                </div>\r\n            ) : (\r\n                <>\r\n                    <ListGroup className=\"mb-3\">\r\n                        {threads.length === 0 ? (\r\n                            <div className=\"text-center text-muted py-4\">\r\n                                <p>No conversations yet</p>\r\n                                <Button\r\n                                    color=\"outline-primary\"\r\n                                    onClick={onNewThread}\r\n                                >\r\n                                    Start your first conversation\r\n                                </Button>\r\n                            </div>\r\n                        ) : (\r\n                            threads.map((thread: AssistantThreadDto) => (\r\n                                <ListGroupItem\r\n                                    key={thread.id}\r\n                                    active={selectedThreadId === thread.id}\r\n                                    className=\"d-flex justify-content-between align-items-start p-0\"\r\n                                >\r\n                                    <div\r\n                                        className=\"flex-grow-1 p-3\"\r\n                                        style={{cursor: 'pointer'}}\r\n                                        onClick={() =>\r\n                                            onThreadSelect(thread.id)\r\n                                        }\r\n                                    >\r\n                                        <div className=\"fw-medium\">\r\n                                            {thread.name || 'New Conversation'}\r\n                                        </div>\r\n                                        <small className=\"text-muted\">\r\n                                            {formatDate(thread.lastUpdatedAt)}\r\n                                        </small>\r\n                                    </div>\r\n                                    <div className=\"p-2\">\r\n                                        <Dropdown\r\n                                            isOpen={\r\n                                                openDropdownId === thread.id\r\n                                            }\r\n                                            toggle={() =>\r\n                                                handleDropdownToggle(thread.id)\r\n                                            }\r\n                                        >\r\n                                            <DropdownToggle\r\n                                                tag=\"button\"\r\n                                                className=\"btn btn-link p-1 border-0 bg-transparent\"\r\n                                                style={{cursor: 'pointer'}}\r\n                                                onClick={e =>\r\n                                                    e.stopPropagation()\r\n                                                }\r\n                                            >\r\n                                                <MoreVertical\r\n                                                    size={16}\r\n                                                    className=\"text-muted\"\r\n                                                />\r\n                                            </DropdownToggle>\r\n                                            <DropdownMenu end>\r\n                                                <DropdownItem\r\n                                                    onClick={() =>\r\n                                                        handleRenameClick(\r\n                                                            thread\r\n                                                        )\r\n                                                    }\r\n                                                >\r\n                                                    <Edit\r\n                                                        size={14}\r\n                                                        className=\"me-2\"\r\n                                                    />\r\n                                                    Rename\r\n                                                </DropdownItem>\r\n                                                <DropdownItem\r\n                                                    onClick={() =>\r\n                                                        handleDeleteClick(\r\n                                                            thread\r\n                                                        )\r\n                                                    }\r\n                                                    className=\"text-danger\"\r\n                                                >\r\n                                                    <Trash2\r\n                                                        size={14}\r\n                                                        className=\"me-2\"\r\n                                                    />\r\n                                                    Delete\r\n                                                </DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </Dropdown>\r\n                                    </div>\r\n                                </ListGroupItem>\r\n                            ))\r\n                        )}\r\n                    </ListGroup>\r\n\r\n                    {pagination && pagination.totalPages > 1 && (\r\n                        <div>\r\n                            <Pagination\r\n                                size=\"sm\"\r\n                                className=\"justify-content-center mb-0\"\r\n                            >\r\n                                {renderPaginationItems()}\r\n                            </Pagination>\r\n                            <div className=\"text-center mt-2\">\r\n                                <small className=\"text-muted\">\r\n                                    Page {pagination.page} of{' '}\r\n                                    {pagination.totalPages}({pagination.total}{' '}\r\n                                    total conversations)\r\n                                </small>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </>\r\n            )}\r\n\r\n            {/* Rename Modal */}\r\n            <Modal isOpen={renameModalOpen} toggle={handleModalClose}>\r\n                <ModalHeader toggle={handleModalClose}>\r\n                    Rename Conversation\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Label for=\"threadName\">Conversation Name</Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                id=\"threadName\"\r\n                                value={newThreadName}\r\n                                onChange={e => setNewThreadName(e.target.value)}\r\n                                placeholder=\"Enter conversation name\"\r\n                                maxLength={200}\r\n                                onKeyPress={e => {\r\n                                    if (e.key === 'Enter') {\r\n                                        e.preventDefault();\r\n                                        handleRenameSubmit();\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </FormGroup>\r\n                    </Form>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"secondary\" onClick={handleModalClose}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        onClick={handleRenameSubmit}\r\n                        disabled={\r\n                            !newThreadName.trim() ||\r\n                            setThreadNameMutation.isPending\r\n                        }\r\n                    >\r\n                        {setThreadNameMutation.isPending ? 'Saving...' : 'Save'}\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n\r\n            {/* Delete Confirmation Modal */}\r\n            <Modal isOpen={deleteModalOpen} toggle={handleModalClose}>\r\n                <ModalHeader toggle={handleModalClose}>\r\n                    Delete Conversation\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <p>Are you sure you want to delete this conversation?</p>\r\n                    <p className=\"text-muted\">\r\n                        <strong>\r\n                            {selectedThread?.name || 'New Conversation'}\r\n                        </strong>\r\n                    </p>\r\n                    <p className=\"text-danger small\">\r\n                        This action cannot be undone.\r\n                    </p>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"secondary\" onClick={handleModalClose}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        color=\"danger\"\r\n                        onClick={handleDeleteConfirm}\r\n                        disabled={deleteThreadMutation.isPending}\r\n                    >\r\n                        {deleteThreadMutation.isPending\r\n                            ? 'Deleting...'\r\n                            : 'Delete'}\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ThreadList;\r\n","import React, {useState} from 'react';\r\nimport {useParams, useNavigate} from 'react-router-dom';\r\nimport {Row, Col, Card, CardBody, Button, Alert} from 'reactstrap';\r\nimport {ArrowLeft} from 'lucide-react';\r\nimport ThreadList from '../../ai/ThreadList.tsx';\r\nimport AssistantComponent from '../../ai/AssistantComponent.tsx';\r\n\r\nconst AssistantTestPage: React.FC = () => {\r\n    const {keyOrId} = useParams<{keyOrId: string}>();\r\n    const navigate = useNavigate();\r\n\r\n    // State\r\n    const [selectedThreadId, setSelectedThreadId] = useState<\r\n        string | undefined\r\n    >();\r\n    const [refetchThreads, setRefetchThreads] = useState<\r\n        (() => void) | undefined\r\n    >();\r\n    const [assistantName, setAssistantName] = useState<string>('');\r\n    const [assistantDescription, setAssistantDescription] =\r\n        useState<string>('');\r\n\r\n    // Handlers\r\n    const handleThreadSelect = (threadId: string) => {\r\n        setSelectedThreadId(threadId);\r\n    };\r\n\r\n    const handleNewThread = () => {\r\n        setSelectedThreadId(undefined);\r\n    };\r\n\r\n    const handleThreadCreated = (newThreadId: string) => {\r\n        setSelectedThreadId(newThreadId);\r\n        refetchThreads?.();\r\n    };\r\n\r\n    const handleAssistantLoaded = (name: string, description: string) => {\r\n        setAssistantName(name);\r\n        setAssistantDescription(description);\r\n    };\r\n\r\n    const handleAssistantError = (error: any) => {\r\n        // Handle assistant loading errors - could show error state or redirect\r\n        console.error('Assistant loading error:', error);\r\n    };\r\n\r\n    if (!keyOrId) {\r\n        return (\r\n            <Alert color=\"warning\">\r\n                No assistant key or ID provided.{' '}\r\n                <Button\r\n                    color=\"link\"\r\n                    onClick={() => navigate('/sysadmin/ai/assistants')}\r\n                >\r\n                    Return to assistants\r\n                </Button>\r\n            </Alert>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container-fluid p-4 h-100\">\r\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                <div className=\"d-flex align-items-center\">\r\n                    <Button\r\n                        color=\"link\"\r\n                        className=\"p-0 me-3\"\r\n                        onClick={() => navigate('/sysadmin/ai/assistants')}\r\n                    >\r\n                        <ArrowLeft size={20} />\r\n                    </Button>\r\n                    <div>\r\n                        <h2 className=\"mb-0\">\r\n                            Test Assistant: {assistantName || 'Loading...'}\r\n                        </h2>\r\n                        <small className=\"text-muted\">\r\n                            {assistantDescription}\r\n                        </small>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <Row className=\"h-100\" style={{minHeight: 'calc(100vh - 200px)'}}>\r\n                {/* Thread List */}\r\n                <Col md={4} lg={3} className=\"h-100\">\r\n                    <Card className=\"h-100\">\r\n                        <CardBody className=\"p-3\">\r\n                            <ThreadList\r\n                                assistantKeyOrId={keyOrId}\r\n                                selectedThreadId={selectedThreadId}\r\n                                onThreadSelect={handleThreadSelect}\r\n                                onNewThread={handleNewThread}\r\n                                onThreadsRefetch={refetchFn =>\r\n                                    setRefetchThreads(() => refetchFn)\r\n                                }\r\n                            />\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n\r\n                {/* Assistant Chat Component */}\r\n                <Col md={8} lg={9} className=\"h-100\">\r\n                    <Card className=\"h-100\">\r\n                        <CardBody className=\"p-0 h-100\">\r\n                            <AssistantComponent\r\n                                assistantKeyOrId={keyOrId}\r\n                                selectedThreadId={selectedThreadId}\r\n                                onThreadCreated={handleThreadCreated}\r\n                                onAssistantLoaded={handleAssistantLoaded}\r\n                                onAssistantError={handleAssistantError}\r\n                                className=\"h-100\"\r\n                            />\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AssistantTestPage;\r\n"],"names":["useGetThreads","assistantKeyOrId","options","page","perPage","enabled","authenticatedFetch","useCreateAuthenticatedFetch","useQuery","params","response","baseUrl","handleResponse","useDeleteThread","useMutation","threadId","useSetThreadName","name","ThreadList","selectedThreadId","onThreadSelect","onNewThread","onThreadsRefetch","className","currentPage","setCurrentPage","useState","openDropdownId","setOpenDropdownId","renameModalOpen","setRenameModalOpen","deleteModalOpen","setDeleteModalOpen","selectedThread","setSelectedThread","newThreadName","setNewThreadName","threadsData","isLoading","refetch","deleteThreadMutation","setThreadNameMutation","threads","pagination","React","handlePageChange","handleDropdownToggle","handleRenameClick","thread","handleDeleteClick","handleRenameSubmit","error","handleDeleteConfirm","handleModalClose","renderPaginationItems","items","maxVisiblePages","startPage","endPage","jsx","PaginationItem","PaginationLink","ChevronLeft","i","ChevronRight","formatDate","dateString","date","diffInHours","jsxs","Button","Plus","Spinner","Fragment","ListGroup","ListGroupItem","Dropdown","DropdownToggle","e","MoreVertical","DropdownMenu","DropdownItem","Edit","Trash2","Pagination","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","ModalFooter","AssistantTestPage","keyOrId","useParams","navigate","useNavigate","setSelectedThreadId","refetchThreads","setRefetchThreads","assistantName","setAssistantName","assistantDescription","setAssistantDescription","handleThreadSelect","handleNewThread","handleThreadCreated","newThreadId","handleAssistantLoaded","description","handleAssistantError","ArrowLeft","Row","Col","Card","CardBody","refetchFn","AssistantComponent","Alert"],"mappings":"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"}