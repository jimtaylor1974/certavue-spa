{"version":3,"file":"useLocalStorage-B4N03PAZ.js","sources":["../../src/hooks/useLocalStorage.ts"],"sourcesContent":["import {useState, useEffect, useCallback} from 'react';\r\n\r\nfunction useLocalStorage<T>(\r\n    key: string,\r\n    initialValue: T\r\n): [T, (value: T | ((prevValue: T) => T)) => void] {\r\n    // Get from local storage then parse stored json or return initialValue\r\n    const readValue = useCallback((): T => {\r\n        // Prevent build error \"window is undefined\" but keep working\r\n        if (typeof window === 'undefined') {\r\n            return initialValue;\r\n        }\r\n\r\n        try {\r\n            const item = window.localStorage.getItem(key);\r\n            return item ? (JSON.parse(item) as T) : initialValue;\r\n        } catch (error) {\r\n            console.warn(`Error reading localStorage key \"${key}\":`, error);\r\n            return initialValue;\r\n        }\r\n        // NOTE: We've removed `initialValue` from the dependency array.\r\n        // This is because we only want to re-run this function when the `key` changes.\r\n        // The `initialValue` is only a fallback for the very first read.\r\n    }, [key]);\r\n\r\n    // State to store our value\r\n    // Pass initial state function to useState so logic is only executed once\r\n    const [storedValue, setStoredValue] = useState<T>(readValue);\r\n\r\n    // Return a wrapped version of useState's setter function that\r\n    // persists the new value to localStorage.\r\n    const setValue = useCallback(\r\n        (value: T | ((prevValue: T) => T)) => {\r\n            try {\r\n                // By using the functional update form of `setStoredValue`,\r\n                // we can get the previous value without needing it in the dependency array.\r\n                setStoredValue(prevStoredValue => {\r\n                    // Allow value to be a function so we have the same API as useState\r\n                    const newValue =\r\n                        value instanceof Function\r\n                            ? value(prevStoredValue)\r\n                            : value;\r\n\r\n                    // Save to local storage\r\n                    if (typeof window !== 'undefined') {\r\n                        window.localStorage.setItem(\r\n                            key,\r\n                            JSON.stringify(newValue)\r\n                        );\r\n                    }\r\n\r\n                    // Return the new value to update the state\r\n                    return newValue;\r\n                });\r\n            } catch (error) {\r\n                console.warn(`Error setting localStorage key \"${key}\":`, error);\r\n            }\r\n        },\r\n        [key] // Now `setValue` is stable and only changes if `key` changes.\r\n    );\r\n\r\n    // This effect now correctly runs only when the `key` changes,\r\n    // preventing the infinite loop.\r\n    useEffect(() => {\r\n        setStoredValue(readValue());\r\n    }, [readValue]);\r\n\r\n    // Subscribe to changes in other tabs/windows\r\n    useEffect(() => {\r\n        const handleStorageChange = (event: StorageEvent) => {\r\n            if (event.key === key && event.newValue) {\r\n                try {\r\n                    setStoredValue(JSON.parse(event.newValue));\r\n                } catch (error) {\r\n                    console.warn(\r\n                        `Error parsing localStorage value for key \"${key}\":`,\r\n                        error\r\n                    );\r\n                }\r\n            }\r\n        };\r\n\r\n        if (typeof window !== 'undefined') {\r\n            window.addEventListener('storage', handleStorageChange);\r\n            return () => {\r\n                window.removeEventListener('storage', handleStorageChange);\r\n            };\r\n        }\r\n    }, [key]);\r\n\r\n    return [storedValue, setValue];\r\n}\r\n\r\nexport default useLocalStorage;\r\n"],"names":["useLocalStorage","key","initialValue","readValue","useCallback","item","error","storedValue","setStoredValue","useState","setValue","value","prevStoredValue","newValue","useEffect","handleStorageChange","event"],"mappings":"wCAEA,SAASA,EACLC,EACAC,EAC+C,CAEzC,MAAAC,EAAYC,EAAAA,YAAY,IAAS,CAE/B,GAAA,OAAO,OAAW,IACX,OAAAF,EAGP,GAAA,CACA,MAAMG,EAAO,OAAO,aAAa,QAAQJ,CAAG,EAC5C,OAAOI,EAAQ,KAAK,MAAMA,CAAI,EAAUH,QACnCI,EAAO,CACZ,eAAQ,KAAK,mCAAmCL,CAAG,KAAMK,CAAK,EACvDJ,CAAA,CACX,EAID,CAACD,CAAG,CAAC,EAIF,CAACM,EAAaC,CAAc,EAAIC,EAAAA,SAAYN,CAAS,EAIrDO,EAAWN,EAAA,YACZO,GAAqC,CAC9B,GAAA,CAGAH,EAAkCI,GAAA,CAE9B,MAAMC,EACFF,aAAiB,SACXA,EAAMC,CAAe,EACrBD,EAGN,OAAA,OAAO,OAAW,KAClB,OAAO,aAAa,QAChBV,EACA,KAAK,UAAUY,CAAQ,CAC3B,EAIGA,CAAA,CACV,QACIP,EAAO,CACZ,QAAQ,KAAK,mCAAmCL,CAAG,KAAMK,CAAK,CAAA,CAEtE,EACA,CAACL,CAAG,CACR,EAIAa,OAAAA,EAAAA,UAAU,IAAM,CACZN,EAAeL,GAAW,CAAA,EAC3B,CAACA,CAAS,CAAC,EAGdW,EAAAA,UAAU,IAAM,CACN,MAAAC,EAAuBC,GAAwB,CACjD,GAAIA,EAAM,MAAQf,GAAOe,EAAM,SACvB,GAAA,CACAR,EAAe,KAAK,MAAMQ,EAAM,QAAQ,CAAC,QACpCV,EAAO,CACJ,QAAA,KACJ,6CAA6CL,CAAG,KAChDK,CACJ,CAAA,CAGZ,EAEI,GAAA,OAAO,OAAW,IACX,cAAA,iBAAiB,UAAWS,CAAmB,EAC/C,IAAM,CACF,OAAA,oBAAoB,UAAWA,CAAmB,CAC7D,CACJ,EACD,CAACd,CAAG,CAAC,EAED,CAACM,EAAaG,CAAQ,CACjC"}