{"version":3,"file":"UserRegistrationPage--jIQYCM3.js","sources":["../../src/api/auth/useUserRegistrationEmailLogin.ts","../../src/components/accounts/UserRegistrationPage.tsx"],"sourcesContent":["import {\r\n    useMutation,\r\n    UseMutationOptions,\r\n    UseMutationResult\r\n} from '@tanstack/react-query';\r\nimport {UserRegistrationEmailLoginCommand, EmptyResult} from '../../types';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport baseUrl from '../baseUrl';\r\nimport {handleResponse} from '../handleResponse';\r\n\r\nconst useUserRegistrationEmailLogin = (\r\n    options?: UseMutationOptions<\r\n        EmptyResult,\r\n        Error,\r\n        UserRegistrationEmailLoginCommand\r\n    >\r\n): UseMutationResult<EmptyResult, Error, UserRegistrationEmailLoginCommand> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    return useMutation({\r\n        mutationFn: async (command: UserRegistrationEmailLoginCommand) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/auth/user-registration-email-login`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify(command)\r\n                }\r\n            );\r\n            return handleResponse(response);\r\n        },\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useUserRegistrationEmailLogin;\r\n","import React, {useState, useEffect} from 'react';\r\nimport {useForm, Controller} from 'react-hook-form';\r\nimport {\r\n    Button,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Alert,\r\n    Input,\r\n    FormText,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    CardBody\r\n} from 'reactstrap';\r\nimport {toast} from 'react-toastify';\r\nimport {Link, useNavigate} from 'react-router-dom';\r\nimport {\r\n    UserRegistrationEmailLoginCommand,\r\n    UserRegistrationBuiltInCommand\r\n} from '../../types';\r\nimport useUserRegistrationEmailLogin from '../../api/auth/useUserRegistrationEmailLogin';\r\nimport useUserRegistrationBuiltIn from '../../api/auth/useUserRegistrationBuiltIn';\r\nimport unknownErrorToString from '../../lib/unknownErrorToString';\r\nimport DisplayFormError from '../utility/DisplayFormError';\r\nimport TermsAndConditions from '../pages/TermsAndConditions';\r\nimport isNullOrWhiteSpace from '../../lib/isNullOrWhiteSpace';\r\nimport useAppSettings from '../../hooks/useAppSettings';\r\nimport SocialLogins from '../social_logins/SocialLogins';\r\nimport CheckFromEmailSpamJunkWarning from '../utility/CheckFromEmailSpamJunkWarning';\r\nimport Certavue from '../utility/Certavue';\r\nimport {useAuthStateManager} from '../../hooks/useAuthStateManager';\r\n\r\nconst UserRegistrationPage: React.FC = () => {\r\n    const {getSignInRedirect, removeSignInRedirect} = useAuthStateManager();\r\n    const {auth} = useAppSettings();\r\n    const navigate = useNavigate();\r\n\r\n    const hasSocialLogins = auth.microsoft.enabled || auth.google.enabled;\r\n\r\n    const browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n\r\n    const {\r\n        control,\r\n        handleSubmit,\r\n        formState: {errors},\r\n        clearErrors,\r\n        watch\r\n    } = useForm<UserRegistrationEmailLoginCommand & {password: string}>({\r\n        defaultValues: {\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            password: '',\r\n            timeZone: browserTimeZone,\r\n            redir: getSignInRedirect()\r\n        },\r\n        mode: 'onChange'\r\n    });\r\n\r\n    const [acceptTerms, setAcceptTerms] = useState(false);\r\n    const [backendError, setBackendError] = useState<string | null>(null);\r\n\r\n    const watchedFields = watch();\r\n\r\n    const [formIsComplete, setFormIsComplete] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const {firstName, lastName, email} = watchedFields;\r\n        setFormIsComplete(\r\n            !isNullOrWhiteSpace(firstName) &&\r\n                !isNullOrWhiteSpace(lastName) &&\r\n                !isNullOrWhiteSpace(email)\r\n        );\r\n    }, [watchedFields]);\r\n\r\n    const emailOnlyMutation = useUserRegistrationEmailLogin({\r\n        onSuccess: () => {\r\n            toast.success(\r\n                'Registration successful! Please check your email for further instructions.'\r\n            );\r\n            navigate('/login');\r\n        },\r\n        onError: (error: unknown) => {\r\n            setBackendError(unknownErrorToString(error));\r\n        }\r\n    });\r\n\r\n    const passwordMutation = useUserRegistrationBuiltIn({\r\n        onSuccess: () => {\r\n            toast.success(\r\n                'Registration successful! Please check your email and follow the instructions to verify your account.'\r\n            );\r\n            navigate('/login');\r\n        },\r\n        onError: (error: unknown) => {\r\n            setBackendError(unknownErrorToString(error));\r\n        }\r\n    });\r\n\r\n    const onSubmit = (\r\n        data: UserRegistrationEmailLoginCommand & {password: string}\r\n    ) => {\r\n        removeSignInRedirect();\r\n        setBackendError(null);\r\n        clearErrors();\r\n        if (data.password) {\r\n            const passwordData: UserRegistrationBuiltInCommand = {\r\n                firstName: data.firstName,\r\n                lastName: data.lastName,\r\n                email: data.email,\r\n                password: data.password,\r\n                timeZone: data.timeZone,\r\n                redir: data.redir\r\n            };\r\n            passwordMutation.mutate(passwordData);\r\n        } else {\r\n            emailOnlyMutation.mutate(data);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"mt-5\">\r\n                <Row className=\"justify-content-center\">\r\n                    <Col xs={12} md={8} lg={6}>\r\n                        <div className=\"text-center mb-4\">\r\n                            <Certavue />\r\n                            <h2 className=\"mt-2\">Sign up</h2>\r\n                            <p className=\"text-muted\">Create a user login</p>\r\n                        </div>\r\n                        {hasSocialLogins && (\r\n                            <>\r\n                                <p className=\"text-center small\">\r\n                                    Register using a social login …\r\n                                </p>\r\n                                <div className=\"my-3\">\r\n                                    <SocialLogins registration={true} />\r\n                                </div>\r\n                                <p className=\"text-center small\">\r\n                                    … or create an account with email …\r\n                                </p>\r\n                            </>\r\n                        )}\r\n                        <Card>\r\n                            <CardBody>\r\n                                <Form onSubmit={handleSubmit(onSubmit)}>\r\n                                    <FormGroup>\r\n                                        <Label for=\"email\">Email</Label>\r\n                                        <Controller\r\n                                            name=\"email\"\r\n                                            control={control}\r\n                                            rules={{\r\n                                                required: 'Email is required',\r\n                                                pattern: {\r\n                                                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                                                    message:\r\n                                                        'Invalid email address'\r\n                                                }\r\n                                            }}\r\n                                            render={({field}) => (\r\n                                                <Input\r\n                                                    {...field}\r\n                                                    type=\"email\"\r\n                                                    id=\"email\"\r\n                                                    maxLength={2048}\r\n                                                    invalid={!!errors.email}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                        <DisplayFormError\r\n                                            error={errors.email}\r\n                                            fieldDisplayName=\"Email\"\r\n                                        />\r\n                                    </FormGroup>\r\n                                    <CheckFromEmailSpamJunkWarning text=\"Please check your email and follow the instructions to verify your account.\" />\r\n                                    <FormGroup>\r\n                                        <Label for=\"firstName\">\r\n                                            First Name\r\n                                        </Label>\r\n                                        <Controller\r\n                                            name=\"firstName\"\r\n                                            control={control}\r\n                                            rules={{\r\n                                                required:\r\n                                                    'First Name is required'\r\n                                            }}\r\n                                            render={({field}) => (\r\n                                                <Input\r\n                                                    {...field}\r\n                                                    type=\"text\"\r\n                                                    id=\"firstName\"\r\n                                                    maxLength={512}\r\n                                                    invalid={!!errors.firstName}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                        <DisplayFormError\r\n                                            error={errors.firstName}\r\n                                            fieldDisplayName=\"First Name\"\r\n                                        />\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label for=\"lastName\">Last Name</Label>\r\n                                        <Controller\r\n                                            name=\"lastName\"\r\n                                            control={control}\r\n                                            rules={{\r\n                                                required:\r\n                                                    'Last Name is required'\r\n                                            }}\r\n                                            render={({field}) => (\r\n                                                <Input\r\n                                                    {...field}\r\n                                                    type=\"text\"\r\n                                                    id=\"lastName\"\r\n                                                    maxLength={512}\r\n                                                    invalid={!!errors.lastName}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                        <DisplayFormError\r\n                                            error={errors.lastName}\r\n                                            fieldDisplayName=\"Last Name\"\r\n                                        />\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label for=\"password\">\r\n                                            Password (Optional)\r\n                                        </Label>\r\n                                        <Controller\r\n                                            name=\"password\"\r\n                                            control={control}\r\n                                            render={({field}) => (\r\n                                                <Input\r\n                                                    {...field}\r\n                                                    type=\"password\"\r\n                                                    id=\"password\"\r\n                                                    invalid={!!errors.password}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                        <FormText className=\"text-muted small\">\r\n                                            Leave blank to sign up with email\r\n                                            only. You'll receive a login link\r\n                                            via email.\r\n                                        </FormText>\r\n                                        <DisplayFormError\r\n                                            error={errors.password}\r\n                                            fieldDisplayName=\"Password\"\r\n                                        />\r\n                                    </FormGroup>\r\n                                    <FormGroup check className=\"my-3\">\r\n                                        <Input\r\n                                            type=\"checkbox\"\r\n                                            required\r\n                                            id=\"acceptTerms\"\r\n                                            checked={acceptTerms}\r\n                                            onChange={event =>\r\n                                                setAcceptTerms(\r\n                                                    event.target.checked\r\n                                                )\r\n                                            }\r\n                                        />\r\n                                        <Label for=\"acceptTerms\" check>\r\n                                            I have read and accept the Terms and\r\n                                            Conditions\r\n                                        </Label>\r\n                                    </FormGroup>\r\n                                    <div className=\"d-flex justify-content-end mt-3\">\r\n                                        <Button\r\n                                            type=\"submit\"\r\n                                            color=\"primary\"\r\n                                            disabled={\r\n                                                !acceptTerms ||\r\n                                                !formIsComplete ||\r\n                                                emailOnlyMutation.isPending ||\r\n                                                passwordMutation.isPending\r\n                                            }\r\n                                        >\r\n                                            Submit\r\n                                        </Button>\r\n                                    </div>\r\n                                    {formIsComplete && !acceptTerms && (\r\n                                        <div className=\"d-flex justify-content-end mt-3\">\r\n                                            <FormText\r\n                                                color=\"danger\"\r\n                                                className=\"small\"\r\n                                            >\r\n                                                Please read and accept the Terms\r\n                                                and Conditions\r\n                                            </FormText>\r\n                                        </div>\r\n                                    )}\r\n                                    {backendError && (\r\n                                        <Alert color=\"danger\" className=\"mt-3\">\r\n                                            {backendError}\r\n                                        </Alert>\r\n                                    )}\r\n                                </Form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col xs={12} md={8} lg={6}>\r\n                        <h3 className=\"text-lavender mb-3\">\r\n                            Need something else?\r\n                        </h3>\r\n\r\n                        <div className=\"mb-4\">\r\n                            <h4 className=\"text-mulled-wine\">\r\n                                Already have an account?\r\n                            </h4>\r\n                            <p>\r\n                                If you've previously signed up,{' '}\r\n                                <Link to=\"/login\">Log in</Link> here to access\r\n                                your company's projects.\r\n                            </p>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <h4 className=\"text-mulled-wine\">\r\n                                Want to bring certavue to your company?\r\n                            </h4>\r\n                            <p>\r\n                                Easily{' '}\r\n                                <Link\r\n                                    to=\"/register-company\"\r\n                                    className=\"text-primary font-weight-bold\"\r\n                                >\r\n                                    Register your Company\r\n                                </Link>{' '}\r\n                                and simplify how your organization manages\r\n                                transformation.\r\n                            </p>\r\n                        </div>\r\n                        <div\r\n                            style={{\r\n                                maxHeight: '200px',\r\n                                overflow: 'auto',\r\n                                border: '1px solid #ced4da',\r\n                                borderRadius: '.25rem',\r\n                                padding: '10px'\r\n                            }}\r\n                        >\r\n                            <TermsAndConditions />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UserRegistrationPage;\r\n"],"names":["useUserRegistrationEmailLogin","options","authenticatedFetch","useCreateAuthenticatedFetch","useMutation","command","response","baseUrl","handleResponse","UserRegistrationPage","getSignInRedirect","removeSignInRedirect","useAuthStateManager","auth","useAppSettings","navigate","useNavigate","hasSocialLogins","browserTimeZone","control","handleSubmit","errors","clearErrors","watch","useForm","acceptTerms","setAcceptTerms","useState","backendError","setBackendError","watchedFields","formIsComplete","setFormIsComplete","useEffect","firstName","lastName","email","isNullOrWhiteSpace","emailOnlyMutation","toast","error","unknownErrorToString","passwordMutation","useUserRegistrationBuiltIn","onSubmit","data","passwordData","jsx","Fragment","Container","jsxs","Row","Col","Certavue","SocialLogins","Card","CardBody","Form","FormGroup","Label","Controller","field","Input","DisplayFormError","CheckFromEmailSpamJunkWarning","FormText","event","Button","Alert","Link","TermsAndConditions"],"mappings":"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"}