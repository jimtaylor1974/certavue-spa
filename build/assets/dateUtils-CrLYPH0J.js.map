{"version":3,"file":"dateUtils-CrLYPH0J.js","sources":["../../src/lib/emptyGuid.ts","../../src/api/projects/useGetProjectById.ts","../../src/lib/dateUtils.ts"],"sourcesContent":["export default '00000000-0000-0000-0000-000000000000';\r\n","import {useQuery, UseQueryResult} from '@tanstack/react-query';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport baseUrl from '../baseUrl';\r\nimport {handleResponse} from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\nimport emptyGuid from '../../lib/emptyGuid';\r\nimport {ProjectModel} from '../../types.ts';\r\n\r\nexport const useGetProjectById = (\r\n    projectId: string | null,\r\n    options?: string | null\r\n): UseQueryResult<ProjectModel, Error | ProblemDetailsError> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    return useQuery({\r\n        queryKey: ['projects', projectId],\r\n        queryFn: async () => {\r\n            if (!projectId) {\r\n                throw new Error('Project ID is required');\r\n            }\r\n\r\n            const query = options\r\n                ? `?options=${encodeURIComponent(options)}`\r\n                : '';\r\n\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/projects/${projectId}${query}`\r\n            );\r\n\r\n            return handleResponse<ProjectModel>(response);\r\n        },\r\n        enabled: !!projectId && projectId != emptyGuid\r\n    });\r\n};\r\n","/**\r\n * Formats a date string or Date object according to the user's locale\r\n * \r\n * @param date - The date to format (string, Date, undefined, or null)\r\n * @returns A formatted date string or empty string if input is invalid\r\n */\r\nexport const formatDate = (date: string | Date | undefined | null): string => {\r\n    if (!date) {\r\n        return '';\r\n    }\r\n    \r\n    try {\r\n        return new Date(date).toLocaleDateString(\r\n            navigator.language,\r\n            {\r\n                day: '2-digit',\r\n                month: '2-digit',\r\n                year: 'numeric'\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.error('Error formatting date:', error);\r\n        return '';\r\n    }\r\n};\r\n\r\n/**\r\n * Returns the appropriate date format string for date pickers based on locale\r\n * \r\n * @returns A date format string (MM/dd/yyyy for US, dd/MM/yyyy for others)\r\n */\r\nexport const getDatePickerFormat = (): string => {\r\n    return navigator.language.startsWith('en-US') ? 'MM/dd/yyyy' : 'dd/MM/yyyy';\r\n};"],"names":["emptyGuid","useGetProjectById","projectId","options","authenticatedFetch","useCreateAuthenticatedFetch","useQuery","query","response","baseUrl","handleResponse","formatDate","date","error"],"mappings":"6DAAA,MAAAA,EAAe,uCCQFC,EAAoB,CAC7BC,EACAC,IAC4D,CAC5D,MAAMC,EAAqBC,EAA4B,EAEvD,OAAOC,EAAS,CACZ,SAAU,CAAC,WAAYJ,CAAS,EAChC,QAAS,SAAY,CACjB,GAAI,CAACA,EACK,MAAA,IAAI,MAAM,wBAAwB,EAG5C,MAAMK,EAAQJ,EACR,YAAY,mBAAmBA,CAAO,CAAC,GACvC,GAEAK,EAAW,MAAMJ,EACnB,GAAGK,CAAO,iBAAiBP,CAAS,GAAGK,CAAK,EAChD,EAEA,OAAOG,EAA6BF,CAAQ,CAChD,EACA,QAAS,CAAC,CAACN,GAAaA,GAAaF,CAAA,CACxC,CACL,EC3BaW,EAAcC,GAAmD,CAC1E,GAAI,CAACA,EACM,MAAA,GAGP,GAAA,CACO,OAAA,IAAI,KAAKA,CAAI,EAAE,mBAClB,UAAU,SACV,CACI,IAAK,UACL,MAAO,UACP,KAAM,SAAA,CAEd,QACKC,EAAO,CACJ,eAAA,MAAM,yBAA0BA,CAAK,EACtC,EAAA,CAEf"}