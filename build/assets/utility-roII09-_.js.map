{"version":3,"file":"utility-roII09-_.js","sources":["../../src/api/contents/useListContentFiles.ts","../../src/components/sysadmin/contents/formatters.ts","../../src/api/contents/utility.ts"],"sourcesContent":["import {UseQueryOptions, UseQueryResult, useQuery} from '@tanstack/react-query';\r\nimport baseUrl from '../baseUrl';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport {handleResponse} from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\nimport {ContentItem} from '../../types';\r\n\r\ntype ContentListQueryOptions = Omit<\r\n    UseQueryOptions<\r\n        ContentItem[],\r\n        Error | ProblemDetailsError,\r\n        ContentItem[],\r\n        readonly unknown[]\r\n    >,\r\n    'queryKey' | 'queryFn'\r\n>;\r\n\r\nconst useListContentFiles = (\r\n    prefix?: string,\r\n    options?: ContentListQueryOptions\r\n): UseQueryResult<ContentItem[], Error | ProblemDetailsError> => {\r\n    const url = `${baseUrl}/api/sys/contents${prefix ? `?prefix=${encodeURIComponent(prefix)}` : ''}`;\r\n    const queryKey = ['contents', prefix || 'root'];\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    const queryFn = async (): Promise<ContentItem[]> => {\r\n        const response = await authenticatedFetch(url);\r\n        return handleResponse(response);\r\n    };\r\n\r\n    return useQuery({\r\n        queryKey,\r\n        queryFn,\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useListContentFiles;\r\n","export const formatBytes = (bytes: number): string => {\r\n    if (bytes === 0) return '0 Bytes';\r\n\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n};\r\n\r\nexport const formatDate = (date: Date): string => {\r\n    return new Intl.DateTimeFormat('en-US', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n    }).format(date);\r\n};\r\n","import baseUrl from '../baseUrl';\r\n\r\nexport const getContentFileUrl = (path: string): string => {\r\n    return `${baseUrl}/api/contents/files/${path}`;\r\n};\r\n\r\nexport const getContentDownloadUrl = (path: string): string => {\r\n    return `${baseUrl}/api/contents/download/${path}`;\r\n};\r\n"],"names":["useListContentFiles","prefix","options","url","baseUrl","queryKey","authenticatedFetch","useCreateAuthenticatedFetch","useQuery","response","handleResponse","formatBytes","bytes","k","sizes","i","formatDate","date","getContentFileUrl","path","getContentDownloadUrl"],"mappings":"6DAiBM,MAAAA,EAAsB,CACxBC,EACAC,IAC6D,CACvD,MAAAC,EAAM,GAAGC,CAAO,oBAAoBH,EAAS,WAAW,mBAAmBA,CAAM,CAAC,GAAK,EAAE,GACzFI,EAAW,CAAC,WAAYJ,GAAU,MAAM,EACxCK,EAAqBC,EAA4B,EAOvD,OAAOC,EAAS,CACZ,SAAAH,EACA,QAPY,SAAoC,CAC1C,MAAAI,EAAW,MAAMH,EAAmBH,CAAG,EAC7C,OAAOO,EAAeD,CAAQ,CAClC,EAKI,GAAGP,CAAA,CACN,CACL,ECnCaS,EAAeC,GAA0B,CAC9C,GAAAA,IAAU,EAAU,MAAA,UAExB,MAAMC,EAAI,KACJC,EAAQ,CAAC,QAAS,KAAM,KAAM,KAAM,IAAI,EACxCC,EAAI,KAAK,MAAM,KAAK,IAAIH,CAAK,EAAI,KAAK,IAAIC,CAAC,CAAC,EAElD,OAAO,YAAYD,EAAQ,KAAK,IAAIC,EAAGE,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAI,IAAMD,EAAMC,CAAC,CAC1E,EAEaC,EAAcC,GAChB,IAAI,KAAK,eAAe,QAAS,CACpC,KAAM,UACN,MAAO,QACP,IAAK,UACL,KAAM,UACN,OAAQ,SAAA,CACX,EAAE,OAAOA,CAAI,ECfLC,EAAqBC,GACvB,GAAGf,CAAO,uBAAuBe,CAAI,GAGnCC,EAAyBD,GAC3B,GAAGf,CAAO,0BAA0Be,CAAI"}