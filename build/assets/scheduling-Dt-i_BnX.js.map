{"version":3,"file":"scheduling-Dt-i_BnX.js","sources":["../../src/lib/scheduling.ts"],"sourcesContent":["import {\r\n    startOfWeek,\r\n    differenceInDays,\r\n    getYear,\r\n    getISOWeek,\r\n    parseISO,\r\n    addDays,\r\n    isValid,\r\n    getISOWeekYear\r\n} from 'date-fns';\r\n\r\n/**\r\n * Represents the calculated information for a single global week.\r\n * @param globalWeekNumber A continuously incrementing week number since the system epoch.\r\n * @param mondayOfWeek The Date object for the Monday of this week.\r\n * @param year The calendar year this week falls into.\r\n * @param weekOfYear The ISO 8601 week number within the calendar year.\r\n */\r\nexport type WeekInfo = {\r\n    globalWeekNumber: number;\r\n    mondayOfWeek: Date;\r\n    year: number;\r\n    weekOfYear: number;\r\n};\r\n\r\n// System \"epoch\" - the Monday of the very first week we count.\r\n// Note: JavaScript months are 0-indexed (0 = January).\r\n// This is Mon, Dec 30, 2024, which is the start of ISO week 1 for the year 2025.\r\nconst EPOCH_MONDAY = new Date(2024, 11, 30);\r\n\r\n/**\r\n * Parses a date input (string or Date) and returns a valid Date object.\r\n * Throws an error if the input is invalid.\r\n * @param date - The date string (ISO 8601 format) or Date object.\r\n * @returns A valid Date object.\r\n */\r\nfunction parseDate(date: string | Date): Date {\r\n    const dateObj = typeof date === 'string' ? parseISO(date) : date;\r\n    if (!isValid(dateObj)) {\r\n        throw new Error(`Invalid date provided: ${date}`);\r\n    }\r\n    return dateObj;\r\n}\r\n\r\n/**\r\n * Gets the Monday of the week for a given date.\r\n * Uses ISO 8601 standard where the week starts on Monday.\r\n * @param date - The date to find the week for (ISO string or Date object).\r\n * @returns The Date object for the Monday of that week (at midnight).\r\n */\r\nexport function getMondayOfWeek(date: string | Date): Date {\r\n    const dateToProcess = parseDate(date);\r\n    // { weekStartsOn: 1 } specifies that Monday is the first day of the week.\r\n    return startOfWeek(dateToProcess, {weekStartsOn: 1});\r\n}\r\n\r\n/**\r\n * Retrieves a WeekInfo object containing global week number and Monday's date\r\n * for any given date.\r\n * @param forDate - The date to get week information for (ISO string or Date object).\r\n * @returns A WeekInfo object.\r\n */\r\nexport function getWeekInfo(forDate: string | Date): WeekInfo {\r\n    const monday = getMondayOfWeek(forDate);\r\n\r\n    if (monday < EPOCH_MONDAY) {\r\n        throw new Error(\r\n            `Date cannot be before the system epoch of ${EPOCH_MONDAY.toISOString()}`\r\n        );\r\n    }\r\n\r\n    // Calculate the global week number\r\n    const daysSinceEpoch = differenceInDays(monday, EPOCH_MONDAY);\r\n    const globalWeekNumber = Math.floor(daysSinceEpoch / 7) + 1;\r\n\r\n    // Get standard calendar week info for display purposes\r\n    const year = getYear(monday);\r\n    // getISOWeek is the date-fns equivalent for the ISO 8601 week number\r\n    const weekOfYear = getISOWeek(monday);\r\n\r\n    return {\r\n        globalWeekNumber,\r\n        mondayOfWeek: monday,\r\n        year,\r\n        weekOfYear\r\n    };\r\n}\r\n\r\n/**\r\n * Gets the Monday date from a global week number.\r\n * @param globalWeekNumber - The global week number.\r\n * @returns The Date object for the Monday of that global week.\r\n */\r\nexport function getMondayFromGlobalWeek(globalWeekNumber: number): Date {\r\n    if (globalWeekNumber < 1) {\r\n        throw new Error('Global week number must be 1 or greater.');\r\n    }\r\n\r\n    const daysToAdd = (globalWeekNumber - 1) * 7;\r\n    return addDays(EPOCH_MONDAY, daysToAdd);\r\n}\r\n\r\nexport {addDays, getISOWeekYear};\r\n"],"names":["EPOCH_MONDAY","parseDate","date","dateObj","parseISO","isValid","getMondayOfWeek","dateToProcess","startOfWeek","getWeekInfo","forDate","monday","daysSinceEpoch","differenceInDays","globalWeekNumber","year","getYear","weekOfYear","getISOWeek","getMondayFromGlobalWeek","daysToAdd","addDays"],"mappings":"wFA4BA,MAAMA,EAAe,IAAI,KAAK,KAAM,GAAI,EAAE,EAQ1C,SAASC,EAAUC,EAA2B,CAC1C,MAAMC,EAAU,OAAOD,GAAS,SAAWE,EAASF,CAAI,EAAIA,EACxD,GAAA,CAACG,EAAQF,CAAO,EAChB,MAAM,IAAI,MAAM,0BAA0BD,CAAI,EAAE,EAE7C,OAAAC,CACX,CAQO,SAASG,EAAgBJ,EAA2B,CACjD,MAAAK,EAAgBN,EAAUC,CAAI,EAEpC,OAAOM,EAAYD,EAAe,CAAC,aAAc,EAAE,CACvD,CAQO,SAASE,EAAYC,EAAkC,CACpD,MAAAC,EAASL,EAAgBI,CAAO,EAEtC,GAAIC,EAASX,EACT,MAAM,IAAI,MACN,6CAA6CA,EAAa,aAAa,EAC3E,EAIE,MAAAY,EAAiBC,EAAiBF,EAAQX,CAAY,EACtDc,EAAmB,KAAK,MAAMF,EAAiB,CAAC,EAAI,EAGpDG,EAAOC,EAAQL,CAAM,EAErBM,EAAaC,EAAWP,CAAM,EAE7B,MAAA,CACH,iBAAAG,EACA,aAAcH,EACd,KAAAI,EACA,WAAAE,CACJ,CACJ,CAOO,SAASE,EAAwBL,EAAgC,CACpE,GAAIA,EAAmB,EACb,MAAA,IAAI,MAAM,0CAA0C,EAGxD,MAAAM,GAAaN,EAAmB,GAAK,EACpC,OAAAO,EAAQrB,EAAcoB,CAAS,CAC1C"}