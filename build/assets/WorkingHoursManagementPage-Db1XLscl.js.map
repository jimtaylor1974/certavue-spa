{"version":3,"file":"WorkingHoursManagementPage-Db1XLscl.js","sources":["../../src/api/working-hours/useUpdateBaseWorkingHours.ts","../../src/api/working-hours/useCreateCompanyNonWorkingDay.ts","../../src/api/working-hours/useUpdateCompanyNonWorkingDay.ts","../../src/api/working-hours/useDeleteCompanyNonWorkingDay.ts","../../src/components/main/working-hours/WorkingHoursManagementPage.tsx"],"sourcesContent":["import { useMutation, UseMutationResult, UseMutationOptions } from '@tanstack/react-query';\r\nimport { useCreateAuthenticatedFetch } from '../useCreateAuthenticatedFetch';\r\nimport baseUrl from '../baseUrl';\r\nimport { handleResponse } from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\nimport { BaseWorkingHours, UpdateBaseWorkingHoursCommand } from './models';\r\n\r\nconst useUpdateBaseWorkingHours = (\r\n    options?: UseMutationOptions<BaseWorkingHours, Error | ProblemDetailsError, UpdateBaseWorkingHoursCommand>\r\n): UseMutationResult<BaseWorkingHours, Error | ProblemDetailsError, UpdateBaseWorkingHoursCommand> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    return useMutation({\r\n        mutationFn: async (command: UpdateBaseWorkingHoursCommand) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/working-hours/base`,\r\n                {\r\n                    method: 'PUT',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify(command)\r\n                }\r\n            );\r\n            return handleResponse<BaseWorkingHours>(response);\r\n        },\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useUpdateBaseWorkingHours;","import { useMutation, UseMutationResult, UseMutationOptions } from '@tanstack/react-query';\r\nimport { useCreateAuthenticatedFetch } from '../useCreateAuthenticatedFetch';\r\nimport baseUrl from '../baseUrl';\r\nimport { handleResponse } from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\nimport { IdResult } from '../../types';\r\nimport { CreateCompanyNonWorkingDayCommand } from './models';\r\n\r\nconst useCreateCompanyNonWorkingDay = (\r\n    options?: UseMutationOptions<IdResult, Error | ProblemDetailsError, CreateCompanyNonWorkingDayCommand>\r\n): UseMutationResult<IdResult, Error | ProblemDetailsError, CreateCompanyNonWorkingDayCommand> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    return useMutation({\r\n        mutationFn: async (command: CreateCompanyNonWorkingDayCommand) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/working-hours/company-non-working-days`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify(command)\r\n                }\r\n            );\r\n            return handleResponse<IdResult>(response);\r\n        },\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useCreateCompanyNonWorkingDay;","import { useMutation, UseMutationResult, UseMutationOptions } from '@tanstack/react-query';\r\nimport { useCreateAuthenticatedFetch } from '../useCreateAuthenticatedFetch';\r\nimport baseUrl from '../baseUrl';\r\nimport { handleResponse } from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\nimport { CompanyNonWorkingDay, UpdateCompanyNonWorkingDayCommand } from './models';\r\n\r\ninterface UpdateCompanyNonWorkingDayParams {\r\n    id: string;\r\n    command: UpdateCompanyNonWorkingDayCommand;\r\n}\r\n\r\nconst useUpdateCompanyNonWorkingDay = (\r\n    options?: UseMutationOptions<CompanyNonWorkingDay, Error | ProblemDetailsError, UpdateCompanyNonWorkingDayParams>\r\n): UseMutationResult<CompanyNonWorkingDay, Error | ProblemDetailsError, UpdateCompanyNonWorkingDayParams> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    return useMutation({\r\n        mutationFn: async ({ id, command }: UpdateCompanyNonWorkingDayParams) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/working-hours/company-non-working-days/${id}`,\r\n                {\r\n                    method: 'PUT',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify(command)\r\n                }\r\n            );\r\n            return handleResponse<CompanyNonWorkingDay>(response);\r\n        },\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useUpdateCompanyNonWorkingDay;","import { useMutation, UseMutationResult, UseMutationOptions } from '@tanstack/react-query';\r\nimport { useCreateAuthenticatedFetch } from '../useCreateAuthenticatedFetch';\r\nimport baseUrl from '../baseUrl';\r\nimport { handleResponse } from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\n\r\nconst useDeleteCompanyNonWorkingDay = (\r\n    options?: UseMutationOptions<void, Error | ProblemDetailsError, string>\r\n): UseMutationResult<void, Error | ProblemDetailsError, string> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    return useMutation({\r\n        mutationFn: async (id: string) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/working-hours/company-non-working-days/${id}`,\r\n                {\r\n                    method: 'DELETE'\r\n                }\r\n            );\r\n            return handleResponse<void>(response);\r\n        },\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useDeleteCompanyNonWorkingDay;","import React, { useState } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport {\r\n    Button,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Alert,\r\n    Input,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Table\r\n} from 'reactstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { Clock, Calendar, Plus, Edit, Trash2, Save, RefreshCw } from 'lucide-react';\r\nimport { useQueryClient } from '@tanstack/react-query';\r\nimport DisplayFormError from '../../utility/DisplayFormError.tsx';\r\nimport ErrorDisplay from '../../utility/ErrorDisplay.tsx';\r\nimport Spinner from '../../utility/Spinner.tsx';\r\nimport useGetBaseWorkingHours from '../../../api/working-hours/useGetBaseWorkingHours';\r\nimport useUpdateBaseWorkingHours from '../../../api/working-hours/useUpdateBaseWorkingHours';\r\nimport useGetCompanyNonWorkingDays from '../../../api/working-hours/useGetCompanyNonWorkingDays';\r\nimport useCreateCompanyNonWorkingDay from '../../../api/working-hours/useCreateCompanyNonWorkingDay';\r\nimport useUpdateCompanyNonWorkingDay from '../../../api/working-hours/useUpdateCompanyNonWorkingDay';\r\nimport useDeleteCompanyNonWorkingDay from '../../../api/working-hours/useDeleteCompanyNonWorkingDay';\r\nimport {\r\n    CompanyNonWorkingDay,\r\n    UpdateBaseWorkingHoursCommand,\r\n    CreateCompanyNonWorkingDayCommand,\r\n    UpdateCompanyNonWorkingDayCommand\r\n} from '../../../api/working-hours/models';\r\n\r\ninterface BaseWorkingHoursFormData {\r\n    baseHoursPerWeek: number;\r\n}\r\n\r\ninterface CompanyNonWorkingDayFormData {\r\n    name: string;\r\n    startDate: string;\r\n    endDate: string;\r\n    description?: string;\r\n}\r\n\r\nconst WorkingHoursManagementPage: React.FC = () => {\r\n    const queryClient = useQueryClient();\r\n    const [showNonWorkingDayModal, setShowNonWorkingDayModal] = useState(false);\r\n    const [editingNonWorkingDay, setEditingNonWorkingDay] = useState<CompanyNonWorkingDay | null>(null);\r\n\r\n    // Queries\r\n    const {\r\n        data: baseWorkingHours,\r\n        isLoading: isLoadingBaseHours,\r\n        error: baseHoursError,\r\n        refetch: refetchBaseHours\r\n    } = useGetBaseWorkingHours();\r\n\r\n    const {\r\n        data: companyNonWorkingDays = [],\r\n        isLoading: isLoadingNonWorkingDays,\r\n        error: nonWorkingDaysError,\r\n        refetch: refetchNonWorkingDays\r\n    } = useGetCompanyNonWorkingDays();\r\n\r\n    // Mutations\r\n    const updateBaseWorkingHoursMutation = useUpdateBaseWorkingHours({\r\n        onSuccess: (data) => {\r\n            queryClient.setQueryData(['baseWorkingHours'], data);\r\n            toast.success('Base working hours updated successfully');\r\n        },\r\n        onError: (error) => {\r\n            toast.error(`Failed to update base working hours: ${error.message}`);\r\n        }\r\n    });\r\n\r\n    const createNonWorkingDayMutation = useCreateCompanyNonWorkingDay({\r\n        onSuccess: () => {\r\n            queryClient.invalidateQueries({ queryKey: ['companyNonWorkingDays'] });\r\n            setShowNonWorkingDayModal(false);\r\n            setEditingNonWorkingDay(null);\r\n            nonWorkingDayForm.reset();\r\n            toast.success('Company non-working day created successfully');\r\n        },\r\n        onError: (error) => {\r\n            toast.error(`Failed to create company non-working day: ${error.message}`);\r\n        }\r\n    });\r\n\r\n    const updateNonWorkingDayMutation = useUpdateCompanyNonWorkingDay({\r\n        onSuccess: () => {\r\n            queryClient.invalidateQueries({ queryKey: ['companyNonWorkingDays'] });\r\n            setShowNonWorkingDayModal(false);\r\n            setEditingNonWorkingDay(null);\r\n            nonWorkingDayForm.reset();\r\n            toast.success('Company non-working day updated successfully');\r\n        },\r\n        onError: (error) => {\r\n            toast.error(`Failed to update company non-working day: ${error.message}`);\r\n        }\r\n    });\r\n\r\n    const deleteNonWorkingDayMutation = useDeleteCompanyNonWorkingDay({\r\n        onSuccess: () => {\r\n            queryClient.invalidateQueries({ queryKey: ['companyNonWorkingDays'] });\r\n            toast.success('Company non-working day deleted successfully');\r\n        },\r\n        onError: (error) => {\r\n            toast.error(`Failed to delete company non-working day: ${error.message}`);\r\n        }\r\n    });\r\n\r\n    // Forms\r\n    const baseHoursForm = useForm<BaseWorkingHoursFormData>({\r\n        defaultValues: {\r\n            baseHoursPerWeek: baseWorkingHours?.baseHoursPerWeek ?? 40\r\n        }\r\n    });\r\n\r\n    const nonWorkingDayForm = useForm<CompanyNonWorkingDayFormData>({\r\n        defaultValues: {\r\n            name: '',\r\n            startDate: '',\r\n            endDate: '',\r\n            description: ''\r\n        }\r\n    });\r\n\r\n    // Update form when data loads\r\n    React.useEffect(() => {\r\n        if (baseWorkingHours) {\r\n            baseHoursForm.reset({ baseHoursPerWeek: baseWorkingHours.baseHoursPerWeek });\r\n        }\r\n    }, [baseWorkingHours, baseHoursForm]);\r\n\r\n    const handleBaseHoursSubmit = (data: BaseWorkingHoursFormData) => {\r\n        const command: UpdateBaseWorkingHoursCommand = {\r\n            baseHoursPerWeek: data.baseHoursPerWeek\r\n        };\r\n        updateBaseWorkingHoursMutation.mutate(command);\r\n    };\r\n\r\n    const handleNonWorkingDaySubmit = (data: CompanyNonWorkingDayFormData) => {\r\n        if (editingNonWorkingDay) {\r\n            const command: UpdateCompanyNonWorkingDayCommand = {\r\n                name: data.name,\r\n                startDate: data.startDate,\r\n                endDate: data.endDate,\r\n                description: data.description || undefined\r\n            };\r\n            updateNonWorkingDayMutation.mutate({ id: editingNonWorkingDay.id, command });\r\n        } else {\r\n            const command: CreateCompanyNonWorkingDayCommand = {\r\n                name: data.name,\r\n                startDate: data.startDate,\r\n                endDate: data.endDate,\r\n                description: data.description || undefined\r\n            };\r\n            createNonWorkingDayMutation.mutate(command);\r\n        }\r\n    };\r\n\r\n    const handleDeleteNonWorkingDay = (id: string) => {\r\n        if (confirm('Are you sure you want to delete this non-working day?')) {\r\n            deleteNonWorkingDayMutation.mutate(id);\r\n        }\r\n    };\r\n\r\n    const openNonWorkingDayModal = (nonWorkingDay?: CompanyNonWorkingDay) => {\r\n        if (nonWorkingDay) {\r\n            setEditingNonWorkingDay(nonWorkingDay);\r\n            nonWorkingDayForm.reset({\r\n                name: nonWorkingDay.name,\r\n                startDate: nonWorkingDay.startDate.split('T')[0], // Convert to date input format\r\n                endDate: nonWorkingDay.endDate.split('T')[0],\r\n                description: nonWorkingDay.description || ''\r\n            });\r\n        } else {\r\n            setEditingNonWorkingDay(null);\r\n            nonWorkingDayForm.reset({\r\n                name: '',\r\n                startDate: '',\r\n                endDate: '',\r\n                description: ''\r\n            });\r\n        }\r\n        setShowNonWorkingDayModal(true);\r\n    };\r\n\r\n    const closeNonWorkingDayModal = () => {\r\n        setShowNonWorkingDayModal(false);\r\n        setEditingNonWorkingDay(null);\r\n    };\r\n\r\n    const refreshData = () => {\r\n        refetchBaseHours();\r\n        refetchNonWorkingDays();\r\n    };\r\n\r\n    const isLoading = isLoadingBaseHours || isLoadingNonWorkingDays;\r\n    const error = baseHoursError || nonWorkingDaysError;\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <Container className=\"mt-4\">\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <Spinner />\r\n                </div>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <Container className=\"mt-4\">\r\n                <ErrorDisplay error={error} />\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container className=\"mt-4\">\r\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                <h2 className=\"mb-0\">\r\n                    <Clock className=\"me-2\" size={24} />\r\n                    Working Hours Management\r\n                </h2>\r\n                <Button color=\"secondary\" onClick={refreshData} disabled={isLoading}>\r\n                    <RefreshCw size={16} className=\"me-1\" />\r\n                    Refresh\r\n                </Button>\r\n            </div>\r\n\r\n            <Row>\r\n                <Col md={6}>\r\n                    <Card className=\"mb-4\">\r\n                        <CardHeader>\r\n                            <h5 className=\"mb-0\">Base Working Hours</h5>\r\n                        </CardHeader>\r\n                        <CardBody>\r\n                            <Form onSubmit={baseHoursForm.handleSubmit(handleBaseHoursSubmit)}>\r\n                                <FormGroup>\r\n                                    <Label for=\"baseHoursPerWeek\">Base Hours Per Week</Label>\r\n                                    <Controller\r\n                                        name=\"baseHoursPerWeek\"\r\n                                        control={baseHoursForm.control}\r\n                                        rules={{\r\n                                            required: 'Base hours per week is required',\r\n                                            min: { value: 1, message: 'Must be at least 1 hour' },\r\n                                            max: { value: 168, message: 'Cannot exceed 168 hours per week' }\r\n                                        }}\r\n                                        render={({ field, fieldState }) => (\r\n                                            <>\r\n                                                <Input\r\n                                                    {...field}\r\n                                                    id=\"baseHoursPerWeek\"\r\n                                                    type=\"number\"\r\n                                                    step=\"0.5\"\r\n                                                    min=\"1\"\r\n                                                    max=\"168\"\r\n                                                    invalid={!!fieldState.error}\r\n                                                    onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                                                />\r\n                                                <DisplayFormError error={fieldState.error} />\r\n                                            </>\r\n                                        )}\r\n                                    />\r\n                                </FormGroup>\r\n\r\n                                {updateBaseWorkingHoursMutation.error && (\r\n                                    <Alert color=\"danger\" className=\"mb-3\">\r\n                                        {updateBaseWorkingHoursMutation.error.message}\r\n                                    </Alert>\r\n                                )}\r\n\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    color=\"primary\"\r\n                                    disabled={updateBaseWorkingHoursMutation.isPending}\r\n                                >\r\n                                    {updateBaseWorkingHoursMutation.isPending ? (\r\n                                        <>\r\n                                            <div className=\"spinner-border spinner-border-sm me-1\" role=\"status\">\r\n                                                <span className=\"visually-hidden\">Loading...</span>\r\n                                            </div>\r\n                                            Saving...\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <Save size={16} className=\"me-1\" />\r\n                                            Save Base Hours\r\n                                        </>\r\n                                    )}\r\n                                </Button>\r\n                            </Form>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n\r\n                <Col md={6}>\r\n                    <Card>\r\n                        <CardHeader className=\"d-flex justify-content-between align-items-center\">\r\n                            <h5 className=\"mb-0\">Company Non-Working Days</h5>\r\n                            <Button\r\n                                color=\"primary\"\r\n                                size=\"sm\"\r\n                                onClick={() => openNonWorkingDayModal()}\r\n                            >\r\n                                <Plus size={16} className=\"me-1\" />\r\n                                Add Non-Working Day\r\n                            </Button>\r\n                        </CardHeader>\r\n                        <CardBody>\r\n                            {companyNonWorkingDays.length === 0 ? (\r\n                                <p className=\"text-muted mb-0\">No company non-working days configured.</p>\r\n                            ) : (\r\n                                <Table responsive size=\"sm\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Name</th>\r\n                                            <th>Start Date</th>\r\n                                            <th>End Date</th>\r\n                                            <th>Actions</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {companyNonWorkingDays.map((day) => (\r\n                                            <tr key={day.id}>\r\n                                                <td>{day.name}</td>\r\n                                                <td>{new Date(day.startDate).toLocaleDateString()}</td>\r\n                                                <td>{new Date(day.endDate).toLocaleDateString()}</td>\r\n                                                <td>\r\n                                                    <Button\r\n                                                        color=\"link\"\r\n                                                        size=\"sm\"\r\n                                                        className=\"p-0 me-2\"\r\n                                                        onClick={() => openNonWorkingDayModal(day)}\r\n                                                    >\r\n                                                        <Edit size={14} />\r\n                                                    </Button>\r\n                                                    <Button\r\n                                                        color=\"link\"\r\n                                                        size=\"sm\"\r\n                                                        className=\"p-0 text-danger\"\r\n                                                        onClick={() => handleDeleteNonWorkingDay(day.id)}\r\n                                                        disabled={deleteNonWorkingDayMutation.isPending}\r\n                                                    >\r\n                                                        <Trash2 size={14} />\r\n                                                    </Button>\r\n                                                </td>\r\n                                            </tr>\r\n                                        ))}\r\n                                    </tbody>\r\n                                </Table>\r\n                            )}\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\r\n            {/* Non-Working Day Modal */}\r\n            <Modal isOpen={showNonWorkingDayModal} toggle={closeNonWorkingDayModal}>\r\n                <Form onSubmit={nonWorkingDayForm.handleSubmit(handleNonWorkingDaySubmit)}>\r\n                    <ModalHeader toggle={closeNonWorkingDayModal}>\r\n                        <Calendar className=\"me-2\" size={20} />\r\n                        {editingNonWorkingDay ? 'Edit' : 'Add'} Non-Working Day\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">Name *</Label>\r\n                            <Controller\r\n                                name=\"name\"\r\n                                control={nonWorkingDayForm.control}\r\n                                rules={{ required: 'Name is required' }}\r\n                                render={({ field, fieldState }) => (\r\n                                    <>\r\n                                        <Input\r\n                                            {...field}\r\n                                            id=\"name\"\r\n                                            type=\"text\"\r\n                                            placeholder=\"e.g., Christmas Day, Company Shutdown\"\r\n                                            invalid={!!fieldState.error}\r\n                                        />\r\n                                        <DisplayFormError error={fieldState.error} />\r\n                                    </>\r\n                                )}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"startDate\">Start Date *</Label>\r\n                                    <Controller\r\n                                        name=\"startDate\"\r\n                                        control={nonWorkingDayForm.control}\r\n                                        rules={{ required: 'Start date is required' }}\r\n                                        render={({ field, fieldState }) => (\r\n                                            <>\r\n                                                <Input\r\n                                                    {...field}\r\n                                                    id=\"startDate\"\r\n                                                    type=\"date\"\r\n                                                    invalid={!!fieldState.error}\r\n                                                />\r\n                                                <DisplayFormError error={fieldState.error} />\r\n                                            </>\r\n                                        )}\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label for=\"endDate\">End Date *</Label>\r\n                                    <Controller\r\n                                        name=\"endDate\"\r\n                                        control={nonWorkingDayForm.control}\r\n                                        rules={{ required: 'End date is required' }}\r\n                                        render={({ field, fieldState }) => (\r\n                                            <>\r\n                                                <Input\r\n                                                    {...field}\r\n                                                    id=\"endDate\"\r\n                                                    type=\"date\"\r\n                                                    invalid={!!fieldState.error}\r\n                                                />\r\n                                                <DisplayFormError error={fieldState.error} />\r\n                                            </>\r\n                                        )}\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <FormGroup>\r\n                            <Label for=\"description\">Description</Label>\r\n                            <Controller\r\n                                name=\"description\"\r\n                                control={nonWorkingDayForm.control}\r\n                                render={({ field }) => (\r\n                                    <Input\r\n                                        {...field}\r\n                                        id=\"description\"\r\n                                        type=\"textarea\"\r\n                                        rows={3}\r\n                                        placeholder=\"Optional description...\"\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        {(createNonWorkingDayMutation.error || updateNonWorkingDayMutation.error) && (\r\n                            <Alert color=\"danger\">\r\n                                {createNonWorkingDayMutation.error?.message || updateNonWorkingDayMutation.error?.message}\r\n                            </Alert>\r\n                        )}\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"secondary\" onClick={closeNonWorkingDayModal}>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            color=\"primary\"\r\n                            disabled={createNonWorkingDayMutation.isPending || updateNonWorkingDayMutation.isPending}\r\n                        >\r\n                            {(createNonWorkingDayMutation.isPending || updateNonWorkingDayMutation.isPending) ? (\r\n                                <>\r\n                                    <div className=\"spinner-border spinner-border-sm me-1\" role=\"status\">\r\n                                        <span className=\"visually-hidden\">Loading...</span>\r\n                                    </div>\r\n                                    {editingNonWorkingDay ? 'Updating...' : 'Creating...'}\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <Save size={16} className=\"me-1\" />\r\n                                    {editingNonWorkingDay ? 'Update' : 'Create'}\r\n                                </>\r\n                            )}\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </Form>\r\n            </Modal>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default WorkingHoursManagementPage;"],"names":["useUpdateBaseWorkingHours","options","authenticatedFetch","useCreateAuthenticatedFetch","useMutation","command","response","baseUrl","handleResponse","useCreateCompanyNonWorkingDay","useUpdateCompanyNonWorkingDay","id","useDeleteCompanyNonWorkingDay","WorkingHoursManagementPage","queryClient","useQueryClient","showNonWorkingDayModal","setShowNonWorkingDayModal","useState","editingNonWorkingDay","setEditingNonWorkingDay","baseWorkingHours","isLoadingBaseHours","baseHoursError","refetchBaseHours","useGetBaseWorkingHours","companyNonWorkingDays","isLoadingNonWorkingDays","nonWorkingDaysError","refetchNonWorkingDays","useGetCompanyNonWorkingDays","updateBaseWorkingHoursMutation","data","toast","error","createNonWorkingDayMutation","nonWorkingDayForm","updateNonWorkingDayMutation","deleteNonWorkingDayMutation","baseHoursForm","useForm","React","handleBaseHoursSubmit","handleNonWorkingDaySubmit","handleDeleteNonWorkingDay","openNonWorkingDayModal","nonWorkingDay","closeNonWorkingDayModal","refreshData","isLoading","jsx","Container","Spinner","ErrorDisplay","jsxs","Clock","Button","RefreshCw","Row","Col","Card","CardHeader","CardBody","Form","FormGroup","Label","Controller","field","fieldState","Fragment","Input","e","DisplayFormError","Alert","Save","Plus","Table","day","Edit","Trash2","Modal","ModalHeader","Calendar","ModalBody","_a","_b","ModalFooter"],"mappings":"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"}