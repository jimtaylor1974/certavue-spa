{"version":3,"file":"TagManagementPage-C-08UkuC.js","sources":["../../src/api/tags/useCreateTag.ts","../../src/components/main/tags/CreateTagModal.tsx","../../src/api/tags/useUpdateTag.ts","../../src/components/main/tags/EditTagModal.tsx","../../src/components/main/tags/TagManagementPage.tsx"],"sourcesContent":["import { useMutation } from '@tanstack/react-query';\r\nimport { useCreateAuthenticatedFetch } from '../useCreateAuthenticatedFetch';\r\nimport { handleResponse } from '../handleResponse';\r\nimport baseUrl from '../baseUrl';\r\nimport { IdResult } from '../../types';\r\n\r\nexport interface CreateTagRequest {\r\n    name: string;\r\n    colour?: string;\r\n    icon?: string;\r\n    isActive?: boolean;\r\n}\r\n\r\nexport const useCreateTag = () => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n    \r\n    return useMutation({\r\n        mutationFn: async (request: CreateTagRequest): Promise<IdResult> => {\r\n            const response = await authenticatedFetch(`${baseUrl}/api/tags`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(request)\r\n            });\r\n            return handleResponse<IdResult>(response);\r\n        }\r\n    });\r\n};\r\n","import React, { useState, useMemo } from 'react';\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n} from 'reactstrap';\r\nimport { useCreateTag } from '../../../api/tags/useCreateTag';\r\nimport { toast } from 'react-toastify';\r\nimport ErrorDisplay from '../../utility/ErrorDisplay';\r\nimport DisplayTag from '../../utility/DisplayTag';\r\nimport { PREDEFINED_COLOURS, PREDEFINED_ICONS, TAG_DEFAULTS, normalizeTagInput, finalizeTagName } from '../../../lib/tags';\r\n\r\ninterface CreateTagModalProps {\r\n    isOpen: boolean;\r\n    toggle: () => void;\r\n    onTagCreated: () => void;\r\n}\r\n\r\nconst CreateTagModal: React.FC<CreateTagModalProps> = ({\r\n    isOpen,\r\n    toggle,\r\n    onTagCreated,\r\n}) => {\r\n    const [name, setName] = useState('');\r\n    const [colour, setColour] = useState(TAG_DEFAULTS.colour);\r\n    const [icon, setIcon] = useState(TAG_DEFAULTS.icon);\r\n    const createTagMutation = useCreateTag();\r\n\r\n    const handleCreateTag = async () => {\r\n        const finalizedName = finalizeTagName(name);\r\n        if (!finalizedName) return; // Don't create if name is empty after finalization\r\n        \r\n        try {\r\n            await createTagMutation.mutateAsync({\r\n                name: finalizedName,\r\n                colour,\r\n                icon,\r\n                isActive: true\r\n            });\r\n            toast.success('Tag created successfully');\r\n            onTagCreated();\r\n            toggle();\r\n            // Reset form\r\n            setName('');\r\n            setColour(TAG_DEFAULTS.colour);\r\n            setIcon(TAG_DEFAULTS.icon);\r\n        } catch (error) {\r\n            // Error is handled by the ErrorDisplay component\r\n        }\r\n    };\r\n\r\n    // Create preview tag for display\r\n    const previewTag = useMemo(() => ({\r\n        id: null,\r\n        name: name || 'preview',\r\n        colour,\r\n        icon,\r\n        isActive: true\r\n    }), [name, colour, icon]);\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} toggle={toggle} size=\"md\">\r\n            <ModalHeader toggle={toggle}>Create Tag</ModalHeader>\r\n            <ModalBody>\r\n                {/* Preview */}\r\n                <FormGroup>\r\n                    <Label>Preview</Label>\r\n                    <div>\r\n                        <DisplayTag tag={previewTag} />\r\n                    </div>\r\n                </FormGroup>\r\n\r\n                {/* Name */}\r\n                <FormGroup>\r\n                    <Label for=\"tagName\">Name *</Label>\r\n                    <Input\r\n                        id=\"tagName\"\r\n                        value={name}\r\n                        onChange={(e) => {\r\n                            const normalizedName = normalizeTagInput(e.target.value);\r\n                            setName(normalizedName);\r\n                        }}\r\n                        placeholder=\"Enter tag name...\"\r\n                    />\r\n                </FormGroup>\r\n\r\n                {/* Color Selection */}\r\n                <FormGroup>\r\n                    <Label>Color</Label>\r\n                    <div className=\"d-flex flex-wrap gap-2 mt-2\">\r\n                        {PREDEFINED_COLOURS.map((color) => (\r\n                            <div\r\n                                key={color}\r\n                                onClick={() => setColour(color)}\r\n                                style={{\r\n                                    width: '32px',\r\n                                    height: '32px',\r\n                                    backgroundColor: color,\r\n                                    borderRadius: '6px',\r\n                                    cursor: 'pointer',\r\n                                    border: colour === color ? '3px solid #000' : '2px solid #e5e7eb',\r\n                                    transition: 'all 0.2s ease'\r\n                                }}\r\n                                title={color}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </FormGroup>\r\n\r\n                {/* Icon Selection */}\r\n                <FormGroup>\r\n                    <Label>Icon</Label>\r\n                    <div className=\"d-flex flex-wrap gap-2 mt-2\">\r\n                        {PREDEFINED_ICONS.map((iconOption) => {\r\n                            const IconComp = iconOption.component;\r\n                            return (\r\n                                <div\r\n                                    key={iconOption.name}\r\n                                    onClick={() => setIcon(iconOption.name)}\r\n                                    style={{\r\n                                        width: '40px',\r\n                                        height: '40px',\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        justifyContent: 'center',\r\n                                        borderRadius: '6px',\r\n                                        cursor: 'pointer',\r\n                                        border: icon === iconOption.name ? '2px solid #007bff' : '2px solid #e5e7eb',\r\n                                        backgroundColor: icon === iconOption.name ? '#f8f9fa' : 'transparent',\r\n                                        transition: 'all 0.2s ease'\r\n                                    }}\r\n                                    title={iconOption.name}\r\n                                >\r\n                                    <IconComp size={20} />\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </FormGroup>\r\n\r\n                <ErrorDisplay error={createTagMutation.error} />\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button\r\n                    color=\"primary\"\r\n                    onClick={handleCreateTag}\r\n                    disabled={createTagMutation.isPending || !name.trim()}\r\n                >\r\n                    {createTagMutation.isPending ? 'Creating...' : 'Create Tag'}\r\n                </Button>\r\n                <Button color=\"secondary\" onClick={toggle}>\r\n                    Cancel\r\n                </Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default CreateTagModal;\r\n","import { useMutation, UseMutationOptions } from '@tanstack/react-query';\r\nimport baseUrl from '../baseUrl';\r\nimport { useCreateAuthenticatedFetch } from '../useCreateAuthenticatedFetch';\r\nimport { handleResponse } from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\nimport { EmptyResult, TagModel } from '../../types';\r\n\r\nexport type UpdateTagRequest = Omit<TagModel, 'customerId'>;\r\n\r\nconst useUpdateTag = (\r\n  options?: UseMutationOptions<EmptyResult, Error | ProblemDetailsError, UpdateTagRequest>\r\n) => {\r\n  const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n  return useMutation({\r\n    mutationFn: async (data: UpdateTagRequest) => {\r\n      const response = await authenticatedFetch(`${baseUrl}/api/tags/${data.id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(data),\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n      return handleResponse<EmptyResult>(response);\r\n    },\r\n    ...options,\r\n  });\r\n};\r\n\r\nexport default useUpdateTag;\r\n","import React, { useState, useEffect, useMemo } from 'react';\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n} from 'reactstrap';\r\nimport useUpdateTag from '../../../api/tags/useUpdateTag';\r\nimport { toast } from 'react-toastify';\r\nimport ErrorDisplay from '../../utility/ErrorDisplay';\r\nimport DisplayTag from '../../utility/DisplayTag';\r\nimport { TagModel } from '../../../types';\r\nimport { PREDEFINED_COLOURS, PREDEFINED_ICONS, normalizeTagInput } from '../../../lib/tags';\r\n\r\ninterface EditTagModalProps {\r\n    tag: TagModel;\r\n    isOpen: boolean;\r\n    toggle: () => void;\r\n    onTagUpdated: () => void;\r\n}\r\n\r\nconst EditTagModal: React.FC<EditTagModalProps> = ({\r\n    tag,\r\n    isOpen,\r\n    toggle,\r\n    onTagUpdated,\r\n}) => {\r\n    const [name, setName] = useState(tag.name);\r\n    const [colour, setColour] = useState(tag.colour);\r\n    const [icon, setIcon] = useState(tag.icon);\r\n    const [isActive, setIsActive] = useState(tag.isActive);\r\n\r\n    const updateTagMutation = useUpdateTag();\r\n\r\n    useEffect(() => {\r\n        setName(tag.name);\r\n        setColour(tag.colour);\r\n        setIcon(tag.icon);\r\n        setIsActive(tag.isActive);\r\n    }, [tag]);\r\n\r\n    // Create preview tag for display\r\n    const previewTag = useMemo(() => ({\r\n        id: tag.id,\r\n        name: normalizeTagInput(name) || 'preview',\r\n        colour,\r\n        icon,\r\n        isActive\r\n    }), [tag.id, name, colour, icon, isActive]);\r\n\r\n    const handleUpdateTag = async () => {\r\n        try {\r\n            await updateTagMutation.mutateAsync({\r\n                id: tag.id,\r\n                name,\r\n                colour,\r\n                icon,\r\n                isActive,\r\n            });\r\n            toast.success('Tag updated successfully');\r\n            onTagUpdated();\r\n            toggle();\r\n        } catch (error) {\r\n            // Error is handled by the ErrorDisplay component\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} toggle={toggle} size=\"md\">\r\n            <ModalHeader toggle={toggle}>Edit Tag</ModalHeader>\r\n            <ModalBody>\r\n                {/* Preview */}\r\n                <FormGroup>\r\n                    <Label>Preview</Label>\r\n                    <div>\r\n                        <DisplayTag tag={previewTag} />\r\n                    </div>\r\n                </FormGroup>\r\n\r\n                {/* Name */}\r\n                <FormGroup>\r\n                    <Label for=\"tagName\">Name *</Label>\r\n                    <Input\r\n                        id=\"tagName\"\r\n                        value={name}\r\n                        onChange={e => setName(e.target.value)}\r\n                        placeholder=\"Enter tag name...\"\r\n                    />\r\n                </FormGroup>\r\n\r\n                {/* Color Selection */}\r\n                <FormGroup>\r\n                    <Label>Color</Label>\r\n                    <div className=\"d-flex flex-wrap gap-2 mt-2\">\r\n                        {PREDEFINED_COLOURS.map((color) => (\r\n                            <div\r\n                                key={color}\r\n                                onClick={() => setColour(color)}\r\n                                style={{\r\n                                    width: '32px',\r\n                                    height: '32px',\r\n                                    backgroundColor: color,\r\n                                    borderRadius: '6px',\r\n                                    cursor: 'pointer',\r\n                                    border: colour === color ? '3px solid #000' : '2px solid #e5e7eb',\r\n                                    transition: 'all 0.2s ease'\r\n                                }}\r\n                                title={color}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </FormGroup>\r\n\r\n                {/* Icon Selection */}\r\n                <FormGroup>\r\n                    <Label>Icon</Label>\r\n                    <div className=\"d-flex flex-wrap gap-2 mt-2\">\r\n                        {PREDEFINED_ICONS.map((iconOption) => {\r\n                            const IconComp = iconOption.component;\r\n                            return (\r\n                                <div\r\n                                    key={iconOption.name}\r\n                                    onClick={() => setIcon(iconOption.name)}\r\n                                    style={{\r\n                                        width: '40px',\r\n                                        height: '40px',\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        justifyContent: 'center',\r\n                                        borderRadius: '6px',\r\n                                        cursor: 'pointer',\r\n                                        border: icon === iconOption.name ? '2px solid #007bff' : '2px solid #e5e7eb',\r\n                                        backgroundColor: icon === iconOption.name ? '#f8f9fa' : 'transparent',\r\n                                        transition: 'all 0.2s ease'\r\n                                    }}\r\n                                    title={iconOption.name}\r\n                                >\r\n                                    <IconComp size={20} />\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </FormGroup>\r\n\r\n                {/* Active Status */}\r\n                <FormGroup check>\r\n                    <Label check>\r\n                        <Input\r\n                            type=\"checkbox\"\r\n                            checked={isActive}\r\n                            onChange={e => setIsActive(e.target.checked)}\r\n                        />{' '}\r\n                        Active\r\n                    </Label>\r\n                </FormGroup>\r\n\r\n                <ErrorDisplay error={updateTagMutation.error} />\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button\r\n                    color=\"primary\"\r\n                    onClick={handleUpdateTag}\r\n                    disabled={updateTagMutation.isPending || !name.trim()}\r\n                >\r\n                    {updateTagMutation.isPending ? 'Saving...' : 'Save Changes'}\r\n                </Button>\r\n                <Button color=\"secondary\" onClick={toggle}>\r\n                    Cancel\r\n                </Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default EditTagModal;\r\n","import { useState } from 'react';\r\nimport { Button, Col, Row, Table, Card, CardBody } from 'reactstrap';\r\nimport { Plus, Edit } from 'lucide-react';\r\nimport { useGetTags } from '../../../api/tags/useGetTags';\r\nimport Spinner from '../../utility/Spinner';\r\nimport ErrorDisplay from '../../utility/ErrorDisplay';\r\nimport DisplayTag from '../../utility/DisplayTag';\r\nimport { TagModel } from '../../../types';\r\nimport CreateTagModal from './CreateTagModal';\r\nimport EditTagModal from './EditTagModal';\r\n\r\nconst TagManagementPage = () => {\r\n    const [isCreating, setIsCreating] = useState(false);\r\n    const [selectedTag, setSelectedTag] = useState<TagModel | null>(null);\r\n\r\n    const { data: tags, error, isLoading, refetch } = useGetTags();\r\n\r\n    if (isLoading) {\r\n        return <Spinner />;\r\n    }\r\n\r\n    if (error) {\r\n        return <ErrorDisplay error={error} title=\"Error fetching tags\" />;\r\n    }\r\n\r\n    const handleModalClose = () => {\r\n        setSelectedTag(null);\r\n        setIsCreating(false);\r\n        refetch();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"mb-4 align-items-center\">\r\n                <Col>\r\n                    <h1 className=\"mb-0\">Tag Management</h1>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                    <Button color=\"primary\" onClick={() => setIsCreating(true)}>\r\n                        <Plus size={18} className=\"me-1\" />\r\n                        Create Tag\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n\r\n            <CreateTagModal\r\n                isOpen={isCreating}\r\n                toggle={() => setIsCreating(false)}\r\n                onTagCreated={handleModalClose}\r\n            />\r\n\r\n            {selectedTag && (\r\n                <EditTagModal\r\n                    tag={selectedTag}\r\n                    isOpen={selectedTag !== null}\r\n                    toggle={() => setSelectedTag(null)}\r\n                    onTagUpdated={handleModalClose}\r\n                />\r\n            )}\r\n\r\n            <Card>\r\n                <CardBody>\r\n                    <Table responsive hover>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Tag Preview</th>\r\n                                <th>Name</th>\r\n                                <th>Status</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {tags?.map(tag => (\r\n                                <tr key={tag.id}>\r\n                                    <td>\r\n                                        <DisplayTag tag={tag} />\r\n                                    </td>\r\n                                    <td>\r\n                                        <span className=\"fw-medium\">{tag.name}</span>\r\n                                    </td>\r\n                                    <td>\r\n                                        <span className={`badge ${tag.isActive ? 'bg-success' : 'bg-secondary'}`}>\r\n                                            {tag.isActive ? 'Active' : 'Inactive'}\r\n                                        </span>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div className=\"d-flex gap-2\">\r\n                                            <Button\r\n                                                size=\"sm\"\r\n                                                color=\"primary\"\r\n                                                outline\r\n                                                onClick={() => setSelectedTag(tag)}\r\n                                            >\r\n                                                <Edit size={14} className=\"me-1\" />\r\n                                                Edit\r\n                                            </Button>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                    \r\n                    {(!tags || tags.length === 0) && (\r\n                        <div className=\"text-center py-5 text-muted\">\r\n                            <div className=\"mb-3\">\r\n                                <Plus size={48} className=\"text-muted\" />\r\n                            </div>\r\n                            <h5>No tags found</h5>\r\n                            <p>Create your first tag to get started with organizing your projects.</p>\r\n                            <Button color=\"primary\" onClick={() => setIsCreating(true)}>\r\n                                <Plus size={18} className=\"me-1\" />\r\n                                Create Your First Tag\r\n                            </Button>\r\n                        </div>\r\n                    )}\r\n                </CardBody>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TagManagementPage;"],"names":["useCreateTag","authenticatedFetch","useCreateAuthenticatedFetch","useMutation","request","response","baseUrl","handleResponse","CreateTagModal","isOpen","toggle","onTagCreated","name","setName","useState","colour","setColour","TAG_DEFAULTS","icon","setIcon","createTagMutation","handleCreateTag","finalizedName","finalizeTagName","toast","previewTag","useMemo","jsxs","Modal","jsx","ModalHeader","ModalBody","FormGroup","Label","DisplayTag","Input","e","normalizedName","normalizeTagInput","PREDEFINED_COLOURS","color","PREDEFINED_ICONS","iconOption","IconComp","ErrorDisplay","ModalFooter","Button","useUpdateTag","options","data","EditTagModal","tag","onTagUpdated","isActive","setIsActive","updateTagMutation","useEffect","handleUpdateTag","TagManagementPage","isCreating","setIsCreating","selectedTag","setSelectedTag","tags","error","isLoading","refetch","useGetTags","Spinner","handleModalClose","Fragment","Row","Col","Plus","Card","CardBody","Table","Edit"],"mappings":"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"}