{"version":3,"file":"UserRegistrationSocialPage-BRX5e1zG.js","sources":["../../src/api/auth/useUserRegistrationSocial.ts","../../src/components/social_logins/UserRegistrationSocialPage.tsx"],"sourcesContent":["import {\r\n    useMutation,\r\n    UseMutationOptions,\r\n    UseMutationResult\r\n} from '@tanstack/react-query';\r\nimport {UserRegistrationSocialCommand, AuthResult} from '../../types';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport baseUrl from '../baseUrl';\r\nimport {handleResponse} from '../handleResponse';\r\n\r\nconst useUserRegistrationSocial = (\r\n    options?: UseMutationOptions<\r\n        AuthResult,\r\n        Error,\r\n        UserRegistrationSocialCommand\r\n    >\r\n): UseMutationResult<AuthResult, Error, UserRegistrationSocialCommand> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    return useMutation({\r\n        mutationFn: async (command: UserRegistrationSocialCommand) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/auth/user-registration-social`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify(command)\r\n                }\r\n            );\r\n            return handleResponse(response);\r\n        },\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useUserRegistrationSocial;\r\n","import React, {useState} from 'react';\r\nimport {useNavigate, useLocation} from 'react-router-dom';\r\nimport {Form, FormGroup, Label, Input, Button} from 'reactstrap';\r\nimport {\r\n    UserRegistrationSocialCommand,\r\n    LoginProvider,\r\n    AuthResult\r\n} from '../../types';\r\nimport useUserRegistrationSocial from '../../api/auth/useUserRegistrationSocial';\r\nimport {useAuthStateManager} from '../../hooks/useAuthStateManager';\r\nimport FormContainer from '../utility/FormContainer';\r\nimport CheckFromEmailSpamJunkWarning from '../utility/CheckFromEmailSpamJunkWarning';\r\nimport {toast} from 'react-toastify';\r\nimport ErrorDisplay from '../utility/ErrorDisplay';\r\nimport unknownErrorToString from '../../lib/unknownErrorToString';\r\n\r\nconst UserRegistrationSocialPage: React.FC = () => {\r\n    const {getSignInRedirect, onAuthenticated, redirectOnAuthenticated} =\r\n        useAuthStateManager();\r\n    const navigate = useNavigate();\r\n    const {state} = useLocation();\r\n    const [apiError, setApiError] = useState<unknown>(null);\r\n    const browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n\r\n    const {provider, token, firstName, lastName, email} = state as {\r\n        provider: LoginProvider;\r\n        token: string;\r\n        firstName?: string;\r\n        lastName?: string;\r\n        email?: string;\r\n    };\r\n\r\n    const [userRegistration, setUserRegistration] =\r\n        useState<UserRegistrationSocialCommand>({\r\n            firstName: firstName || '',\r\n            lastName: lastName || '',\r\n            email: email || '',\r\n            provider,\r\n            token,\r\n            timeZone: browserTimeZone,\r\n            redir: getSignInRedirect()\r\n        });\r\n\r\n    const mutation = useUserRegistrationSocial();\r\n\r\n    if (!provider || !token) {\r\n        navigate('/');\r\n        return null;\r\n    }\r\n\r\n    const onSubmitSuccess = (responseData: AuthResult) => {\r\n        if (\r\n            responseData.authTokens &&\r\n            responseData.authTokens.access_token &&\r\n            responseData.authTokens.refresh_token\r\n        ) {\r\n            onAuthenticated(responseData.authTokens);\r\n            toast.success('Account created.');\r\n            redirectOnAuthenticated();\r\n            return;\r\n        }\r\n\r\n        if (\r\n            responseData.authError &&\r\n            responseData.authError.error == 'unconfirmed_email'\r\n        ) {\r\n            if (responseData.authError.error == 'unconfirmed_email') {\r\n                toast.success(\r\n                    'Please check your email and follow the instructions to verify your account.'\r\n                );\r\n            } else {\r\n                toast.error(responseData.authError.error_description);\r\n            }\r\n        } else {\r\n            toast.error('We were unable to register your account.');\r\n        }\r\n\r\n        navigate('/login');\r\n    };\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        mutation.mutate(userRegistration, {\r\n            onSuccess: onSubmitSuccess,\r\n            onError: (error: unknown) => {\r\n                setApiError(unknownErrorToString(error));\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const {name, value} = event.target;\r\n        setUserRegistration(prev => ({...prev, [name]: value}));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-4\">Complete user registration</h1>\r\n\r\n            <FormContainer>\r\n                <Form onSubmit={handleSubmit}>\r\n                    <FormGroup>\r\n                        <Label for=\"email\">Email</Label>\r\n                        <Input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            id=\"email\"\r\n                            value={userRegistration.email}\r\n                            onChange={handleInputChange}\r\n                            required\r\n                            readOnly={!!email}\r\n                        />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"firstName\">First Name</Label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"firstName\"\r\n                            id=\"firstName\"\r\n                            value={userRegistration.firstName}\r\n                            onChange={handleInputChange}\r\n                            required\r\n                        />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"lastName\">Last Name</Label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"lastName\"\r\n                            id=\"lastName\"\r\n                            value={userRegistration.lastName}\r\n                            onChange={handleInputChange}\r\n                            required\r\n                        />\r\n                    </FormGroup>\r\n                    <ErrorDisplay error={apiError} />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        disabled={mutation.isPending}\r\n                    >\r\n                        {mutation.isPending ? 'Submitting...' : 'Submit'}\r\n                    </Button>\r\n                </Form>\r\n                <CheckFromEmailSpamJunkWarning text=\"Please check your email and follow the instructions to verify your account.\" />\r\n            </FormContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UserRegistrationSocialPage;\r\n"],"names":["useUserRegistrationSocial","options","authenticatedFetch","useCreateAuthenticatedFetch","useMutation","command","response","baseUrl","handleResponse","UserRegistrationSocialPage","getSignInRedirect","onAuthenticated","redirectOnAuthenticated","useAuthStateManager","navigate","useNavigate","state","useLocation","apiError","setApiError","useState","browserTimeZone","provider","token","firstName","lastName","email","userRegistration","setUserRegistration","mutation","onSubmitSuccess","responseData","toast","handleSubmit","event","error","unknownErrorToString","handleInputChange","name","value","prev","jsxs","Fragment","jsx","FormContainer","Form","FormGroup","Label","Input","ErrorDisplay","Button","CheckFromEmailSpamJunkWarning"],"mappings":"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"}