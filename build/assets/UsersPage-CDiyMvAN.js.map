{"version":3,"file":"UsersPage-CDiyMvAN.js","sources":["../../src/api/auth/useSendEmailConfirmationEmail.ts","../../src/api/sys/useUpdateUser.ts","../../src/components/sysadmin/users/UserModal.tsx","../../src/components/sysadmin/users/CreateUserModal.tsx","../../src/api/sys/useGetPagedUsers.ts","../../src/lib/strings.ts","../../src/components/sysadmin/users/UsersPage.tsx"],"sourcesContent":["import {SendEmailConfirmationEmailCommand, EmptyResult} from '../../types';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport baseUrl from '../baseUrl';\r\nimport {handleResponse} from '../handleResponse';\r\nimport {\r\n    useMutation,\r\n    UseMutationResult,\r\n    UseMutationOptions\r\n} from '@tanstack/react-query';\r\n\r\nconst useSendEmailConfirmationEmail = (\r\n    options?: UseMutationOptions<\r\n        EmptyResult,\r\n        Error,\r\n        SendEmailConfirmationEmailCommand\r\n    >\r\n): UseMutationResult<EmptyResult, Error, SendEmailConfirmationEmailCommand> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    return useMutation({\r\n        mutationFn: async (command: SendEmailConfirmationEmailCommand) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/auth/send-email-confirmation-email`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify(command)\r\n                }\r\n            );\r\n            return handleResponse(response);\r\n        },\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useSendEmailConfirmationEmail;\r\n","import {UpdateUserModel, EmptyResult} from '../../types';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport baseUrl from '../baseUrl';\r\nimport {handleResponse} from '../handleResponse';\r\nimport {\r\n    useMutation,\r\n    UseMutationResult,\r\n    UseMutationOptions\r\n} from '@tanstack/react-query';\r\n\r\nconst useUpdateUser = (\r\n    options?: UseMutationOptions<EmptyResult, Error, UpdateUserModel>\r\n): UseMutationResult<EmptyResult, Error, UpdateUserModel> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    return useMutation({\r\n        mutationFn: async (command: UpdateUserModel) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/sys/update-user`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify(command)\r\n                }\r\n            );\r\n            return handleResponse(response);\r\n        },\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useUpdateUser;\r\n","import {useState} from 'react';\r\nimport {\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Button,\r\n    Input,\r\n    Label,\r\n    FormGroup,\r\n    FormText\r\n} from 'reactstrap';\r\nimport RoleNames from '../../../lib/RoleNames.ts';\r\nimport CheckboxList from '../../utility/CheckboxList.tsx';\r\nimport ErrorDisplay from '../../utility/ErrorDisplay.tsx';\r\nimport {UserInfoModel} from '../../../types.ts';\r\nimport {toast} from 'react-toastify';\r\nimport useSendEmailConfirmationEmail from '../../../api/auth/useSendEmailConfirmationEmail.ts';\r\nimport useUpdateUser from '../../../api/sys/useUpdateUser.ts';\r\n\r\nconst SendEmailConfirmationEmail = ({user}: {user: UserInfoModel}) => {\r\n    const {mutate, isPending, error} = useSendEmailConfirmationEmail({\r\n        onSuccess: () => {\r\n            toast.success('Email was sent');\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <ErrorDisplay\r\n                error={error}\r\n                title=\"Error sending email confirmation email\"\r\n                onDismiss={() => {}}\r\n            />\r\n            <Button\r\n                onClick={() => mutate({userId: user.id})}\r\n                disabled={isPending}\r\n            >\r\n                Resend confirmation email\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype UserModalProps = {\r\n    user: UserInfoModel;\r\n    setUser: (user: UserInfoModel | null) => void;\r\n    onUserWasUpdated: () => void;\r\n};\r\n\r\nconst UserModal = ({user, setUser, onUserWasUpdated}: UserModalProps) => {\r\n    const [roles, setRoles] = useState<string[]>(user.roles);\r\n    const [rolesChanged, setRolesChanged] = useState<boolean>(false);\r\n    const [firstName, setFirstName] = useState<string>(user.firstName);\r\n    const [lastName, setLastName] = useState<string>(user.lastName);\r\n    const [email, setEmail] = useState<string>(user.email);\r\n    const [password, setPassword] = useState<string>('');\r\n    const [emailConfirmed, setEmailConfirmed] = useState<boolean | null>(null);\r\n    const [isActive, setIsActive] = useState<boolean | null>(null);\r\n    const [userWasUpdated, setUserWasUpdated] = useState<boolean>(false);\r\n\r\n    const {mutate, isPending, error} = useUpdateUser({\r\n        onSuccess: () => {\r\n            setUserWasUpdated(true);\r\n            toast.success('User was updated');\r\n        }\r\n    });\r\n\r\n    const onClose = () => {\r\n        setUser(null);\r\n        if (userWasUpdated) {\r\n            onUserWasUpdated();\r\n        }\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        mutate({\r\n            userId: user.id,\r\n            emailConfirmed: emailConfirmed !== null ? emailConfirmed : null,\r\n            userRoleNames: rolesChanged ? roles : null,\r\n            firstName: firstName !== user.firstName ? firstName : null,\r\n            lastName: lastName !== user.lastName ? lastName : null,\r\n            email: email !== user.email ? email : null,\r\n            password: password ? password : null,\r\n            isActive: isActive !== null ? isActive : null\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Modal isOpen={true} toggle={onClose} size=\"lg\">\r\n            <ModalHeader toggle={onClose}>{user.email}</ModalHeader>\r\n            <ModalBody>\r\n                <FormGroup>\r\n                    <Label for=\"firstName\">First Name</Label>\r\n                    <Input\r\n                        id=\"firstName\"\r\n                        type=\"text\"\r\n                        value={firstName}\r\n                        onChange={e => setFirstName(e.target.value)}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"lastName\">Last Name</Label>\r\n                    <Input\r\n                        id=\"lastName\"\r\n                        type=\"text\"\r\n                        value={lastName}\r\n                        onChange={e => setLastName(e.target.value)}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"email\">Email</Label>\r\n                    <Input\r\n                        id=\"email\"\r\n                        type=\"email\"\r\n                        value={email}\r\n                        onChange={e => setEmail(e.target.value)}\r\n                        readOnly={user.emailConfirmed}\r\n                        disabled={user.emailConfirmed}\r\n                    />\r\n                    {user.emailConfirmed && (\r\n                        <small className=\"text-muted\">\r\n                            Email is confirmed\r\n                        </small>\r\n                    )}\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"password\">Password</Label>\r\n                    <Input\r\n                        id=\"password\"\r\n                        type=\"password\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)}\r\n                    />\r\n                    <FormText className=\"text-muted small\">\r\n                        Leave blank to keep current password\r\n                    </FormText>\r\n                </FormGroup>\r\n                <FormGroup check className=\"mb-3\">\r\n                    <Label check>\r\n                        <Input\r\n                            type=\"checkbox\"\r\n                            checked={isActive !== null ? isActive : user.isActive}\r\n                            onChange={e => setIsActive(e.target.checked)}\r\n                        />{' '}\r\n                        Active\r\n                    </Label>\r\n                </FormGroup>\r\n\r\n                {!user.emailConfirmed && (\r\n                    <>\r\n                        <FormGroup check>\r\n                            <Label check>\r\n                                <Input\r\n                                    type=\"checkbox\"\r\n                                    checked={emailConfirmed !== null ? emailConfirmed : user.emailConfirmed}\r\n                                    onChange={e =>\r\n                                        setEmailConfirmed(e.target.checked)\r\n                                    }\r\n                                />{' '}\r\n                                Confirm email\r\n                            </Label>\r\n                        </FormGroup>\r\n                        <SendEmailConfirmationEmail user={user} />\r\n                    </>\r\n                )}\r\n                <FormGroup>\r\n                    <Label>Roles</Label>\r\n                    <CheckboxList\r\n                        options={RoleNames.BaseRoles}\r\n                        label={option => option}\r\n                        selectedItems={roles}\r\n                        setSelectedItems={(newRoles) => {\r\n                            setRoles(newRoles);\r\n                            setRolesChanged(true);\r\n                        }}\r\n                    />\r\n                </FormGroup>\r\n                <ErrorDisplay error={error} />\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color=\"secondary\" onClick={onClose}>\r\n                    Close\r\n                </Button>{' '}\r\n                <Button\r\n                    color=\"primary\"\r\n                    onClick={handleSubmit}\r\n                    disabled={isPending}\r\n                >\r\n                    Update\r\n                </Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default UserModal;\r\n","import {useState} from 'react';\r\nimport {\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Button,\r\n    Input,\r\n    Label,\r\n    FormGroup,\r\n    FormText\r\n} from 'reactstrap';\r\nimport ErrorDisplay from '../../utility/ErrorDisplay.tsx';\r\nimport {UserRegistrationBuiltInCommand} from '../../../types.ts';\r\nimport {toast} from 'react-toastify';\r\nimport useUserRegistrationBuiltIn from '../../../api/auth/useUserRegistrationBuiltIn.ts';\r\n\r\ntype CreateUserModalProps = {\r\n    onClose: () => void;\r\n    onUserWasCreated: () => void;\r\n};\r\n\r\nconst CreateUserModal = ({onClose, onUserWasCreated}: CreateUserModalProps) => {\r\n    const [firstName, setFirstName] = useState<string>('');\r\n    const [lastName, setLastName] = useState<string>('');\r\n    const [email, setEmail] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n\r\n    const {mutate, isPending, error} = useUserRegistrationBuiltIn({\r\n        onSuccess: () => {\r\n            toast.success('User was created successfully');\r\n            onUserWasCreated();\r\n            onClose();\r\n        }\r\n    });\r\n\r\n    const handleSubmit = () => {\r\n        const userData: UserRegistrationBuiltInCommand = {\r\n            firstName,\r\n            lastName,\r\n            email,\r\n            password,\r\n            timeZone: browserTimeZone,\r\n            redir: null\r\n        };\r\n        mutate(userData);\r\n    };\r\n\r\n    return (\r\n        <Modal isOpen={true} toggle={onClose} size=\"lg\">\r\n            <ModalHeader toggle={onClose}>Create New User</ModalHeader>\r\n            <ModalBody>\r\n                <FormGroup>\r\n                    <Label for=\"firstName\">First Name</Label>\r\n                    <Input\r\n                        id=\"firstName\"\r\n                        type=\"text\"\r\n                        value={firstName}\r\n                        onChange={e => setFirstName(e.target.value)}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"lastName\">Last Name</Label>\r\n                    <Input\r\n                        id=\"lastName\"\r\n                        type=\"text\"\r\n                        value={lastName}\r\n                        onChange={e => setLastName(e.target.value)}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"email\">Email</Label>\r\n                    <Input\r\n                        id=\"email\"\r\n                        type=\"email\"\r\n                        value={email}\r\n                        onChange={e => setEmail(e.target.value)}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"password\">Password</Label>\r\n                    <Input\r\n                        id=\"password\"\r\n                        type=\"password\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <FormText className=\"text-muted small\">\r\n                        Note: Roles will be assigned after user creation\r\n                    </FormText>\r\n                </FormGroup>\r\n                <ErrorDisplay error={error} />\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color=\"secondary\" onClick={onClose}>\r\n                    Cancel\r\n                </Button>{' '}\r\n                <Button\r\n                    color=\"primary\"\r\n                    onClick={handleSubmit}\r\n                    disabled={isPending}\r\n                >\r\n                    Create\r\n                </Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default CreateUserModal;\r\n","import {PagedResult, UserInfoModel} from '../../types';\r\nimport {UseQueryOptions, UseQueryResult, useQuery} from '@tanstack/react-query';\r\nimport baseUrl from '../baseUrl';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport {handleResponse} from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\n\r\ntype PagedUserQueryOptions = Omit<\r\n    UseQueryOptions<\r\n        PagedResult<UserInfoModel>,\r\n        Error | ProblemDetailsError,\r\n        PagedResult<UserInfoModel>,\r\n        readonly unknown[]\r\n    >,\r\n    'queryKey' | 'queryFn'\r\n>;\r\n\r\nconst useGetPagedUsers = (\r\n    page: number,\r\n    perPage: number,\r\n    search?: string,\r\n    status?: string,\r\n    options?: PagedUserQueryOptions\r\n): UseQueryResult<PagedResult<UserInfoModel>, Error> => {\r\n    const queryParams = new URLSearchParams();\r\n    queryParams.append('page', String(page));\r\n    queryParams.append('perPage', String(perPage));\r\n\r\n    if (search) {\r\n        queryParams.append('search', search);\r\n    }\r\n    if (status) {\r\n        queryParams.append('status', status);\r\n    }\r\n\r\n    const url = `${baseUrl}/api/sys/paged-users?${queryParams.toString()}`;\r\n    const queryKey = ['users', {page, perPage, search, status}];\r\n\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    const queryFn = async (): Promise<PagedResult<UserInfoModel>> => {\r\n        const response = await authenticatedFetch(url);\r\n        return handleResponse(response);\r\n    };\r\n\r\n    return useQuery({\r\n        queryKey,\r\n        queryFn,\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useGetPagedUsers;\r\n","export const capitalize = (str: string) =>\r\n    str.charAt(0).toUpperCase() + str.slice(1);\r\n\r\nexport const toKebabCase = (str: string) =>\r\n    (\r\n        str.match(\r\n            /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\r\n        ) || []\r\n    )\r\n        .map(x => x.toLowerCase())\r\n        .join('-');\r\n\r\nexport function breakToWords(str: string) {\r\n    return capitalize(toKebabCase(str).replace(/-/g, ' '));\r\n}\r\n\r\nexport function isNullsy(value: unknown): boolean {\r\n    return value === undefined || value === null || Number.isNaN(value);\r\n}\r\n\r\nexport function nullsyValueToEmptyString<T>(value: T): string | T {\r\n    if (isNullsy(value)) {\r\n        return '';\r\n    }\r\n    return value;\r\n}\r\n\r\nexport function asString(v: unknown): string {\r\n    return isNullsy(v) ? '' : String(v);\r\n}\r\n","import {useState} from 'react';\r\nimport {Table, Button, Row, Col} from 'reactstrap';\r\nimport {MousePointerClick, UserPlus} from 'lucide-react';\r\nimport Spinner from '../../utility/Spinner.tsx';\r\nimport ErrorDisplay from '../../utility/ErrorDisplay.tsx';\r\nimport Pagination, {getRowsPerPage} from '../../utility/Pagination.tsx';\r\nimport Search from '../../utility/Search.tsx';\r\nimport UserModal from './UserModal.tsx';\r\nimport CreateUserModal from './CreateUserModal.tsx';\r\nimport {LoginProvider, UserInfoModel} from '../../../types.ts';\r\nimport {useAuthStateManager} from '../../../hooks/useAuthStateManager.tsx';\r\nimport useGetPagedUsers from '../../../api/sys/useGetPagedUsers.ts';\r\nimport {breakToWords} from '../../../lib/strings.ts';\r\n\r\nconst UsersPage = () => {\r\n    const authStateManager = useAuthStateManager();\r\n    const [page, setPage] = useState(1);\r\n    const [perPage, setPerPage] = useState(getRowsPerPage());\r\n    const [search, setSearch] = useState('');\r\n    const [selectedUser, setSelectedUser] = useState<UserInfoModel | null>(\r\n        null\r\n    );\r\n    const [isCreatingUser, setIsCreatingUser] = useState<boolean>(false);\r\n\r\n    const onPerPageSelected = (perPage: number) => {\r\n        setPage(1);\r\n        setPerPage(perPage);\r\n    };\r\n\r\n    const {\r\n        data: pagedResult,\r\n        error: apiError,\r\n        isLoading: awaitingResponse,\r\n        refetch: fetchUsers\r\n    } = useGetPagedUsers(page, perPage, search, status?.toString(), {\r\n        enabled: authStateManager.isAuthenticated\r\n    });\r\n\r\n    const selectItem = (item: UserInfoModel) => {\r\n        setSelectedUser(item);\r\n    };\r\n\r\n    if (awaitingResponse) {\r\n        return <Spinner />;\r\n    }\r\n\r\n    if (apiError) {\r\n        return (\r\n            <ErrorDisplay\r\n                error={apiError}\r\n                title=\"Unable to fetch users\"\r\n                onDismiss={() => fetchUsers()}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"mb-4 align-items-center\">\r\n                <Col>\r\n                    <h1 className=\"mb-0\">Users</h1>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                    <Button\r\n                        color=\"primary\"\r\n                        onClick={() => setIsCreatingUser(true)}\r\n                    >\r\n                        <UserPlus size={18} className=\"me-1\" />\r\n                        Create User\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n\r\n            {selectedUser && (\r\n                <UserModal\r\n                    user={selectedUser}\r\n                    setUser={setSelectedUser}\r\n                    onUserWasUpdated={() => fetchUsers()}\r\n                />\r\n            )}\r\n\r\n            {isCreatingUser && (\r\n                <CreateUserModal\r\n                    onClose={() => setIsCreatingUser(false)}\r\n                    onUserWasCreated={() => fetchUsers()}\r\n                />\r\n            )}\r\n\r\n            {pagedResult && (\r\n                <>\r\n                    <Search searchText={search} onSearch={setSearch} />\r\n\r\n                    <Table responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>Email</th>\r\n                                <th>Email confirmed</th>\r\n                                <th>Registered</th>\r\n                                <th>Roles</th>\r\n                                <th>Login Providers</th>\r\n                                <th>Customer Info</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {pagedResult.items.map(item => (\r\n                                <tr\r\n                                    key={item.id}\r\n                                    className={\r\n                                        !item.isActive ? 'table-secondary' : ''\r\n                                    }\r\n                                >\r\n                                    <td>\r\n                                        {item.firstName} {item.lastName}\r\n                                    </td>\r\n                                    <td>{item.email}</td>\r\n                                    <td>\r\n                                        {item.emailConfirmed ? 'YES' : 'NO'}\r\n                                    </td>\r\n                                    <td>{item.registered ? 'YES' : 'NO'}</td>\r\n                                    <td>{item.roles.join(', ')}</td>\r\n                                    <td>\r\n                                        {item.loginProviders\r\n                                            .map(p =>\r\n                                                breakToWords(LoginProvider[p])\r\n                                            )\r\n                                            .join(', ')}\r\n                                    </td>\r\n                                    <td>\r\n                                        {item.customers\r\n                                            .map(c => c.name)\r\n                                            .join(', ')}\r\n                                    </td>\r\n                                    <td>\r\n                                        <div className=\"d-flex justify-content-end\">\r\n                                            <Button\r\n                                                outline\r\n                                                className=\"float-end\"\r\n                                                onClick={() => selectItem(item)}\r\n                                            >\r\n                                                <MousePointerClick />\r\n                                            </Button>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n\r\n                    <Pagination\r\n                        pagedResult={pagedResult}\r\n                        onPageSelected={setPage}\r\n                        perPage={perPage}\r\n                        onPerPageSelected={onPerPageSelected}\r\n                    />\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UsersPage;\r\n"],"names":["useSendEmailConfirmationEmail","options","authenticatedFetch","useCreateAuthenticatedFetch","useMutation","command","response","baseUrl","handleResponse","useUpdateUser","SendEmailConfirmationEmail","user","mutate","isPending","error","toast","jsx","ErrorDisplay","Button","UserModal","setUser","onUserWasUpdated","roles","setRoles","useState","rolesChanged","setRolesChanged","firstName","setFirstName","lastName","setLastName","email","setEmail","password","setPassword","emailConfirmed","setEmailConfirmed","isActive","setIsActive","userWasUpdated","setUserWasUpdated","onClose","handleSubmit","Modal","ModalHeader","ModalBody","jsxs","FormGroup","Label","Input","e","FormText","Fragment","CheckboxList","RoleNames","option","newRoles","ModalFooter","CreateUserModal","onUserWasCreated","browserTimeZone","useUserRegistrationBuiltIn","useGetPagedUsers","page","perPage","search","status","queryParams","url","queryKey","useQuery","capitalize","str","toKebabCase","x","breakToWords","UsersPage","authStateManager","useAuthStateManager","setPage","setPerPage","getRowsPerPage","setSearch","selectedUser","setSelectedUser","isCreatingUser","setIsCreatingUser","onPerPageSelected","pagedResult","apiError","awaitingResponse","fetchUsers","selectItem","item","Spinner","Row","Col","UserPlus","Search","Table","p","LoginProvider","c","MousePointerClick","Pagination"],"mappings":"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"}