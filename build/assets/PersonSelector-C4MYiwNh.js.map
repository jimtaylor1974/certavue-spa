{"version":3,"file":"PersonSelector-C4MYiwNh.js","sources":["../../src/api/people/useFetchPeopleDetails.ts","../../src/components/utility/PersonSelector.tsx"],"sourcesContent":["import {\r\n    useMutation,\r\n    UseMutationOptions,\r\n    UseMutationResult\r\n} from '@tanstack/react-query';\r\nimport baseUrl from '../baseUrl';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport {handleResponse} from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\nimport {PersonInfo} from './models';\r\n\r\nexport interface FetchPeopleDetailsRequest {\r\n    personIds: string[];\r\n}\r\n\r\ntype FetchPeopleDetailsResponse = PersonInfo[];\r\n\r\ntype UseFetchPeopleDetailsOptions = UseMutationOptions<\r\n    FetchPeopleDetailsResponse,\r\n    Error | ProblemDetailsError,\r\n    FetchPeopleDetailsRequest\r\n>;\r\n\r\nconst useFetchPeopleDetails = (\r\n    options?: UseFetchPeopleDetailsOptions\r\n): UseMutationResult<\r\n    FetchPeopleDetailsResponse,\r\n    Error | ProblemDetailsError,\r\n    FetchPeopleDetailsRequest\r\n> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    return useMutation({\r\n        mutationFn: async (data: FetchPeopleDetailsRequest) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/persons/details`,\r\n                {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(data),\r\n                    headers: {'Content-Type': 'application/json'}\r\n                }\r\n            );\r\n            return handleResponse<FetchPeopleDetailsResponse>(response);\r\n        },\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useFetchPeopleDetails;\r\n","import React, {useState, useEffect} from 'react';\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Badge,\r\n    Input\r\n} from 'reactstrap';\r\nimport {UserPlus} from 'lucide-react';\r\nimport useGetPagedPersons from '../../api/people/useGetPagedPersons';\r\nimport {PersonInfo} from '../../api/people/models';\r\nimport useFetchPeopleDetails from '../../api/people/useFetchPeopleDetails';\r\nimport Pagination from './Pagination';\r\nimport SearchComponent from './Search';\r\nimport ProblemDetailsError from '../../api/ProblemDetailsError';\r\nimport ErrorDisplay from './ErrorDisplay';\r\n\r\nexport interface PersonSelectorProps {\r\n    selectedPersonIds: string[];\r\n    onPersonSelectionChange: (personIds: string[]) => void;\r\n    label?: string;\r\n    placeholder?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\nconst PersonSelector: React.FC<PersonSelectorProps> = ({\r\n    selectedPersonIds,\r\n    onPersonSelectionChange,\r\n    label = 'People',\r\n    placeholder = 'Select people...',\r\n    disabled = false\r\n}) => {\r\n    // State for the selection modal\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [selectedPeople, setSelectedPeople] = useState<PersonInfo[]>([]);\r\n    const [error, setError] = useState<Error | ProblemDetailsError | null>(\r\n        null\r\n    );\r\n    const fetchPeopleDetails = useFetchPeopleDetails();\r\n\r\n    // State for pagination and search\r\n    const [page, setPage] = useState(1);\r\n    const [perPage, setPerPage] = useState(10);\r\n    const [searchText, setSearchText] = useState<string | null>(null);\r\n\r\n    // Fetch people with pagination and search\r\n    const {data: pagedPeople, isLoading} = useGetPagedPersons(\r\n        page,\r\n        perPage,\r\n        searchText\r\n    );\r\n\r\n    // Fetch selected people details\r\n    useEffect(() => {\r\n        if (selectedPersonIds.length === 0) {\r\n            setSelectedPeople([]);\r\n            return;\r\n        }\r\n\r\n        fetchPeopleDetails.mutate(\r\n            {personIds: selectedPersonIds},\r\n            {\r\n                onSuccess: people => {\r\n                    setSelectedPeople(people);\r\n                },\r\n                onError: setError\r\n            }\r\n        );\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [selectedPersonIds]);\r\n\r\n    // Toggle modal\r\n    const toggleModal = () => {\r\n        if (!isModalOpen) {\r\n            setPage(1);\r\n            setSearchText(null);\r\n        }\r\n\r\n        setIsModalOpen(!isModalOpen);\r\n    };\r\n\r\n    // Handle search\r\n    const handleSearch = (text: string) => {\r\n        setSearchText(text || null);\r\n        setPage(1); // Reset to first page on search\r\n    };\r\n\r\n    // Handle person selection in modal\r\n    const togglePersonSelection = (personId: string) => {\r\n        let newSelectedIds: string[];\r\n\r\n        if (selectedPersonIds.includes(personId)) {\r\n            newSelectedIds = selectedPersonIds.filter(id => id !== personId);\r\n        } else {\r\n            newSelectedIds = [...selectedPersonIds, personId];\r\n        }\r\n\r\n        onPersonSelectionChange(newSelectedIds);\r\n    };\r\n\r\n    // Remove a person from selection\r\n    const removePerson = (personId: string) => {\r\n        const newSelectedIds = selectedPersonIds.filter(id => id !== personId);\r\n        onPersonSelectionChange(newSelectedIds);\r\n    };\r\n\r\n    if (error) {\r\n        return <ErrorDisplay error={error} />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"mb-3\">\r\n            {label && <label className=\"form-label\">{label}</label>}\r\n\r\n            {/* Display selected people */}\r\n            <div className=\"mb-2\">\r\n                {selectedPeople.length > 0 ? (\r\n                    <div className=\"d-flex flex-wrap gap-2\">\r\n                        {selectedPeople.map(person => (\r\n                            <Badge\r\n                                key={person.id}\r\n                                color=\"primary\"\r\n                                className=\"d-flex align-items-center p-2\"\r\n                            >\r\n                                <span className=\"me-2\">{`${person.firstName} ${person.lastName}`}</span>\r\n                                <Button\r\n                                    close\r\n                                    size=\"sm\"\r\n                                    onClick={() => removePerson(person.id)}\r\n                                    disabled={disabled}\r\n                                />\r\n                            </Badge>\r\n                        ))}\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"text-muted\">{placeholder}</div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Button to open selection modal */}\r\n            <Button\r\n                color=\"secondary\"\r\n                size=\"sm\"\r\n                onClick={toggleModal}\r\n                disabled={disabled}\r\n                className=\"d-flex align-items-center\"\r\n            >\r\n                <UserPlus size={16} className=\"me-1\" />\r\n                <span>Add People</span>\r\n            </Button>\r\n\r\n            {/* Selection Modal */}\r\n            <Modal isOpen={isModalOpen} toggle={toggleModal} size=\"lg\">\r\n                <ModalHeader toggle={toggleModal}>Select People</ModalHeader>\r\n                <ModalBody>\r\n                    {/* Search */}\r\n                    <div className=\"mb-3\">\r\n                        <SearchComponent\r\n                            searchText={searchText}\r\n                            onSearch={handleSearch}\r\n                        />\r\n                    </div>\r\n\r\n                    {/* People List */}\r\n                    <div className=\"mb-3\">\r\n                        {isLoading ? (\r\n                            <div className=\"text-center p-3\">Loading...</div>\r\n                        ) : pagedPeople?.items?.length ? (\r\n                            <ListGroup>\r\n                                {pagedPeople.items.map(person => (\r\n                                    <ListGroupItem\r\n                                        key={person.id}\r\n                                        action\r\n                                        active={selectedPersonIds.includes(\r\n                                            person.id\r\n                                        )}\r\n                                        onClick={() =>\r\n                                            togglePersonSelection(person.id)\r\n                                        }\r\n                                        className=\"d-flex justify-content-between align-items-center cursor-pointer\"\r\n                                    >\r\n                                        <div>\r\n                                            <div>{`${person.firstName} ${person.lastName}`}</div>\r\n                                            <small className=\"text-muted\">\r\n                                                {person.email}\r\n                                            </small>\r\n                                        </div>\r\n                                        <div>\r\n                                            <Input\r\n                                                type=\"checkbox\"\r\n                                                checked={selectedPersonIds.includes(\r\n                                                    person.id\r\n                                                )}\r\n                                                onChange={() => {}} // Handled by the ListGroupItem click\r\n                                                onClick={e =>\r\n                                                    e.stopPropagation()\r\n                                                }\r\n                                            />\r\n                                        </div>\r\n                                    </ListGroupItem>\r\n                                ))}\r\n                            </ListGroup>\r\n                        ) : (\r\n                            <div className=\"text-center p-3\">\r\n                                No people found\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Pagination */}\r\n                    {pagedPeople && (\r\n                        <Pagination\r\n                            pagedResult={pagedPeople}\r\n                            onPageSelected={setPage}\r\n                            perPage={perPage}\r\n                            onPerPageSelected={setPerPage}\r\n                        />\r\n                    )}\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"secondary\" onClick={toggleModal}>\r\n                        Close\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PersonSelector;\r\n"],"names":["useFetchPeopleDetails","options","authenticatedFetch","useCreateAuthenticatedFetch","useMutation","data","response","baseUrl","handleResponse","PersonSelector","selectedPersonIds","onPersonSelectionChange","label","placeholder","disabled","isModalOpen","setIsModalOpen","useState","selectedPeople","setSelectedPeople","error","setError","fetchPeopleDetails","page","setPage","perPage","setPerPage","searchText","setSearchText","pagedPeople","isLoading","useGetPagedPersons","useEffect","people","toggleModal","handleSearch","text","togglePersonSelection","personId","newSelectedIds","id","removePerson","jsx","ErrorDisplay","jsxs","person","Badge","Button","UserPlus","Modal","ModalHeader","ModalBody","SearchComponent","_a","ListGroup","ListGroupItem","Input","e","Pagination","ModalFooter"],"mappings":"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"}