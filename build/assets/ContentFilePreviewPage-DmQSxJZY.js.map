{"version":3,"file":"ContentFilePreviewPage-DmQSxJZY.js","sources":["../../src/components/sysadmin/contents/ContentFilePreviewPage.tsx"],"sourcesContent":["import React from 'react';\r\nimport {useParams, useNavigate} from 'react-router-dom';\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Spinner,\r\n    Alert,\r\n    Table\r\n} from 'reactstrap';\r\nimport {Download, ArrowLeft} from 'lucide-react';\r\nimport useListContentFiles from '../../../api/contents/useListContentFiles';\r\nimport {\r\n    getContentDownloadUrl,\r\n    getContentFileUrl\r\n} from '../../../api/contents/utility';\r\nimport {formatBytes, formatDate} from './formatters';\r\n\r\nconst ContentFilePreviewPage: React.FC = () => {\r\n    const {filePath} = useParams<{filePath: string}>();\r\n    const navigate = useNavigate();\r\n    const decodedPath = filePath ? decodeURIComponent(filePath) : '';\r\n\r\n    // Get the file info from the API\r\n    const {\r\n        data: contentFiles,\r\n        isLoading,\r\n        isError,\r\n        error\r\n    } = useListContentFiles(\r\n        decodedPath.substring(0, decodedPath.lastIndexOf('/'))\r\n    );\r\n\r\n    const fileInfo = contentFiles?.find(f => f.path === decodedPath);\r\n    const fileUrl = getContentFileUrl(decodedPath);\r\n    const downloadUrl = getContentDownloadUrl(decodedPath);\r\n\r\n    const goBack = () => {\r\n        navigate('/sysadmin/contents');\r\n    };\r\n\r\n    if (isLoading) {\r\n        return <Spinner color=\"primary\" />;\r\n    }\r\n\r\n    if (isError) {\r\n        return (\r\n            <Alert color=\"danger\">\r\n                Error loading file:{' '}\r\n                {error instanceof Error ? error.message : 'Unknown error'}\r\n            </Alert>\r\n        );\r\n    }\r\n\r\n    if (!fileInfo) {\r\n        return (\r\n            <Alert color=\"warning\">\r\n                File not found: {decodedPath}\r\n                <div className=\"mt-3\">\r\n                    <Button color=\"secondary\" onClick={goBack}>\r\n                        <ArrowLeft size={16} className=\"me-1\" /> Back to Files\r\n                    </Button>\r\n                </div>\r\n            </Alert>\r\n        );\r\n    }\r\n\r\n    // Determine if the file is an image\r\n    const isImage = fileInfo.contentType.startsWith('image/');\r\n    // Determine if the file is a PDF\r\n    const isPdf = fileInfo.contentType === 'application/pdf';\r\n    // Determine if the file is text-based (markdown, text, html, etc.)\r\n    const isTextBased = [\r\n        'text/plain',\r\n        'text/markdown',\r\n        'text/html',\r\n        'text/css',\r\n        'application/javascript',\r\n        'application/json'\r\n    ].includes(fileInfo.contentType);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                <h3>File: {fileInfo.name}</h3>\r\n                <div>\r\n                    <Button color=\"secondary\" className=\"me-2\" onClick={goBack}>\r\n                        <ArrowLeft size={16} className=\"me-1\" /> Back\r\n                    </Button>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        tag=\"a\"\r\n                        href={downloadUrl}\r\n                        target=\"_blank\"\r\n                    >\r\n                        <Download size={16} className=\"me-1\" /> Download\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n\r\n            <Card className=\"mb-4\">\r\n                <CardHeader>File Details</CardHeader>\r\n                <CardBody>\r\n                    <Table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <th style={{width: '150px'}}>Name</th>\r\n                                <td>{fileInfo.name}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>Path</th>\r\n                                <td>{fileInfo.path}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>Type</th>\r\n                                <td>{fileInfo.contentType}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>Size</th>\r\n                                <td>{formatBytes(fileInfo.size)}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>Last Modified</th>\r\n                                <td>\r\n                                    {formatDate(\r\n                                        new Date(fileInfo.lastModified)\r\n                                    )}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>URL</th>\r\n                                <td>\r\n                                    <a\r\n                                        href={fileUrl}\r\n                                        target=\"_blank\"\r\n                                        rel=\"noopener noreferrer\"\r\n                                    >\r\n                                        {fileUrl}\r\n                                    </a>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </Table>\r\n                </CardBody>\r\n            </Card>\r\n\r\n            <Card>\r\n                <CardHeader>Preview</CardHeader>\r\n                <CardBody>\r\n                    {isImage && (\r\n                        <div className=\"text-center\">\r\n                            <img\r\n                                src={fileUrl}\r\n                                alt={fileInfo.name}\r\n                                className=\"img-fluid\"\r\n                                style={{maxHeight: '500px'}}\r\n                            />\r\n                        </div>\r\n                    )}\r\n\r\n                    {isPdf && (\r\n                        <div className=\"text-center\">\r\n                            <object\r\n                                data={fileUrl}\r\n                                type=\"application/pdf\"\r\n                                width=\"100%\"\r\n                                height=\"600px\"\r\n                            >\r\n                                <p>\r\n                                    Your browser doesn't support embedded PDFs.\r\n                                    <a\r\n                                        href={fileUrl}\r\n                                        target=\"_blank\"\r\n                                        rel=\"noopener noreferrer\"\r\n                                    >\r\n                                        Click here to view the PDF\r\n                                    </a>\r\n                                </p>\r\n                            </object>\r\n                        </div>\r\n                    )}\r\n\r\n                    {isTextBased && (\r\n                        <div>\r\n                            <p>Text content preview:</p>\r\n                            <iframe\r\n                                src={fileUrl}\r\n                                title={fileInfo.name}\r\n                                width=\"100%\"\r\n                                height=\"400px\"\r\n                                style={{border: '1px solid #dee2e6'}}\r\n                            ></iframe>\r\n                        </div>\r\n                    )}\r\n\r\n                    {!isImage && !isPdf && !isTextBased && (\r\n                        <Alert color=\"info\">\r\n                            Preview not available for this file type. Please\r\n                            download the file to view its contents.\r\n                        </Alert>\r\n                    )}\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContentFilePreviewPage;\r\n"],"names":["ContentFilePreviewPage","filePath","useParams","navigate","useNavigate","decodedPath","contentFiles","isLoading","isError","error","useListContentFiles","fileInfo","f","fileUrl","getContentFileUrl","downloadUrl","getContentDownloadUrl","goBack","jsx","Spinner","jsxs","Alert","Button","ArrowLeft","isImage","isPdf","isTextBased","Download","Card","CardHeader","CardBody","Table","formatBytes","formatDate"],"mappings":"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"}