{"version":3,"file":"ProjectPage-DFpu2B2U.js","sources":["../../src/components/utility/WeekSelector.tsx","../../src/components/main/projects/ReasonForChangeModal.tsx","../../src/api/projects/useProjectMutations.ts","../../src/components/main/projects/ChangeProjectTimeZoneModal.tsx","../../src/components/main/projects/ProjectEdit.tsx","../../src/lib/convertCase.ts","../../src/lib/defaultPhaseColors.ts","../../src/components/utility/FieldError.tsx","../../src/api/projects/useBulkPhaseMutations.ts","../../src/api/projects/useDeletePhase.ts","../../src/components/main/projects/PhasesSection.tsx","../../src/components/utility/WeekDisplay.tsx","../../src/api/projectAllocations/useGetProjectAllocations.ts","../../src/api/projectAllocations/useDeleteProjectAllocation.ts","../../src/api/projects/useBulkUpdateAllocation.ts","../../src/components/main/projects/AllocationSection.tsx","../../src/components/main/projects/ProjectDisplay.tsx","../../src/components/main/projects/ProjectDetails.tsx","../../src/components/main/projects/ProjectPage.tsx"],"sourcesContent":["import React, {useMemo, useCallback} from 'react';\r\nimport {FormGroup, Label, Input, InputGroup, FormText} from 'reactstrap';\r\nimport {\r\n    getWeekInfo,\r\n    getMondayFromGlobalWeek,\r\n    addDays,\r\n    getMondayOfWeek,\r\n    getISOWeekYear\r\n} from '../../lib/scheduling';\r\nimport type {WeekInfo} from '../../lib/scheduling';\r\nimport {formatDate} from '../../lib/dateUtils.ts';\r\n\r\ninterface WeekSelectorProps {\r\n    value?: number | null; // Allow null and undefined globalWeekNumber\r\n    onChange: (globalWeekNumber: number, weekInfo: WeekInfo) => void;\r\n    label?: string;\r\n    // No min/max props needed here, parent should enforce this before passing value\r\n    className?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\nconst WeekSelector: React.FC<WeekSelectorProps> = ({\r\n    value,\r\n    onChange,\r\n    label = 'Week',\r\n    className = '',\r\n    disabled = false\r\n}) => {\r\n    // A safe utility to get week info from a value, always falling back to a sane default.\r\n    const getSafeInfo = useCallback((weekNumber?: number | null): WeekInfo => {\r\n        try {\r\n            // This now correctly handles null/undefined `value`\r\n            if (weekNumber && weekNumber > 0) {\r\n                return getWeekInfo(getMondayFromGlobalWeek(weekNumber));\r\n            }\r\n            // If value is missing or invalid, default to the current week.\r\n            return getWeekInfo(new Date());\r\n        } catch (e) {\r\n            // If the current week is somehow invalid (e.g., before epoch), default to week 1.\r\n            return getWeekInfo(getMondayFromGlobalWeek(1));\r\n        }\r\n    }, []);\r\n\r\n    // --- DERIVED STATE ---\r\n    // All displayed information is derived directly from the `value` prop.\r\n    // There is no internal state for the selected week.\r\n\r\n    const weekInfo = useMemo(() => getSafeInfo(value), [value, getSafeInfo]);\r\n    const displayYear = useMemo(\r\n        () => getISOWeekYear(weekInfo.mondayOfWeek),\r\n        [weekInfo]\r\n    );\r\n\r\n    // Memoized function to generate the list of weeks for the displayed year.\r\n    const getWeeksForYear = useCallback((year: number): WeekInfo[] => {\r\n        if (year < 2025) return [];\r\n        const weeks: WeekInfo[] = [];\r\n        try {\r\n            let currentMonday = getMondayOfWeek(new Date(year, 0, 4));\r\n            if (getISOWeekYear(currentMonday) < year) {\r\n                currentMonday = addDays(currentMonday, 7);\r\n            }\r\n\r\n            for (let i = 0; i < 54; i++) {\r\n                const isoYear = getISOWeekYear(currentMonday);\r\n                if (isoYear === year) {\r\n                    weeks.push(getWeekInfo(currentMonday));\r\n                } else if (isoYear > year) {\r\n                    break;\r\n                }\r\n                currentMonday = addDays(currentMonday, 7);\r\n            }\r\n        } catch (error) {\r\n            console.error(`Error generating weeks for year ${year}:`, error);\r\n        }\r\n        return weeks;\r\n    }, []);\r\n\r\n    const generatedWeeks = useMemo(\r\n        () => getWeeksForYear(displayYear),\r\n        [displayYear, getWeeksForYear]\r\n    );\r\n\r\n    // --- EVENT HANDLERS ---\r\n    // These functions ONLY calculate the desired new week and call `onChange`.\r\n\r\n    const handleYearChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const year = parseInt(e.target.value, 10);\r\n        if (!isNaN(year) && year >= 2025) {\r\n            const weeksOfNewYear = getWeeksForYear(year);\r\n            if (weeksOfNewYear.length > 0) {\r\n                const firstWeekInfo = weeksOfNewYear[0];\r\n                onChange(firstWeekInfo.globalWeekNumber, firstWeekInfo);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleWeekChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const newGlobalWeek = parseInt(e.target.value, 10);\r\n        if (!isNaN(newGlobalWeek)) {\r\n            const newWeekInfo = getSafeInfo(newGlobalWeek);\r\n            onChange(newGlobalWeek, newWeekInfo);\r\n        }\r\n    };\r\n\r\n    // The component now simply renders based on the props it receives.\r\n    return (\r\n        <FormGroup className={className}>\r\n            {label && (\r\n                <Label for=\"week-selector-year\" className=\"mb-1\">\r\n                    {label}\r\n                </Label>\r\n            )}\r\n            <InputGroup size=\"sm\">\r\n                <Input\r\n                    id=\"week-selector-year\"\r\n                    type=\"number\"\r\n                    value={displayYear}\r\n                    onChange={handleYearChange}\r\n                    disabled={disabled}\r\n                    min=\"2025\"\r\n                    style={{flex: '0 0 90px'}}\r\n                    aria-label=\"Year\"\r\n                />\r\n                <Input\r\n                    id=\"week-selector-week\"\r\n                    type=\"select\"\r\n                    // The select's value is the `value` prop, or an empty string if it's null/undefined.\r\n                    value={value || ''}\r\n                    onChange={handleWeekChange}\r\n                    disabled={disabled || generatedWeeks.length === 0}\r\n                    aria-label=\"Week\"\r\n                >\r\n                    {generatedWeeks.map(info => (\r\n                        <option\r\n                            key={info.globalWeekNumber}\r\n                            value={info.globalWeekNumber}\r\n                        >\r\n                            {`Week ${info.weekOfYear} (${formatDate(info.mondayOfWeek)})`}\r\n                        </option>\r\n                    ))}\r\n                </Input>\r\n            </InputGroup>\r\n            {weekInfo && (\r\n                <FormText>Mon, {formatDate(weekInfo.mondayOfWeek)}</FormText>\r\n            )}\r\n        </FormGroup>\r\n    );\r\n};\r\n\r\nexport default WeekSelector;\r\n","import React, {useState} from 'react';\r\nimport {\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Button,\r\n    Form,\r\n    FormGroup,\r\n    Input,\r\n    Alert\r\n} from 'reactstrap';\r\nimport {ProjectStatus} from '../../../types';\r\n\r\nexport interface ReasonForChangeModalProps {\r\n    isOpen: boolean;\r\n    onClose: () => void;\r\n    onSubmit: (reason: string) => void;\r\n    description: string;\r\n    isPending?: boolean;\r\n    projectStatus?: ProjectStatus;\r\n}\r\n\r\nconst ReasonForChangeModal: React.FC<ReasonForChangeModalProps> = ({\r\n    isOpen,\r\n    onClose,\r\n    onSubmit,\r\n    description,\r\n    isPending = false,\r\n    projectStatus\r\n}) => {\r\n    const [reason, setReason] = useState('');\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const isReasonRequired = projectStatus === ProjectStatus.Published;\r\n\r\n    const handleSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        setError(null);\r\n\r\n        const trimmedReason = reason.trim();\r\n\r\n        // Only validate reason if it's required (for published projects)\r\n        if (isReasonRequired) {\r\n            if (\r\n                !trimmedReason ||\r\n                trimmedReason.length < 5 ||\r\n                /^[.,]+$/.test(trimmedReason)\r\n            ) {\r\n                setError('Please provide a meaningful reason for this change');\r\n                return;\r\n            }\r\n        }\r\n\r\n        onSubmit(trimmedReason);\r\n        setReason('');\r\n        onClose();\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setReason('');\r\n        setError(null);\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} toggle={handleClose}>\r\n            <Form onSubmit={handleSubmit}>\r\n                <ModalHeader toggle={handleClose}>\r\n                    {isReasonRequired\r\n                        ? 'Reason for Change Required'\r\n                        : 'Confirm Action'}\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <p>\r\n                        You are about to: <strong>{description}</strong>\r\n                    </p>\r\n                    <p>\r\n                        {isReasonRequired\r\n                            ? 'Please provide a reason for this change:'\r\n                            : 'You may optionally provide a reason for this change:'}\r\n                    </p>\r\n\r\n                    {error && <Alert color=\"danger\">{error}</Alert>}\r\n\r\n                    <FormGroup>\r\n                        <Input\r\n                            id=\"changeReason\"\r\n                            type=\"textarea\"\r\n                            value={reason}\r\n                            onChange={e => setReason(e.target.value)}\r\n                            rows={3}\r\n                            disabled={isPending}\r\n                            required={isReasonRequired}\r\n                        />\r\n                    </FormGroup>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        color=\"secondary\"\r\n                        onClick={handleClose}\r\n                        disabled={isPending}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                    <Button color=\"primary\" type=\"submit\" disabled={isPending}>\r\n                        {isPending ? 'Saving...' : 'Submit'}\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ReasonForChangeModal;\r\n","import {\r\n    useMutation,\r\n    useQueryClient,\r\n    UseMutationResult\r\n} from '@tanstack/react-query';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport baseUrl from '../baseUrl';\r\nimport {handleResponse} from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\nimport {\r\n    ProjectStatus,\r\n    ProjectVisibility,\r\n    IdResult,\r\n    EmptyResult,\r\n    TagModel,\r\n    EditProjectPersonModel,\r\n    EngagementContext\r\n} from '../../types.ts';\r\n\r\nexport interface CreateProjectCommand {\r\n    name: string;\r\n    description?: string;\r\n    timeZone: string; // IANA timezone\r\n    startOn: string; // DateTime when the project starts\r\n    durationInWeeks: number; // Duration in weeks\r\n    engagementContext: EngagementContext;\r\n    people: EditProjectPersonModel[];\r\n    tags?: TagModel[];\r\n}\r\n\r\ninterface UpdateProjectCommand extends CreateProjectCommand {\r\n    id: string;\r\n    changeReason?: string;\r\n}\r\n\r\nexport const useCreateProject = (): UseMutationResult<\r\n    IdResult,\r\n    Error | ProblemDetailsError,\r\n    CreateProjectCommand\r\n> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation({\r\n        mutationFn: async (command: CreateProjectCommand) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/projects`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify(command)\r\n                }\r\n            );\r\n            return handleResponse<IdResult>(response);\r\n        },\r\n        onSuccess: () => {\r\n            queryClient.invalidateQueries({queryKey: ['projects']});\r\n        }\r\n    });\r\n};\r\n\r\nexport const useUpdateProject = (): UseMutationResult<\r\n    EmptyResult,\r\n    Error | ProblemDetailsError,\r\n    UpdateProjectCommand\r\n> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation({\r\n        mutationFn: async (command: UpdateProjectCommand) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/projects/${command.id}`,\r\n                {\r\n                    method: 'PUT',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify(command)\r\n                }\r\n            );\r\n            return handleResponse<EmptyResult>(response);\r\n        },\r\n        onSuccess: () => {\r\n            queryClient.invalidateQueries({queryKey: ['projects']});\r\n        }\r\n    });\r\n};\r\n\r\nexport const useDeleteProject = (): UseMutationResult<\r\n    void,\r\n    Error | ProblemDetailsError,\r\n    string\r\n> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation({\r\n        mutationFn: async (projectId: string) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/projects/${projectId}`,\r\n                {\r\n                    method: 'DELETE'\r\n                }\r\n            );\r\n            return handleResponse<void>(response);\r\n        },\r\n        onSuccess: () => {\r\n            queryClient.invalidateQueries({queryKey: ['projects']});\r\n        }\r\n    });\r\n};\r\n\r\ninterface UpdateStatusParams {\r\n    projectId: string;\r\n    newStatus: ProjectStatus;\r\n    changeReason?: string;\r\n}\r\n\r\nexport const useUpdateProjectStatus = (): UseMutationResult<\r\n    EmptyResult,\r\n    Error | ProblemDetailsError,\r\n    UpdateStatusParams\r\n> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation({\r\n        mutationFn: async ({\r\n            projectId,\r\n            newStatus,\r\n            changeReason\r\n        }: UpdateStatusParams) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/projects/${projectId}/status`,\r\n                {\r\n                    method: 'PUT',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({status: newStatus, changeReason})\r\n                }\r\n            );\r\n            return handleResponse<EmptyResult>(response);\r\n        },\r\n        onSuccess: () => {\r\n            queryClient.invalidateQueries({queryKey: ['projects']});\r\n        }\r\n    });\r\n};\r\n\r\ninterface UpdateVisibilityParams {\r\n    projectId: string;\r\n    newVisibility: ProjectVisibility;\r\n    changeReason?: string;\r\n}\r\n\r\nexport const useUpdateProjectVisibility = (): UseMutationResult<\r\n    EmptyResult,\r\n    Error | ProblemDetailsError,\r\n    UpdateVisibilityParams\r\n> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation({\r\n        mutationFn: async ({\r\n            projectId,\r\n            newVisibility,\r\n            changeReason\r\n        }: UpdateVisibilityParams) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/projects/${projectId}/visibility`,\r\n                {\r\n                    method: 'PUT',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        visibility: newVisibility,\r\n                        changeReason\r\n                    })\r\n                }\r\n            );\r\n            return handleResponse<EmptyResult>(response);\r\n        },\r\n        onSuccess: () => {\r\n            queryClient.invalidateQueries({queryKey: ['projects']});\r\n        }\r\n    });\r\n};\r\n\r\ninterface ChangeTimeZoneParams {\r\n    projectId: string;\r\n    timeZone: string;\r\n    changeReason?: string;\r\n}\r\n\r\nexport const useChangeProjectTimeZone = (): UseMutationResult<\r\n    void,\r\n    Error | ProblemDetailsError,\r\n    ChangeTimeZoneParams\r\n> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation({\r\n        mutationFn: async ({\r\n            projectId,\r\n            timeZone,\r\n            changeReason\r\n        }: ChangeTimeZoneParams) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/projects/${projectId}/timezone`,\r\n                {\r\n                    method: 'PUT',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        timeZone,\r\n                        changeReason\r\n                    })\r\n                }\r\n            );\r\n            return handleResponse<void>(response);\r\n        },\r\n        onSuccess: (_, variables) => {\r\n            queryClient.invalidateQueries({queryKey: ['projects']});\r\n            queryClient.invalidateQueries({\r\n                queryKey: ['projects', variables.projectId]\r\n            });\r\n        }\r\n    });\r\n};\r\n","import React, {useState} from 'react';\r\nimport {\r\n    Button,\r\n    Form,\r\n    FormGroup,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader\r\n} from 'reactstrap';\r\nimport {Controller, useForm} from 'react-hook-form';\r\nimport TimeZoneSelect from '../../utility/TimeZoneSelect';\r\nimport DisplayFormError from '../../utility/DisplayFormError';\r\nimport ErrorDisplay from '../../utility/ErrorDisplay';\r\nimport {useChangeProjectTimeZone} from '../../../api/projects/useProjectMutations.ts';\r\nimport ProblemDetailsError from '../../../api/ProblemDetailsError';\r\nimport {ProjectStatus} from '../../../types';\r\n\r\ninterface ChangeTimeZoneFormData {\r\n    timeZone: string;\r\n    changeReason: string;\r\n}\r\n\r\ninterface ChangeProjectTimeZoneModalProps {\r\n    isOpen: boolean;\r\n    onClose: () => void;\r\n    projectId: string;\r\n    currentTimeZone: string;\r\n    projectStatus: ProjectStatus;\r\n    onSuccess?: () => void;\r\n}\r\n\r\nconst ChangeProjectTimeZoneModal: React.FC<ChangeProjectTimeZoneModalProps> = ({\r\n    isOpen,\r\n    onClose,\r\n    projectId,\r\n    currentTimeZone,\r\n    projectStatus,\r\n    onSuccess\r\n}) => {\r\n    const [error, setError] = useState<Error | ProblemDetailsError | null>(\r\n        null\r\n    );\r\n\r\n    const {control, handleSubmit, reset} = useForm<ChangeTimeZoneFormData>({\r\n        defaultValues: {\r\n            timeZone: currentTimeZone,\r\n            changeReason: ''\r\n        }\r\n    });\r\n\r\n    const changeTimeZone = useChangeProjectTimeZone();\r\n\r\n    const onSubmit = async (data: ChangeTimeZoneFormData) => {\r\n        setError(null);\r\n\r\n        changeTimeZone.mutate(\r\n            {\r\n                projectId,\r\n                timeZone: data.timeZone,\r\n                changeReason: data.changeReason\r\n            },\r\n            {\r\n                onSuccess: () => {\r\n                    reset();\r\n                    onClose();\r\n                    if (onSuccess) {\r\n                        onSuccess();\r\n                    }\r\n                },\r\n                onError: error => {\r\n                    console.error('Error changing timezone:', error);\r\n                    setError(error);\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    const handleClose = () => {\r\n        reset();\r\n        setError(null);\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} toggle={handleClose}>\r\n            <ModalHeader toggle={handleClose}>\r\n                Change Project Timezone\r\n            </ModalHeader>\r\n            <Form onSubmit={handleSubmit(onSubmit)}>\r\n                <ModalBody>\r\n                    <ErrorDisplay error={error} />\r\n\r\n                    <FormGroup>\r\n                        <Controller\r\n                            name=\"timeZone\"\r\n                            control={control}\r\n                            rules={{\r\n                                required: 'Time zone is required'\r\n                            }}\r\n                            render={({field, fieldState}) => (\r\n                                <>\r\n                                    <TimeZoneSelect\r\n                                        value={field.value}\r\n                                        onChange={field.onChange}\r\n                                        className=\"mb-3\"\r\n                                        label=\"New Timezone\"\r\n                                    />\r\n                                    {fieldState.error && (\r\n                                        <DisplayFormError\r\n                                            error={fieldState.error}\r\n                                            fieldDisplayName=\"Time Zone\"\r\n                                        />\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                        />\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <Controller\r\n                            name=\"changeReason\"\r\n                            control={control}\r\n                            rules={{\r\n                                required:\r\n                                    projectStatus !== ProjectStatus.Draft\r\n                                        ? 'Change reason is required'\r\n                                        : false\r\n                            }}\r\n                            render={({field, fieldState}) => (\r\n                                <>\r\n                                    <label\r\n                                        htmlFor=\"changeReason\"\r\n                                        className=\"form-label\"\r\n                                    >\r\n                                        Reason for Change{' '}\r\n                                        {projectStatus !== ProjectStatus.Draft\r\n                                            ? '*'\r\n                                            : ''}\r\n                                    </label>\r\n                                    <textarea\r\n                                        {...field}\r\n                                        id=\"changeReason\"\r\n                                        className=\"form-control\"\r\n                                        rows={3}\r\n                                        placeholder={\r\n                                            projectStatus ===\r\n                                            ProjectStatus.Draft\r\n                                                ? 'Optional: Provide a reason for changing the timezone...'\r\n                                                : 'Please provide a reason for changing the timezone...'\r\n                                        }\r\n                                    />\r\n                                    {fieldState.error && (\r\n                                        <DisplayFormError\r\n                                            error={fieldState.error}\r\n                                            fieldDisplayName=\"Change Reason\"\r\n                                        />\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                        />\r\n                    </FormGroup>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"secondary\" onClick={handleClose}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={changeTimeZone.isPending}\r\n                    >\r\n                        {changeTimeZone.isPending\r\n                            ? 'Changing...'\r\n                            : 'Change Timezone'}\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ChangeProjectTimeZoneModal;\r\n","import React, {useEffect, useMemo, useState} from 'react';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {\r\n    Alert,\r\n    Button,\r\n    Col,\r\n    Form,\r\n    FormGroup,\r\n    FormText,\r\n    Input,\r\n    Label,\r\n    Row,\r\n    Table\r\n} from 'reactstrap';\r\nimport PersonSelector from '../../utility/PersonSelector';\r\nimport TagSelector from '../../utility/TagSelector';\r\nimport TimeZoneSelect from '../../utility/TimeZoneSelect';\r\nimport WeekSelector from '../../utility/WeekSelector';\r\nimport {\r\n    getWeekInfo,\r\n    getMondayFromGlobalWeek,\r\n    addDays,\r\n    WeekInfo\r\n} from '../../../lib/scheduling';\r\nimport ReasonForChangeModal from './ReasonForChangeModal.tsx';\r\nimport ChangeProjectTimeZoneModal from './ChangeProjectTimeZoneModal.tsx';\r\nimport useConfirm from '../../../hooks/useConfirm';\r\nimport {useAuthStateManager} from '../../../hooks/useAuthStateManager';\r\nimport {\r\n    ProjectModel,\r\n    ProjectStatus,\r\n    ProjectVisibility,\r\n    TagModel,\r\n    EngagementContext\r\n} from '../../../types.ts';\r\nimport {\r\n    CreateProjectCommand,\r\n    useCreateProject,\r\n    useUpdateProject,\r\n    useUpdateProjectStatus,\r\n    useUpdateProjectVisibility\r\n} from '../../../api/projects/useProjectMutations.ts';\r\nimport {useGetTags} from '../../../api/tags/useGetTags.ts';\r\n\r\ninterface ProjectEditProps {\r\n    project?: ProjectModel;\r\n    onSave?: () => void;\r\n    onCancel?: () => void;\r\n}\r\n\r\nconst ProjectEdit: React.FC<ProjectEditProps> = ({\r\n    project,\r\n    onSave,\r\n    onCancel\r\n}) => {\r\n    const navigate = useNavigate();\r\n    const {confirm, confirmModal} = useConfirm();\r\n    const {personId} = useAuthStateManager();\r\n    // State for ReasonForChangeModal and status change\r\n    const [isReasonModalOpen, setIsReasonModalOpen] = useState(false);\r\n    const [isTimeZoneModalOpen, setIsTimeZoneModalOpen] = useState(false);\r\n    const [pendingStatus, setPendingStatus] = useState<ProjectStatus | null>(\r\n        null\r\n    );\r\n    const updateStatus = useUpdateProjectStatus();\r\n    const updateVisibility = useUpdateProjectVisibility();\r\n    const [pendingVisibility, setPendingVisibility] =\r\n        useState<ProjectVisibility | null>(null);\r\n\r\n    const {\r\n        mondayOfWeek: defaultStartOn,\r\n        globalWeekNumber: defaultGlobalWeekNumber\r\n    } = getWeekInfo(new Date());\r\n    const defaultStartOnDateString = defaultStartOn.toISOString().split('T')[0];\r\n\r\n    const [formData, setFormData] = useState<Partial<CreateProjectCommand>>({\r\n        name: '',\r\n        description: '',\r\n        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n        startOn: defaultStartOnDateString,\r\n        durationInWeeks: 1,\r\n        engagementContext: EngagementContext.BAU,\r\n        people: []\r\n    });\r\n    const [startGlobalWeekNumber, setStartGlobalWeekNumber] = useState(\r\n        defaultGlobalWeekNumber\r\n    );\r\n    const [projectTags, setProjectTags] = useState<TagModel[]>([]);\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const {isLoading: isLoadingTags} = useGetTags(true);\r\n\r\n    // Reset form when project changes\r\n    useEffect(() => {\r\n        if (project) {\r\n            setFormData({\r\n                name: project.name,\r\n                description: project.description,\r\n                timeZone:\r\n                    project.timeZone ||\r\n                    Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n                startOn: project.startOn.split('T')[0],\r\n                durationInWeeks: project.durationInWeeks,\r\n                engagementContext: project.engagementContext || EngagementContext.BAU,\r\n                people: project.people.map(p => ({\r\n                    personId: p.personId,\r\n                    projectRole: p.projectRole,\r\n                    canEdit: p.canEdit,\r\n                    canEditResources: p.canEditResources\r\n                }))\r\n            });\r\n            setProjectTags(project.tags || []);\r\n            // Set the global week number from the project's start date\r\n            try {\r\n                const weekInfo = getWeekInfo(new Date(project.startOn));\r\n                setStartGlobalWeekNumber(weekInfo.globalWeekNumber);\r\n            } catch (error) {\r\n                console.error(\r\n                    'Error getting week info for project start date:',\r\n                    error\r\n                );\r\n            }\r\n        } else {\r\n            setFormData({\r\n                name: '',\r\n                description: '',\r\n                timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n                startOn: defaultStartOnDateString,\r\n                durationInWeeks: 1,\r\n                engagementContext: EngagementContext.BAU,\r\n                people: []\r\n            });\r\n            setProjectTags([]);\r\n            setStartGlobalWeekNumber(defaultGlobalWeekNumber);\r\n        }\r\n        setError(null);\r\n    }, [project, defaultGlobalWeekNumber, defaultStartOnDateString]);\r\n\r\n    // Mutations\r\n    const createProject = useCreateProject();\r\n    const updateProject = useUpdateProject();\r\n\r\n    // Use useMemo to derive the end week information whenever the start or duration changes.\r\n    const endWeekDetails: {info: WeekInfo; sunday: Date} | null =\r\n        useMemo(() => {\r\n            const duration = formData.durationInWeeks;\r\n            if (!startGlobalWeekNumber || !duration || duration < 1) {\r\n                return null;\r\n            }\r\n            try {\r\n                // Calculate end week by adding duration (minus 1, as start week is week 1 of duration)\r\n                const endGlobalWeekNumber =\r\n                    startGlobalWeekNumber + duration - 1;\r\n                const info = getWeekInfo(\r\n                    getMondayFromGlobalWeek(endGlobalWeekNumber)\r\n                );\r\n                const sunday = addDays(info.mondayOfWeek, 6); // Monday is day 0, Sunday is day 6\r\n                return {info, sunday};\r\n            } catch (error) {\r\n                console.error('Could not calculate project end week', error);\r\n                return null;\r\n            }\r\n        }, [startGlobalWeekNumber, formData.durationInWeeks]);\r\n\r\n    // Helper function to actually submit the form\r\n    const submitForm = async () => {\r\n        try {\r\n            const formattedData = {\r\n                ...formData,\r\n                startOn: formData.startOn\r\n                    ? new Date(formData.startOn).toISOString()\r\n                    : undefined,\r\n                durationInWeeks: formData.durationInWeeks || 1,\r\n                tags: projectTags\r\n            };\r\n\r\n            if (project && project.id) {\r\n                await updateProject.mutateAsync({\r\n                    ...(formattedData as CreateProjectCommand),\r\n                    id: project.id\r\n                });\r\n            } else {\r\n                const savedProject = await createProject.mutateAsync(\r\n                    formattedData as CreateProjectCommand\r\n                );\r\n                const newId = savedProject?.id;\r\n                if (newId) {\r\n                    navigate(`/project/${newId}`);\r\n                }\r\n                if (onSave) {\r\n                    onSave();\r\n                }\r\n            }\r\n        } catch (err) {\r\n            console.error('Error saving project:', err);\r\n            setError('Failed to save project. Please try again.');\r\n        }\r\n    };\r\n\r\n    // Form submission\r\n    const handleSubmit = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        setError(null);\r\n\r\n        if (\r\n            !formData.name ||\r\n            !formData.timeZone ||\r\n            !formData.startOn ||\r\n            !formData.durationInWeeks\r\n        ) {\r\n            setError('Please fill in all required fields');\r\n            return;\r\n        }\r\n\r\n        // Validation for editor removal\r\n        if (project && project.id && personId) {\r\n            const currentPeople = formData.people || [];\r\n            const wasCurrentUserAnEditor = project.people.some(\r\n                p => p.personId === personId && p.canEdit\r\n            );\r\n            const currentUserInNewList = currentPeople.find(\r\n                p => p.personId === personId\r\n            );\r\n            const isCurrentUserStillEditor =\r\n                currentUserInNewList?.canEdit || false;\r\n\r\n            // Check if current user is removing themselves as the only editor\r\n            if (\r\n                wasCurrentUserAnEditor &&\r\n                !isCurrentUserStillEditor &&\r\n                currentPeople.filter(p => p.canEdit).length === 0\r\n            ) {\r\n                setError(\r\n                    'You cannot remove yourself as the only editor. Another editor must be assigned before you can remove yourself, or another editor can remove you.'\r\n                );\r\n                return;\r\n            }\r\n\r\n            // Check if current user is removing themselves but there are other editors - show confirmation\r\n            if (\r\n                wasCurrentUserAnEditor &&\r\n                !isCurrentUserStillEditor &&\r\n                currentPeople.filter(p => p.canEdit).length > 0\r\n            ) {\r\n                const warningMessage = `Are you sure you want to remove yourself as an editor? You will no longer have edit access to this project${\r\n                    project.status === ProjectStatus.Draft ||\r\n                    project.visibility === ProjectVisibility.NonDisclosed\r\n                        ? ', and you may not be able to see it if it remains in draft status or non-disclosed'\r\n                        : ''\r\n                }.`;\r\n\r\n                confirm(warningMessage, submitForm);\r\n                return;\r\n            }\r\n        }\r\n\r\n        await submitForm();\r\n    };\r\n\r\n    const handleTagsChange = (newTags: TagModel[]) => {\r\n        setProjectTags(newTags);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form\r\n                onSubmit={handleSubmit}\r\n                className=\"p-4 border rounded bg-light\"\r\n            >\r\n                {error && <Alert color=\"danger\">{error}</Alert>}\r\n                {/* Top-right action buttons */}\r\n                <div className=\"d-flex justify-content-between align-items-start mb-4\">\r\n                    <div></div>\r\n                    <div>\r\n                        {project && project.id && (\r\n                            <>\r\n                                <Button\r\n                                    color=\"success\"\r\n                                    outline\r\n                                    className=\"me-2\"\r\n                                    disabled={updateStatus.isPending}\r\n                                    onClick={() => {\r\n                                        setPendingStatus(\r\n                                            project.status ===\r\n                                                ProjectStatus.Draft\r\n                                                ? ProjectStatus.Published\r\n                                                : ProjectStatus.Draft\r\n                                        );\r\n                                        setIsReasonModalOpen(true);\r\n                                    }}\r\n                                >\r\n                                    {project.status === ProjectStatus.Draft\r\n                                        ? 'Publish'\r\n                                        : 'Revert to Draft'}\r\n                                </Button>\r\n                                <Button\r\n                                    color=\"warning\"\r\n                                    outline\r\n                                    disabled={updateVisibility.isPending}\r\n                                    onClick={() => {\r\n                                        setPendingVisibility(\r\n                                            project.visibility ===\r\n                                                ProjectVisibility.Disclosed\r\n                                                ? ProjectVisibility.NonDisclosed\r\n                                                : ProjectVisibility.Disclosed\r\n                                        );\r\n                                        setIsReasonModalOpen(true);\r\n                                    }}\r\n                                >\r\n                                    {project.visibility ===\r\n                                    ProjectVisibility.Disclosed\r\n                                        ? 'Make Non-Disclosed'\r\n                                        : 'Make Disclosed'}\r\n                                </Button>\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <Row className=\"mb-3\">\r\n                    <Col md={8}>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">Name *</Label>\r\n                            <Input\r\n                                id=\"name\"\r\n                                value={formData.name || ''}\r\n                                onChange={e =>\r\n                                    setFormData(prev => ({\r\n                                        ...prev,\r\n                                        name: e.target.value\r\n                                    }))\r\n                                }\r\n                                required\r\n                            />\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                        <FormGroup>\r\n                            <Label>Engagement Context</Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                value={formData.engagementContext}\r\n                                onChange={e =>\r\n                                    setFormData(prev => ({\r\n                                        ...prev,\r\n                                        engagementContext: parseInt(\r\n                                            e.target.value\r\n                                        ) as EngagementContext\r\n                                    }))\r\n                                }\r\n                            >\r\n                                <option value={EngagementContext.BAU}>\r\n                                    Business As Usual (BAU)\r\n                                </option>\r\n                                <option value={EngagementContext.NonBAU}>\r\n                                    Non-Business As Usual (Non-BAU)\r\n                                </option>\r\n                            </Input>\r\n                            <FormText color=\"muted\">\r\n                                <strong>BAU:</strong> Routine operational work or standard business activities.<br />\r\n                                <strong>Non-BAU:</strong> Change initiatives, strategic projects, or transformation efforts that are outside normal operations.\r\n                            </FormText>\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormGroup>\r\n                    <Label for=\"description\">Description</Label>\r\n                    <Input\r\n                        id=\"description\"\r\n                        type=\"textarea\"\r\n                        value={formData.description || ''}\r\n                        onChange={e =>\r\n                            setFormData(prev => ({\r\n                                ...prev,\r\n                                description: e.target.value\r\n                            }))\r\n                        }\r\n                        rows={3}\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    {project && project.id ? (\r\n                        <>\r\n                            <div className=\"d-flex justify-content-between align-items-center\">\r\n                                <Label>Timezone</Label>\r\n                                {project.status === ProjectStatus.Draft && (\r\n                                    <Button\r\n                                        color=\"link\"\r\n                                        size=\"sm\"\r\n                                        onClick={() =>\r\n                                            setIsTimeZoneModalOpen(true)\r\n                                        }\r\n                                        className=\"p-0\"\r\n                                    >\r\n                                        Change\r\n                                    </Button>\r\n                                )}\r\n                            </div>\r\n                            <Input\r\n                                value={formData.timeZone || ''}\r\n                                disabled\r\n                                className=\"mb-3\"\r\n                            />\r\n                            {project.status !== ProjectStatus.Draft && (\r\n                                <small className=\"text-muted\">\r\n                                    Timezone can only be changed when project is\r\n                                    in Draft status\r\n                                </small>\r\n                            )}\r\n                        </>\r\n                    ) : (\r\n                        <TimeZoneSelect\r\n                            value={formData.timeZone || ''}\r\n                            onChange={value =>\r\n                                setFormData(prev => ({\r\n                                    ...prev,\r\n                                    timeZone: value\r\n                                }))\r\n                            }\r\n                            label=\"Timezone *\"\r\n                            className=\"mb-3\"\r\n                        />\r\n                    )}\r\n                </FormGroup>\r\n\r\n                <Row className=\"mb-3\">\r\n                    <Col md={8}>\r\n                        <WeekSelector\r\n                            value={startGlobalWeekNumber}\r\n                            onChange={(globalWeekNumber, weekInfo) => {\r\n                                setStartGlobalWeekNumber(globalWeekNumber);\r\n                                setFormData(prev => ({\r\n                                    ...prev,\r\n                                    startOn: weekInfo.mondayOfWeek\r\n                                        .toISOString()\r\n                                        .split('T')[0]\r\n                                }));\r\n                            }}\r\n                            label=\"Start Week *\"\r\n                        />\r\n                    </Col>\r\n                    <Col md={4}>\r\n                        <FormGroup>\r\n                            <Label for=\"durationInWeeks\">\r\n                                Duration (Weeks) *\r\n                            </Label>\r\n                            <Input\r\n                                type=\"number\"\r\n                                id=\"durationInWeeks\"\r\n                                value={formData.durationInWeeks || ''}\r\n                                onChange={e =>\r\n                                    setFormData(prev => ({\r\n                                        ...prev,\r\n                                        durationInWeeks:\r\n                                            parseInt(e.target.value, 10) || 1\r\n                                    }))\r\n                                }\r\n                                min=\"1\"\r\n                                required\r\n                                bsSize=\"sm\"\r\n                            />\r\n                            {endWeekDetails && (\r\n                                <FormText>\r\n                                    Ends Sun,{' '}\r\n                                    {endWeekDetails.sunday.toLocaleDateString()}\r\n                                    <br />\r\n                                    <small className=\"text-muted\">\r\n                                        (Week {endWeekDetails.info.weekOfYear}{' '}\r\n                                        of {endWeekDetails.info.year})\r\n                                    </small>\r\n                                </FormText>\r\n                            )}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <FormGroup>\r\n                    <Label>Project People</Label>\r\n                    <PersonSelector\r\n                        selectedPersonIds={[]}\r\n                        onPersonSelectionChange={selectedIds => {\r\n                            // Add new people to the list with default values\r\n                            const newPeople = selectedIds.map(personId => ({\r\n                                personId,\r\n                                projectRole: 'Team Member',\r\n                                canEdit: false,\r\n                                canEditResources: false\r\n                            }));\r\n\r\n                            setFormData(prev => ({\r\n                                ...prev,\r\n                                people: [...(prev.people || []), ...newPeople]\r\n                            }));\r\n                        }}\r\n                        label=\"\"\r\n                        placeholder=\"Add people to project...\"\r\n                    />\r\n\r\n                    {formData.people && formData.people.length > 0 && (\r\n                        <Table striped className=\"mt-3\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Role</th>\r\n                                    <th>Can Edit</th>\r\n                                    <th>Can Edit Resources</th>\r\n                                    <th>Actions</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {formData.people.map((person, index) => {\r\n                                    // Find the person info from the project data\r\n                                    const personInfo = project?.people.find(\r\n                                        p => p.personId === person.personId\r\n                                    )?.person;\r\n                                    return (\r\n                                        <tr key={person.personId}>\r\n                                            <td>\r\n                                                {personInfo\r\n                                                    ? `${personInfo.firstName} ${personInfo.lastName}`\r\n                                                    : person.personId}\r\n                                            </td>\r\n                                            <td>\r\n                                                <Input\r\n                                                    type=\"text\"\r\n                                                    value={person.projectRole}\r\n                                                    onChange={e => {\r\n                                                        const updatedPeople = [\r\n                                                            ...(formData.people ||\r\n                                                                [])\r\n                                                        ];\r\n                                                        updatedPeople[\r\n                                                            index\r\n                                                        ].projectRole =\r\n                                                            e.target.value;\r\n                                                        setFormData(prev => ({\r\n                                                            ...prev,\r\n                                                            people: updatedPeople\r\n                                                        }));\r\n                                                    }}\r\n                                                    placeholder=\"Enter role...\"\r\n                                                    maxLength={100}\r\n                                                />\r\n                                            </td>\r\n                                            <td>\r\n                                                <Input\r\n                                                    type=\"checkbox\"\r\n                                                    checked={person.canEdit}\r\n                                                    onChange={e => {\r\n                                                        const updatedPeople = [\r\n                                                            ...(formData.people ||\r\n                                                                [])\r\n                                                        ];\r\n                                                        updatedPeople[\r\n                                                            index\r\n                                                        ].canEdit =\r\n                                                            e.target.checked;\r\n                                                        setFormData(prev => ({\r\n                                                            ...prev,\r\n                                                            people: updatedPeople\r\n                                                        }));\r\n                                                    }}\r\n                                                />\r\n                                            </td>\r\n                                            <td>\r\n                                                <Input\r\n                                                    type=\"checkbox\"\r\n                                                    checked={\r\n                                                        person.canEditResources\r\n                                                    }\r\n                                                    onChange={e => {\r\n                                                        const updatedPeople = [\r\n                                                            ...(formData.people ||\r\n                                                                [])\r\n                                                        ];\r\n                                                        updatedPeople[\r\n                                                            index\r\n                                                        ].canEditResources =\r\n                                                            e.target.checked;\r\n                                                        setFormData(prev => ({\r\n                                                            ...prev,\r\n                                                            people: updatedPeople\r\n                                                        }));\r\n                                                    }}\r\n                                                />\r\n                                            </td>\r\n                                            <td>\r\n                                                <Button\r\n                                                    color=\"danger\"\r\n                                                    size=\"sm\"\r\n                                                    onClick={() => {\r\n                                                        const updatedPeople = (\r\n                                                            formData.people ||\r\n                                                            []\r\n                                                        ).filter(\r\n                                                            (_, i) =>\r\n                                                                i !== index\r\n                                                        );\r\n                                                        setFormData(prev => ({\r\n                                                            ...prev,\r\n                                                            people: updatedPeople\r\n                                                        }));\r\n                                                    }}\r\n                                                >\r\n                                                    Remove\r\n                                                </Button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    );\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label>Tags</Label>\r\n                    <TagSelector\r\n                        selectedTags={projectTags}\r\n                        onChange={handleTagsChange}\r\n                        placeholder=\"Select or create tags...\"\r\n                        isLoading={isLoadingTags}\r\n                        allowCreate={true}\r\n                    />\r\n                </FormGroup>\r\n\r\n                <div className=\"d-flex justify-content-end gap-2\">\r\n                    <Button\r\n                        color=\"secondary\"\r\n                        onClick={() => {\r\n                            if (!project || !project.id) {\r\n                                navigate('/projects');\r\n                            } else if (onCancel) {\r\n                                onCancel();\r\n                            }\r\n                        }}\r\n                    >\r\n                        Close Edit\r\n                    </Button>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        disabled={\r\n                            createProject.isPending || updateProject.isPending\r\n                        }\r\n                    >\r\n                        {createProject.isPending || updateProject.isPending\r\n                            ? 'Saving...'\r\n                            : 'Save'}\r\n                    </Button>\r\n                </div>\r\n            </Form>\r\n            {/* ReasonForChangeModal */}\r\n            <ReasonForChangeModal\r\n                isOpen={isReasonModalOpen}\r\n                onClose={() => setIsReasonModalOpen(false)}\r\n                onSubmit={async (reason: string) => {\r\n                    if (!project || !project.id) {\r\n                        return;\r\n                    }\r\n\r\n                    if (pendingStatus !== null) {\r\n                        await updateStatus.mutateAsync({\r\n                            projectId: project.id,\r\n                            newStatus: pendingStatus,\r\n                            changeReason: reason\r\n                        });\r\n                        setPendingStatus(null);\r\n                    } else if (pendingVisibility !== null) {\r\n                        await updateVisibility.mutateAsync({\r\n                            projectId: project.id,\r\n                            newVisibility: pendingVisibility,\r\n                            changeReason: reason\r\n                        });\r\n                        setPendingVisibility(null);\r\n                    }\r\n                    setIsReasonModalOpen(false);\r\n                }}\r\n                description={\r\n                    pendingStatus\r\n                        ? pendingStatus === ProjectStatus.Published\r\n                            ? 'publish this project'\r\n                            : 'revert this project to Draft'\r\n                        : pendingVisibility !== null\r\n                          ? pendingVisibility === ProjectVisibility.Disclosed\r\n                              ? 'make this project Disclosed'\r\n                              : 'make this project Non-Disclosed'\r\n                          : ''\r\n                }\r\n                isPending={updateStatus.isPending || updateVisibility.isPending}\r\n                projectStatus={project?.status}\r\n            />\r\n\r\n            {/* ChangeProjectTimeZoneModal */}\r\n            {project && project.id && (\r\n                <ChangeProjectTimeZoneModal\r\n                    isOpen={isTimeZoneModalOpen}\r\n                    onClose={() => setIsTimeZoneModalOpen(false)}\r\n                    projectId={project.id}\r\n                    currentTimeZone={formData.timeZone || ''}\r\n                    projectStatus={project.status}\r\n                />\r\n            )}\r\n            {confirmModal}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProjectEdit;\r\n","// ========================\r\n// Case Conversion Utilities\r\n// Note: All case conversion functions require `toKebab` to work.\r\n// ------------------------\r\n// https://github.com/zellwk/javascript/tree/master/src/utils/convert-case\r\n\r\nexport function toKebabCase(string: string) {\r\n    return string\r\n        .trim()\r\n        .replace(/([a-z])([A-Z])/g, '$1-$2')\r\n        .replace(/\\W|_/g, m => (/[À-ž]/.test(m) ? m : '-'))\r\n        .replace(/^-+|-+$/g, '')\r\n        .replace(/-{2,}/g, '-')\r\n        .toLowerCase();\r\n}\r\n\r\nexport function toCamelCase(string: string) {\r\n    return toKebabCase(string)\r\n        .split('-')\r\n        .map((word, index) => {\r\n            if (index === 0) return word;\r\n            return word.slice(0, 1).toUpperCase() + word.slice(1).toLowerCase();\r\n        })\r\n        .join('');\r\n}\r\n\r\nexport function toTitleCase(string: string) {\r\n    return toKebabCase(string)\r\n        .split('-')\r\n        .map(word => {\r\n            return word.slice(0, 1).toUpperCase() + word.slice(1);\r\n        })\r\n        .join(' ');\r\n}\r\n\r\nexport function toSentenceCase(string: string) {\r\n    const interim = toKebabCase(string).replace(/-/g, ' ');\r\n    return interim.slice(0, 1).toUpperCase() + interim.slice(1);\r\n}\r\n\r\nconst capitalize = (string: string) =>\r\n    string.charAt(0).toUpperCase() + string.slice(1);\r\n\r\nexport function breakToWords(string: string) {\r\n    return capitalize(toKebabCase(string).replace(/-/g, ' '));\r\n}\r\n\r\nexport function toSnakeCase(string: string) {\r\n    return toKebabCase(string).split('-').join('_');\r\n}\r\n","/**\r\n * Default phase colors based on position\r\n * These colors are derived from the dashboard sample data and provide\r\n * a consistent color scheme for phases across the application\r\n */\r\nexport const DEFAULT_PHASE_COLORS = [\r\n    '#4F46E5', // Indigo - Phase 1\r\n    '#7C3AED', // Purple - Phase 2  \r\n    '#DB2777', // Pink - Phase 3\r\n    '#DC2626', // Red - Phase 4\r\n    '#EA580C', // Orange - Phase 5\r\n    '#16A34A', // Green - Phase 6\r\n    '#0891B2', // Cyan - Phase 7\r\n    '#8B5CF6', // Violet - Phase 8\r\n    '#F59E0B', // Amber - Phase 9\r\n    '#10B981', // Emerald - Phase 10\r\n    '#3B82F6', // Blue - Phase 11\r\n    '#EF4444', // Red variant - Phase 12\r\n] as const;\r\n\r\n/**\r\n * Gets the default color for a phase based on its position (0-indexed)\r\n * If the position exceeds available colors, it cycles through the color array\r\n * @param position - The 0-based position of the phase\r\n * @returns The hex color code for the phase\r\n */\r\nexport const getDefaultPhaseColor = (position: number): string => {\r\n    if (position < 0) {\r\n        return DEFAULT_PHASE_COLORS[0];\r\n    }\r\n    \r\n    return DEFAULT_PHASE_COLORS[position % DEFAULT_PHASE_COLORS.length];\r\n};\r\n\r\n/**\r\n * Gets the default color for a phase based on its position in an array of phases\r\n * @param phases - Array of existing phases\r\n * @returns The hex color code for the next phase\r\n */\r\nexport const getNextPhaseColor = (phases: Array<{ colour?: string }>): string => {\r\n    return getDefaultPhaseColor(phases.length);\r\n};","import React from 'react';\r\nimport ProblemDetailsError from '../../api/ProblemDetailsError';\r\nimport {ProblemDetails} from '../../types';\r\nimport isProblemDetails from '../../lib/isProblemDetails';\r\n\r\ninterface FieldErrorProps {\r\n    path: string;\r\n    error: unknown;\r\n    className?: string;\r\n}\r\n\r\n/**\r\n * Component that displays field-specific error messages.\r\n * Designed to work with ProblemDetails errors from the API.\r\n * @param path - The dot-notation path to the field (e.g., \"phases.0.endDate\")\r\n * @param error - The error object from the API (ProblemDetailsError or ProblemDetails)\r\n * @param className - Optional CSS class name for styling\r\n */\r\nconst FieldError: React.FC<FieldErrorProps> = ({\r\n    path,\r\n    error,\r\n    className = ''\r\n}) => {\r\n    if (!error) {\r\n        return null;\r\n    }\r\n\r\n    let problemDetails: ProblemDetails | null = null;\r\n\r\n    // Extract ProblemDetails from different error types\r\n    if (error instanceof ProblemDetailsError) {\r\n        problemDetails = error.problemDetails;\r\n    } else if (isProblemDetails(error)) {\r\n        problemDetails = error;\r\n    } else {\r\n        return null;\r\n    }\r\n\r\n    if (!problemDetails.errors) {\r\n        return null;\r\n    }\r\n\r\n    // Handle array format (with key property)\r\n    if (Array.isArray(problemDetails.errors)) {\r\n        const fieldError = problemDetails.errors.find(\r\n            error => error.key === path\r\n        );\r\n        if (fieldError) {\r\n            return (\r\n                <div className={`text-danger small mt-1 ${className}`}>\r\n                    {fieldError.message}\r\n                </div>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Handle object format (keyed errors like \"allocations[0].hours\")\r\n    const errorsAsObject = problemDetails.errors as Record<string, any>;\r\n    const fieldErrors = errorsAsObject[path];\r\n    if (fieldErrors) {\r\n        const errorMessage = Array.isArray(fieldErrors)\r\n            ? fieldErrors.join(', ')\r\n            : String(fieldErrors);\r\n\r\n        return (\r\n            <div className={`text-danger small mt-1 ${className}`}>\r\n                {errorMessage}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nexport default FieldError;\r\n","import {\r\n    useMutation,\r\n    useQueryClient,\r\n    UseMutationResult\r\n} from '@tanstack/react-query';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport baseUrl from '../baseUrl';\r\nimport {handleResponse} from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\nimport {PhaseType, EmptyResult} from '../../types.ts';\r\n\r\nexport interface BulkPhaseUpdateItem {\r\n    id?: string; // undefined for new phases\r\n    name?: string;\r\n    description?: string;\r\n    startGlobalWeekNumber?: number;\r\n    durationInWeeks?: number; // Duration in weeks\r\n    type?: PhaseType;\r\n    colour?: string;\r\n    index: number; // Track the original index for error mapping\r\n}\r\n\r\nexport interface BulkPhaseUpdateCommand {\r\n    projectId: string;\r\n    phases: BulkPhaseUpdateItem[];\r\n    changeReason: string;\r\n}\r\n\r\nexport const useBulkPhaseUpdate = (): UseMutationResult<\r\n    EmptyResult,\r\n    Error | ProblemDetailsError,\r\n    BulkPhaseUpdateCommand\r\n> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation({\r\n        mutationFn: async (command: BulkPhaseUpdateCommand) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/projects/phases/bulk-update`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify(command)\r\n                }\r\n            );\r\n            return handleResponse<EmptyResult>(response);\r\n        },\r\n        onSuccess: (_, variables) => {\r\n            queryClient.invalidateQueries({\r\n                queryKey: ['projects', variables.projectId]\r\n            });\r\n        }\r\n    });\r\n};\r\n","import {\r\n    useMutation,\r\n    useQueryClient,\r\n    UseMutationResult\r\n} from '@tanstack/react-query';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport baseUrl from '../baseUrl';\r\nimport {handleResponse} from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\n\r\ninterface DeletePhaseParams {\r\n    phaseId: string;\r\n    projectId: string;\r\n    changeReason?: string;\r\n}\r\n\r\nexport const useDeletePhase = (): UseMutationResult<\r\n    void,\r\n    Error | ProblemDetailsError,\r\n    DeletePhaseParams\r\n> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation({\r\n        mutationFn: async ({\r\n            phaseId,\r\n            // @ts-ignore\r\n            projectId,\r\n            changeReason\r\n        }: DeletePhaseParams) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/projects/phases/${phaseId}`,\r\n                {\r\n                    method: 'DELETE',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({changeReason})\r\n                }\r\n            );\r\n            return handleResponse<void>(response);\r\n        },\r\n        onSuccess: (_, variables) => {\r\n            queryClient.invalidateQueries({\r\n                queryKey: ['projects', variables.projectId]\r\n            });\r\n        }\r\n    });\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Button, FormGroup, Input, FormText} from 'reactstrap';\r\nimport {\r\n    ChevronDown,\r\n    ChevronRight,\r\n    Edit,\r\n    Plus,\r\n    Save,\r\n    Trash2,\r\n    X\r\n} from 'lucide-react';\r\nimport Select from 'react-select';\r\nimport {formatDate} from '../../../lib/dateUtils';\r\nimport {getNextPhaseColor} from '../../../lib/defaultPhaseColors';\r\nimport WeekSelector from '../../utility/WeekSelector';\r\nimport {\r\n    getWeekInfo,\r\n    getMondayFromGlobalWeek,\r\n    addDays\r\n} from '../../../lib/scheduling';\r\nimport ReasonForChangeModal from './ReasonForChangeModal.tsx';\r\nimport ErrorDisplay from '../../utility/ErrorDisplay.tsx';\r\nimport FieldError from '../../utility/FieldError.tsx';\r\nimport {\r\n    BulkPhaseUpdateItem,\r\n    useBulkPhaseUpdate\r\n} from '../../../api/projects/useBulkPhaseMutations.ts';\r\nimport {useDeletePhase} from '../../../api/projects/useDeletePhase.ts';\r\nimport {ProjectModel, PhaseModel, PhaseType} from '../../../types.ts';\r\n\r\ninterface EditablePhase extends PhaseModel {\r\n    isNew?: boolean;\r\n    isEditing?: boolean;\r\n    hasChanges?: boolean;\r\n    originalData?: Partial<PhaseModel>;\r\n    index: number; // Track the index for error mapping\r\n}\r\n\r\ninterface PhasesSectionProps {\r\n    project: ProjectModel;\r\n    canCurrentUserEdit: boolean;\r\n}\r\n\r\nconst PhasesSection: React.FC<PhasesSectionProps> = ({\r\n    project,\r\n    canCurrentUserEdit\r\n}) => {\r\n    const [expandedPhases, setExpandedPhases] = useState<Set<string>>(\r\n        new Set()\r\n    );\r\n    const [editablePhases, setEditablePhases] = useState<EditablePhase[]>([]);\r\n    const [isReasonModalOpen, setIsReasonModalOpen] = useState(false);\r\n    const [pendingUpdates, setPendingUpdates] = useState<BulkPhaseUpdateItem[]>(\r\n        []\r\n    );\r\n    const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\r\n    const [phaseToDelete, setPhaseToDelete] = useState<string | null>(null);\r\n\r\n    const bulkPhaseUpdate = useBulkPhaseUpdate();\r\n    const deletePhase = useDeletePhase();\r\n\r\n    // Initialize editable phases from project phases\r\n    useEffect(() => {\r\n        const phases: EditablePhase[] = project.phases.map((phase, index) => ({\r\n            ...phase,\r\n            isNew: false,\r\n            isEditing: false,\r\n            hasChanges: false,\r\n            originalData: {...phase},\r\n            index\r\n        }));\r\n        setEditablePhases(phases);\r\n    }, [project.phases]);\r\n\r\n    const togglePhaseExpansion = (phaseId: string) => {\r\n        setExpandedPhases(prev => {\r\n            const newSet = new Set(prev);\r\n            if (newSet.has(phaseId)) {\r\n                newSet.delete(phaseId);\r\n            } else {\r\n                newSet.add(phaseId);\r\n            }\r\n            return newSet;\r\n        });\r\n    };\r\n\r\n    const addNewPhase = () => {\r\n        // Default to project start week for new phases\r\n        const defaultStartWeek = project.startGlobalWeekNumber;\r\n        const defaultStartMonday = getMondayFromGlobalWeek(defaultStartWeek);\r\n        const defaultEndWeek = defaultStartWeek; // 1 week duration by default\r\n        const defaultEndMonday = getMondayFromGlobalWeek(defaultEndWeek);\r\n        const defaultEndSunday = addDays(defaultEndMonday, 6);\r\n\r\n        const newPhase: EditablePhase = {\r\n            id: `temp-${Date.now()}`,\r\n            projectId: project.id!,\r\n            name: '',\r\n            description: '',\r\n            startGlobalWeekNumber: defaultStartWeek,\r\n            startOn: defaultStartMonday.toISOString(),\r\n            endGlobalWeekNumber: defaultEndWeek,\r\n            endOn: defaultEndSunday.toISOString(),\r\n            durationInWeeks: 1,\r\n            type: PhaseType.Delivery,\r\n            colour: getNextPhaseColor(editablePhases), // Color based on position\r\n            isNew: true,\r\n            isEditing: true,\r\n            hasChanges: true,\r\n            originalData: {},\r\n            index: editablePhases.length // New phase gets the next index\r\n        };\r\n        setEditablePhases(prev => [...prev, newPhase]);\r\n    };\r\n\r\n    const togglePhaseEdit = (phaseId: string) => {\r\n        setEditablePhases(\r\n            prev =>\r\n                prev\r\n                    .map(phase => {\r\n                        if (phase.id === phaseId) {\r\n                            if (phase.isEditing) {\r\n                                // Cancel editing - revert to original data\r\n                                if (phase.isNew) {\r\n                                    return null; // Remove new phases when canceling\r\n                                }\r\n                                return {\r\n                                    ...phase.originalData!,\r\n                                    isEditing: false,\r\n                                    hasChanges: false,\r\n                                    originalData: phase.originalData\r\n                                } as EditablePhase;\r\n                            } else {\r\n                                // Start editing\r\n                                return {\r\n                                    ...phase,\r\n                                    isEditing: true,\r\n                                    originalData: {...phase}\r\n                                };\r\n                            }\r\n                        }\r\n                        return phase;\r\n                    })\r\n                    .filter(Boolean) as EditablePhase[]\r\n        );\r\n    };\r\n\r\n    const updatePhaseField = (\r\n        phaseId: string,\r\n        field: keyof PhaseModel,\r\n        value: any\r\n    ) => {\r\n        setEditablePhases(prev =>\r\n            prev.map(phase => {\r\n                if (phase.id === phaseId) {\r\n                    const updatedPhase = {\r\n                        ...phase,\r\n                        [field]: value,\r\n                        hasChanges: true\r\n                    };\r\n                    return updatedPhase;\r\n                }\r\n                return phase;\r\n            })\r\n        );\r\n    };\r\n\r\n    // Helper function to update phase dates when week number or duration changes\r\n    const updatePhaseWeekData = (\r\n        phaseId: string,\r\n        startGlobalWeekNumber: number,\r\n        durationInWeeks: number\r\n    ) => {\r\n        // Ensure phase cannot start before project start\r\n        const constrainedStartWeek = Math.max(\r\n            startGlobalWeekNumber,\r\n            project.startGlobalWeekNumber\r\n        );\r\n\r\n        const startMonday = getMondayFromGlobalWeek(constrainedStartWeek);\r\n        const endGlobalWeekNumber = constrainedStartWeek + durationInWeeks - 1;\r\n        const endMonday = getMondayFromGlobalWeek(endGlobalWeekNumber);\r\n        const endSunday = addDays(endMonday, 6);\r\n\r\n        setEditablePhases(prev =>\r\n            prev.map(phase => {\r\n                if (phase.id === phaseId) {\r\n                    return {\r\n                        ...phase,\r\n                        startGlobalWeekNumber: constrainedStartWeek,\r\n                        startOn: startMonday.toISOString(),\r\n                        endGlobalWeekNumber,\r\n                        endOn: endSunday.toISOString(),\r\n                        durationInWeeks,\r\n                        hasChanges: true\r\n                    };\r\n                }\r\n                return phase;\r\n            })\r\n        );\r\n    };\r\n\r\n    // Helper function to get week info for display\r\n    const getPhaseWeekInfo = (phase: EditablePhase) => {\r\n        try {\r\n            const startWeekInfo = getWeekInfo(\r\n                getMondayFromGlobalWeek(phase.startGlobalWeekNumber)\r\n            );\r\n            const endWeekInfo = getWeekInfo(\r\n                getMondayFromGlobalWeek(phase.endGlobalWeekNumber)\r\n            );\r\n            return {startWeekInfo, endWeekInfo};\r\n        } catch (error) {\r\n            console.error('Error getting phase week info:', error);\r\n            return null;\r\n        }\r\n    };\r\n\r\n    // Helper function to get the maximum end week from all phases\r\n    const getMaxPhaseEndWeek = (): number | null => {\r\n        const phaseEndWeeks = editablePhases\r\n            .filter(phase => phase.endGlobalWeekNumber)\r\n            .map(phase => phase.endGlobalWeekNumber);\r\n\r\n        if (phaseEndWeeks.length === 0) return null;\r\n\r\n        return Math.max(...phaseEndWeeks);\r\n    };\r\n\r\n    const getChangedFields = (phase: EditablePhase): BulkPhaseUpdateItem => {\r\n        if (phase.isNew) {\r\n            return {\r\n                name: phase.name,\r\n                description: phase.description,\r\n                startGlobalWeekNumber: phase.startGlobalWeekNumber,\r\n                durationInWeeks: phase.durationInWeeks,\r\n                type: phase.type,\r\n                colour: phase.colour,\r\n                index: phase.index\r\n            };\r\n        }\r\n\r\n        const changes: BulkPhaseUpdateItem = {\r\n            id: phase.id,\r\n            index: phase.index\r\n        };\r\n\r\n        const original = phase.originalData!;\r\n        if (phase.name !== original.name) changes.name = phase.name;\r\n        if (phase.description !== original.description)\r\n            changes.description = phase.description;\r\n        if (phase.startGlobalWeekNumber !== original.startGlobalWeekNumber)\r\n            changes.startGlobalWeekNumber = phase.startGlobalWeekNumber;\r\n        if (phase.durationInWeeks !== original.durationInWeeks)\r\n            changes.durationInWeeks = phase.durationInWeeks;\r\n        if (phase.type !== original.type) changes.type = phase.type;\r\n        if (phase.colour !== original.colour) changes.colour = phase.colour;\r\n\r\n        return changes;\r\n    };\r\n\r\n    const handleUpdate = () => {\r\n        const phasesToUpdate = editablePhases.filter(\r\n            phase => phase.isEditing && phase.hasChanges\r\n        );\r\n\r\n        if (phasesToUpdate.length === 0) return;\r\n\r\n        const updates = phasesToUpdate.map(getChangedFields);\r\n        setPendingUpdates(updates);\r\n        setIsReasonModalOpen(true);\r\n    };\r\n\r\n    const submitUpdates = async (reason: string) => {\r\n        if (pendingUpdates.length === 0) {\r\n            return;\r\n        }\r\n\r\n        bulkPhaseUpdate.mutate(\r\n            {\r\n                projectId: project.id!,\r\n                phases: pendingUpdates,\r\n                changeReason: reason\r\n            },\r\n            {\r\n                onSuccess: () => {\r\n                    // Reset editing states\r\n                    setEditablePhases(prev =>\r\n                        prev.map(phase => ({\r\n                            ...phase,\r\n                            isEditing: false,\r\n                            hasChanges: false,\r\n                            originalData: {...phase}\r\n                        }))\r\n                    );\r\n\r\n                    setPendingUpdates([]);\r\n                    setIsReasonModalOpen(false);\r\n                }\r\n                // onError is handled by displaying bulkPhaseUpdate.error in the UI\r\n            }\r\n        );\r\n    };\r\n\r\n    const handleDeletePhase = (phaseId: string) => {\r\n        setPhaseToDelete(phaseId);\r\n        setIsDeleteModalOpen(true);\r\n    };\r\n\r\n    const confirmDeletePhase = async (reason: string) => {\r\n        if (phaseToDelete) {\r\n            deletePhase.mutate(\r\n                {\r\n                    phaseId: phaseToDelete,\r\n                    projectId: project.id!,\r\n                    changeReason: reason\r\n                },\r\n                {\r\n                    onSuccess: () => {\r\n                        setIsDeleteModalOpen(false);\r\n                        setPhaseToDelete(null);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    const hasEditingPhases = editablePhases.some(\r\n        phase => phase.isEditing && phase.hasChanges\r\n    );\r\n\r\n    const phaseTypeOptions = [\r\n        {value: PhaseType.Delivery, label: 'Delivery'},\r\n        {value: PhaseType.Delivered, label: 'Delivered'}\r\n    ];\r\n\r\n    return (\r\n        <div className=\"mb-4\">\r\n            <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                <h3>Phases</h3>\r\n                <div>\r\n                    {hasEditingPhases && (\r\n                        <Button\r\n                            color=\"success\"\r\n                            size=\"sm\"\r\n                            onClick={handleUpdate}\r\n                            disabled={bulkPhaseUpdate.isPending}\r\n                            className=\"me-2\"\r\n                        >\r\n                            <Save size={14} className=\"me-1\" />\r\n                            Update Phases\r\n                        </Button>\r\n                    )}\r\n                    {canCurrentUserEdit && (\r\n                        <Button\r\n                            color=\"primary\"\r\n                            outline\r\n                            size=\"sm\"\r\n                            onClick={addNewPhase}\r\n                            className=\"me-2\"\r\n                        >\r\n                            <Plus size={14} className=\"me-1\" />\r\n                            Add Phase\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Display update errors */}\r\n            <ErrorDisplay\r\n                error={bulkPhaseUpdate.error}\r\n                title=\"Failed to update phases\"\r\n                onDismiss={() => bulkPhaseUpdate.reset()}\r\n                className=\"mb-3\"\r\n            />\r\n\r\n            {deletePhase.error && (\r\n                <ErrorDisplay\r\n                    error={deletePhase.error}\r\n                    title=\"Failed to delete phase\"\r\n                    onDismiss={() => deletePhase.reset()}\r\n                    className=\"mb-3\"\r\n                />\r\n            )}\r\n\r\n            {/* Display warning for phases extending beyond project end week */}\r\n            {(() => {\r\n                const maxEndWeek = getMaxPhaseEndWeek();\r\n                const projectEndWeek = project.endGlobalWeekNumber;\r\n                const hasExtendingPhases =\r\n                    maxEndWeek && maxEndWeek > projectEndWeek;\r\n\r\n                if (hasExtendingPhases) {\r\n                    try {\r\n                        const projectEndWeekInfo = getWeekInfo(\r\n                            getMondayFromGlobalWeek(projectEndWeek)\r\n                        );\r\n                        const maxEndWeekInfo = getWeekInfo(\r\n                            getMondayFromGlobalWeek(maxEndWeek)\r\n                        );\r\n\r\n                        return (\r\n                            <div\r\n                                className=\"alert alert-warning mb-3\"\r\n                                role=\"alert\"\r\n                            >\r\n                                <div className=\"d-flex align-items-center\">\r\n                                    <i className=\"fas fa-exclamation-triangle me-2\"></i>\r\n                                    <div>\r\n                                        <strong>\r\n                                            Project End Week Extension Required\r\n                                        </strong>\r\n                                        <div className=\"small mt-1\">\r\n                                            One or more phases extend beyond the\r\n                                            current project end week (Week{' '}\r\n                                            {projectEndWeekInfo.weekOfYear} of{' '}\r\n                                            {projectEndWeekInfo.year}). The\r\n                                            project will be automatically\r\n                                            extended to Week{' '}\r\n                                            {maxEndWeekInfo.weekOfYear} of{' '}\r\n                                            {maxEndWeekInfo.year} when these\r\n                                            changes are saved.\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    } catch (error) {\r\n                        return (\r\n                            <div\r\n                                className=\"alert alert-warning mb-3\"\r\n                                role=\"alert\"\r\n                            >\r\n                                <div className=\"d-flex align-items-center\">\r\n                                    <i className=\"fas fa-exclamation-triangle me-2\"></i>\r\n                                    <div>\r\n                                        <strong>\r\n                                            Project Extension Required\r\n                                        </strong>\r\n                                        <div className=\"small mt-1\">\r\n                                            One or more phases extend beyond the\r\n                                            current project duration.\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                }\r\n                return null;\r\n            })()}\r\n\r\n            {editablePhases.length === 0 ? (\r\n                <p className=\"text-muted\">No phases defined yet</p>\r\n            ) : (\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th style={{width: '40px'}}></th>\r\n                            <th>Name</th>\r\n                            <th>Type</th>\r\n                            <th>Colour</th>\r\n                            <th>Start Week</th>\r\n                            <th>Duration (Weeks)</th>\r\n                            {canCurrentUserEdit && <th>Actions</th>}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {editablePhases.map((phase: EditablePhase) => {\r\n                            const isExpanded = expandedPhases.has(phase.id);\r\n\r\n                            return (\r\n                                <React.Fragment key={phase.id}>\r\n                                    <tr\r\n                                        className={\r\n                                            phase.isEditing\r\n                                                ? 'phase-editing-row'\r\n                                                : ''\r\n                                        }\r\n                                        style={{\r\n                                            borderLeft: phase.colour\r\n                                                ? `5px solid ${phase.colour}`\r\n                                                : undefined\r\n                                        }}\r\n                                    >\r\n                                        <td>\r\n                                            {!phase.isNew && (\r\n                                                <Button\r\n                                                    color=\"link\"\r\n                                                    size=\"sm\"\r\n                                                    className=\"p-0 text-muted\"\r\n                                                    onClick={() =>\r\n                                                        togglePhaseExpansion(\r\n                                                            phase.id\r\n                                                        )\r\n                                                    }\r\n                                                    title={\r\n                                                        isExpanded\r\n                                                            ? 'Hide description'\r\n                                                            : 'Show description'\r\n                                                    }\r\n                                                >\r\n                                                    {isExpanded ? (\r\n                                                        <ChevronDown\r\n                                                            size={14}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        <ChevronRight\r\n                                                            size={14}\r\n                                                        />\r\n                                                    )}\r\n                                                </Button>\r\n                                            )}\r\n                                        </td>\r\n                                        <td>\r\n                                            {phase.isEditing ? (\r\n                                                <div>\r\n                                                    <Input\r\n                                                        value={phase.name}\r\n                                                        onChange={e =>\r\n                                                            updatePhaseField(\r\n                                                                phase.id,\r\n                                                                'name',\r\n                                                                e.target.value\r\n                                                            )\r\n                                                        }\r\n                                                        placeholder=\"Phase name\"\r\n                                                        bsSize=\"sm\"\r\n                                                    />\r\n                                                    <FieldError\r\n                                                        path={`phases.${phase.index}.name`}\r\n                                                        error={\r\n                                                            bulkPhaseUpdate.error\r\n                                                        }\r\n                                                    />\r\n                                                </div>\r\n                                            ) : (\r\n                                                phase.name\r\n                                            )}\r\n                                        </td>\r\n                                        <td>\r\n                                            {phase.isEditing ? (\r\n                                                <div>\r\n                                                    <Select\r\n                                                        value={phaseTypeOptions.find(\r\n                                                            opt =>\r\n                                                                opt.value ===\r\n                                                                phase.type\r\n                                                        )}\r\n                                                        onChange={selected =>\r\n                                                            updatePhaseField(\r\n                                                                phase.id,\r\n                                                                'type',\r\n                                                                selected?.value\r\n                                                            )\r\n                                                        }\r\n                                                        options={\r\n                                                            phaseTypeOptions\r\n                                                        }\r\n                                                        classNamePrefix=\"react-select\"\r\n                                                        className=\"react-select-sm\"\r\n                                                    />\r\n                                                    <FieldError\r\n                                                        path={`phases.${phase.index}.type`}\r\n                                                        error={\r\n                                                            bulkPhaseUpdate.error\r\n                                                        }\r\n                                                    />\r\n                                                </div>\r\n                                            ) : (\r\n                                                PhaseType[phase.type]\r\n                                            )}\r\n                                        </td>\r\n                                        <td>\r\n                                            {phase.isEditing ? (\r\n                                                <Input\r\n                                                    type=\"color\"\r\n                                                    value={\r\n                                                        phase.colour ||\r\n                                                        '#FFFFFF'\r\n                                                    }\r\n                                                    onChange={e =>\r\n                                                        updatePhaseField(\r\n                                                            phase.id,\r\n                                                            'colour',\r\n                                                            e.target.value\r\n                                                        )\r\n                                                    }\r\n                                                    className=\"form-control-sm\"\r\n                                                    style={{\r\n                                                        width: '50px',\r\n                                                        height: '31px',\r\n                                                        padding: '0.1rem 0.2rem'\r\n                                                    }}\r\n                                                />\r\n                                            ) : (\r\n                                                <div\r\n                                                    style={{\r\n                                                        width: '20px',\r\n                                                        height: '20px',\r\n                                                        backgroundColor:\r\n                                                            phase.colour ||\r\n                                                            'transparent',\r\n                                                        border: '1px solid #ccc',\r\n                                                        borderRadius: '3px'\r\n                                                    }}\r\n                                                />\r\n                                            )}\r\n                                        </td>\r\n                                        <td>\r\n                                            {phase.isEditing ? (\r\n                                                <div>\r\n                                                    <WeekSelector\r\n                                                        value={\r\n                                                            phase.startGlobalWeekNumber\r\n                                                        }\r\n                                                        onChange={globalWeekNumber => {\r\n                                                            updatePhaseWeekData(\r\n                                                                phase.id,\r\n                                                                globalWeekNumber,\r\n                                                                phase.durationInWeeks\r\n                                                            );\r\n                                                        }}\r\n                                                        label=\"\"\r\n                                                        className=\"mb-0\"\r\n                                                    />\r\n                                                    <FieldError\r\n                                                        path={`phases.${phase.index}.startGlobalWeekNumber`}\r\n                                                        error={\r\n                                                            bulkPhaseUpdate.error\r\n                                                        }\r\n                                                    />\r\n                                                </div>\r\n                                            ) : (\r\n                                                (() => {\r\n                                                    const weekInfo =\r\n                                                        getPhaseWeekInfo(phase);\r\n                                                    if (weekInfo) {\r\n                                                        return (\r\n                                                            <div>\r\n                                                                <div>\r\n                                                                    Week{' '}\r\n                                                                    {\r\n                                                                        weekInfo\r\n                                                                            .startWeekInfo\r\n                                                                            .weekOfYear\r\n                                                                    }{' '}\r\n                                                                    of{' '}\r\n                                                                    {\r\n                                                                        weekInfo\r\n                                                                            .startWeekInfo\r\n                                                                            .year\r\n                                                                    }\r\n                                                                </div>\r\n                                                                <small className=\"text-muted\">\r\n                                                                    {formatDate(\r\n                                                                        weekInfo\r\n                                                                            .startWeekInfo\r\n                                                                            .mondayOfWeek\r\n                                                                    )}\r\n                                                                </small>\r\n                                                            </div>\r\n                                                        );\r\n                                                    }\r\n                                                    return formatDate(\r\n                                                        phase.startOn\r\n                                                    );\r\n                                                })()\r\n                                            )}\r\n                                        </td>\r\n                                        <td>\r\n                                            {phase.isEditing ? (\r\n                                                <div>\r\n                                                    <Input\r\n                                                        type=\"number\"\r\n                                                        value={\r\n                                                            phase.durationInWeeks ||\r\n                                                            ''\r\n                                                        }\r\n                                                        onChange={e => {\r\n                                                            const duration =\r\n                                                                parseInt(\r\n                                                                    e.target\r\n                                                                        .value,\r\n                                                                    10\r\n                                                                ) || 1;\r\n                                                            updatePhaseWeekData(\r\n                                                                phase.id,\r\n                                                                phase.startGlobalWeekNumber,\r\n                                                                duration\r\n                                                            );\r\n                                                        }}\r\n                                                        min=\"1\"\r\n                                                        max={\r\n                                                            project.durationInWeeks\r\n                                                        }\r\n                                                        bsSize=\"sm\"\r\n                                                        style={{width: '80px'}}\r\n                                                    />\r\n                                                    <FieldError\r\n                                                        path={`phases.${phase.index}.durationInWeeks`}\r\n                                                        error={\r\n                                                            bulkPhaseUpdate.error\r\n                                                        }\r\n                                                    />\r\n                                                    {(() => {\r\n                                                        const weekInfo =\r\n                                                            getPhaseWeekInfo(\r\n                                                                phase\r\n                                                            );\r\n                                                        if (weekInfo) {\r\n                                                            return (\r\n                                                                <FormText>\r\n                                                                    Ends Week{' '}\r\n                                                                    {\r\n                                                                        weekInfo\r\n                                                                            .endWeekInfo\r\n                                                                            .weekOfYear\r\n                                                                    }{' '}\r\n                                                                    of{' '}\r\n                                                                    {\r\n                                                                        weekInfo\r\n                                                                            .endWeekInfo\r\n                                                                            .year\r\n                                                                    }\r\n                                                                    <br />\r\n                                                                    <small className=\"text-muted\">\r\n                                                                        (Sun,{' '}\r\n                                                                        {formatDate(\r\n                                                                            addDays(\r\n                                                                                weekInfo\r\n                                                                                    .endWeekInfo\r\n                                                                                    .mondayOfWeek,\r\n                                                                                6\r\n                                                                            )\r\n                                                                        )}\r\n                                                                        )\r\n                                                                    </small>\r\n                                                                </FormText>\r\n                                                            );\r\n                                                        }\r\n                                                        return null;\r\n                                                    })()}\r\n                                                </div>\r\n                                            ) : (\r\n                                                <div>\r\n                                                    <div>\r\n                                                        {phase.durationInWeeks}{' '}\r\n                                                        week\r\n                                                        {phase.durationInWeeks !==\r\n                                                        1\r\n                                                            ? 's'\r\n                                                            : ''}\r\n                                                    </div>\r\n                                                    <small className=\"text-muted\">\r\n                                                        Ends{' '}\r\n                                                        {formatDate(\r\n                                                            phase.endOn\r\n                                                        )}\r\n                                                    </small>\r\n                                                </div>\r\n                                            )}\r\n                                        </td>\r\n                                        {canCurrentUserEdit && (\r\n                                            <td className=\"phase-actions\">\r\n                                                <div className=\"btn-group-inline\">\r\n                                                    <Button\r\n                                                        color=\"link\"\r\n                                                        size=\"sm\"\r\n                                                        className=\"p-0\"\r\n                                                        onClick={() =>\r\n                                                            togglePhaseEdit(\r\n                                                                phase.id\r\n                                                            )\r\n                                                        }\r\n                                                        title={\r\n                                                            phase.isEditing\r\n                                                                ? 'Cancel editing'\r\n                                                                : 'Edit phase'\r\n                                                        }\r\n                                                    >\r\n                                                        {phase.isEditing ? (\r\n                                                            <X size={14} />\r\n                                                        ) : (\r\n                                                            <Edit size={14} />\r\n                                                        )}\r\n                                                    </Button>\r\n                                                </div>\r\n                                            </td>\r\n                                        )}\r\n                                    </tr>\r\n                                    {/* Description section - for both editing and non-editing modes */}\r\n                                    {isExpanded && !phase.isNew && (\r\n                                        <tr>\r\n                                            <td colSpan={6} className=\"p-0\">\r\n                                                {/* Description section */}\r\n                                                {(phase.isEditing ||\r\n                                                    phase.description) && (\r\n                                                    <div className=\"p-3 bg-light border-bottom\">\r\n                                                        <small className=\"text-muted d-block mb-1\">\r\n                                                            Description:\r\n                                                        </small>\r\n                                                        {phase.isEditing ? (\r\n                                                            <FormGroup className=\"mb-0\">\r\n                                                                <Input\r\n                                                                    type=\"textarea\"\r\n                                                                    value={\r\n                                                                        phase.description ||\r\n                                                                        ''\r\n                                                                    }\r\n                                                                    onChange={e =>\r\n                                                                        updatePhaseField(\r\n                                                                            phase.id,\r\n                                                                            'description',\r\n                                                                            e\r\n                                                                                .target\r\n                                                                                .value\r\n                                                                        )\r\n                                                                    }\r\n                                                                    placeholder=\"Phase description\"\r\n                                                                    rows={3}\r\n                                                                    bsSize=\"sm\"\r\n                                                                />\r\n                                                            </FormGroup>\r\n                                                        ) : (\r\n                                                            <div>\r\n                                                                {\r\n                                                                    phase.description\r\n                                                                }\r\n                                                            </div>\r\n                                                        )}\r\n                                                    </div>\r\n                                                )}\r\n                                            </td>\r\n                                            {canCurrentUserEdit && (\r\n                                                <td>\r\n                                                    {phase.isEditing &&\r\n                                                        !phase.isNew && (\r\n                                                            <div className=\"d-flex justify-content-start\">\r\n                                                                <Button\r\n                                                                    color=\"link\"\r\n                                                                    size=\"sm\"\r\n                                                                    className=\"p-0 text-danger me-2\"\r\n                                                                    onClick={() =>\r\n                                                                        handleDeletePhase(\r\n                                                                            phase.id\r\n                                                                        )\r\n                                                                    }\r\n                                                                    disabled={\r\n                                                                        deletePhase.isPending\r\n                                                                    }\r\n                                                                    title=\"Delete phase\"\r\n                                                                >\r\n                                                                    <Trash2\r\n                                                                        size={\r\n                                                                            14\r\n                                                                        }\r\n                                                                    />\r\n                                                                </Button>\r\n                                                            </div>\r\n                                                        )}\r\n                                                </td>\r\n                                            )}\r\n                                        </tr>\r\n                                    )}\r\n                                </React.Fragment>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            )}\r\n\r\n            {/* Reason for Change Modal */}\r\n            <ReasonForChangeModal\r\n                isOpen={isReasonModalOpen}\r\n                onClose={() => {\r\n                    setIsReasonModalOpen(false);\r\n                    setPendingUpdates([]);\r\n                }}\r\n                onSubmit={submitUpdates}\r\n                description={`update ${pendingUpdates.length} phase${pendingUpdates.length > 1 ? 's' : ''}`}\r\n                isPending={bulkPhaseUpdate.isPending}\r\n                projectStatus={project?.status}\r\n            />\r\n\r\n            {/* Delete Phase Confirmation Modal */}\r\n            <ReasonForChangeModal\r\n                isOpen={isDeleteModalOpen}\r\n                onClose={() => {\r\n                    setIsDeleteModalOpen(false);\r\n                    setPhaseToDelete(null);\r\n                }}\r\n                onSubmit={confirmDeletePhase}\r\n                description=\"delete this phase\"\r\n                isPending={deletePhase.isPending}\r\n                projectStatus={project?.status}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PhasesSection;\r\n","import React from 'react';\r\nimport { formatDate } from '../../lib/dateUtils';\r\nimport { getWeekInfo, getMondayFromGlobalWeek, addDays } from '../../lib/scheduling';\r\n\r\ninterface WeekDisplayProps {\r\n    weekInfo?: ReturnType<typeof getWeekInfo>;\r\n    globalWeekNumber?: number;\r\n}\r\n\r\nconst WeekDisplay: React.FC<WeekDisplayProps> = ({ weekInfo, globalWeekNumber }) => {\r\n    // If weekInfo is not provided, calculate it from globalWeekNumber\r\n    const displayWeekInfo = weekInfo || (globalWeekNumber ? getWeekInfo(getMondayFromGlobalWeek(globalWeekNumber)) : null);\r\n    \r\n    if (!displayWeekInfo) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <span className=\"fw-medium\">\r\n                Week {displayWeekInfo.weekOfYear} of {displayWeekInfo.year}\r\n            </span>\r\n            <small className=\"text-muted ms-2\">\r\n                (\r\n                {formatDate(displayWeekInfo.mondayOfWeek)} -{' '}\r\n                {formatDate(addDays(displayWeekInfo.mondayOfWeek, 6))}\r\n                )\r\n            </small>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default WeekDisplay;","import {ProjectAllocationModel} from '../../types';\r\nimport {UseQueryOptions, UseQueryResult, useQuery} from '@tanstack/react-query';\r\nimport baseUrl from '../baseUrl';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport {handleResponse} from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\n\r\ntype AllocationsQueryOptions = Omit<\r\n    UseQueryOptions<\r\n        ProjectAllocationModel[],\r\n        Error | ProblemDetailsError,\r\n        ProjectAllocationModel[],\r\n        readonly unknown[]\r\n    >,\r\n    'queryKey' | 'queryFn'\r\n>;\r\n\r\nconst useGetProjectAllocations = (\r\n    projectId: string,\r\n    options?: AllocationsQueryOptions\r\n): UseQueryResult<ProjectAllocationModel[], Error> => {\r\n    const url = `${baseUrl}/api/projects/${projectId}/allocations`;\r\n    const queryKey = ['project-allocations', projectId];\r\n\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    return useQuery({\r\n        queryKey,\r\n        queryFn: async () => {\r\n            const response = await authenticatedFetch(url);\r\n            return handleResponse<ProjectAllocationModel[]>(response);\r\n        },\r\n        enabled: !!projectId,\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useGetProjectAllocations;\r\n","import {EmptyResult} from '../../types';\r\nimport {UseMutationOptions, useMutation} from '@tanstack/react-query';\r\nimport baseUrl from '../baseUrl';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport {handleResponse} from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\n\r\nexport interface DeleteAllocationParams {\r\n    allocationId: string;\r\n    changeReason?: string;\r\n}\r\n\r\ntype DeleteAllocationMutationOptions = Omit<\r\n    UseMutationOptions<\r\n        EmptyResult,\r\n        Error | ProblemDetailsError,\r\n        DeleteAllocationParams,\r\n        unknown\r\n    >,\r\n    'mutationFn'\r\n>;\r\n\r\nconst useDeleteProjectAllocation = (\r\n    options?: DeleteAllocationMutationOptions\r\n) => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    return useMutation({\r\n        mutationFn: async ({\r\n            allocationId,\r\n            changeReason\r\n        }: DeleteAllocationParams) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/allocations/${allocationId}`,\r\n                {\r\n                    method: 'DELETE',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({changeReason})\r\n                }\r\n            );\r\n            return handleResponse<EmptyResult>(response);\r\n        },\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useDeleteProjectAllocation;\r\n","import {\r\n    useMutation,\r\n    useQueryClient,\r\n    UseMutationResult\r\n} from '@tanstack/react-query';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport baseUrl from '../baseUrl';\r\nimport {handleResponse} from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\nimport {AllocationType, EmptyResult} from '../../types.ts';\r\n\r\nexport interface ProjectAllocationUpdateItem {\r\n    id?: string; // undefined for new allocations\r\n    personId?: string;\r\n    teamId?: string;\r\n    description?: string;\r\n    globalWeekNumber?: number;\r\n    hoursBAU?: number;\r\n    hoursNonBAU?: number;\r\n    allocationType?: AllocationType;\r\n    index: number; // Track the original index for error mapping\r\n}\r\n\r\nexport interface BulkAllocationUpdateCommand {\r\n    projectId: string;\r\n    allocations: ProjectAllocationUpdateItem[];\r\n    changeReason: string;\r\n}\r\n\r\nexport const useBulkUpdateAllocation = (): UseMutationResult<\r\n    EmptyResult,\r\n    Error | ProblemDetailsError,\r\n    BulkAllocationUpdateCommand\r\n> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation({\r\n        mutationFn: async (command: BulkAllocationUpdateCommand) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/projects/${command.projectId}/allocations/bulk-update`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify(command)\r\n                }\r\n            );\r\n            return handleResponse<EmptyResult>(response);\r\n        },\r\n        onSuccess: (_, variables) => {\r\n            queryClient.invalidateQueries({\r\n                queryKey: ['project-allocations', variables.projectId]\r\n            });\r\n            queryClient.invalidateQueries({\r\n                queryKey: ['project-allocations']\r\n            });\r\n        }\r\n    });\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport {\r\n    Button,\r\n    Input,\r\n    Alert,\r\n    Spinner,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Row,\r\n    Col\r\n} from 'reactstrap';\r\nimport {\r\n    ChevronDown,\r\n    ChevronRight,\r\n    Edit,\r\n    Plus,\r\n    Save,\r\n    Trash2,\r\n    X,\r\n    User,\r\n    Users,\r\n    Calendar\r\n} from 'lucide-react';\r\nimport {\r\n    getWeekInfo,\r\n    getMondayFromGlobalWeek,\r\n    addDays\r\n} from '../../../lib/scheduling';\r\nimport PersonSelector from '../../utility/PersonSelector';\r\nimport ErrorDisplay from '../../utility/ErrorDisplay.tsx';\r\nimport FieldError from '../../utility/FieldError';\r\nimport WeekDisplay from '../../utility/WeekDisplay';\r\nimport ReasonForChangeModal from './ReasonForChangeModal.tsx';\r\nimport useGetProjectAllocations from '../../../api/projectAllocations/useGetProjectAllocations.ts';\r\nimport useDeleteProjectAllocation from '../../../api/projectAllocations/useDeleteProjectAllocation.ts';\r\nimport useGetPagedTeams from '../../../api/teams/useGetPagedTeams';\r\nimport {\r\n    useBulkUpdateAllocation,\r\n    ProjectAllocationUpdateItem,\r\n    BulkAllocationUpdateCommand\r\n} from '../../../api/projects/useBulkUpdateAllocation.ts';\r\nimport {\r\n    ProjectModel,\r\n    ProjectAllocationModel,\r\n    AllocationType,\r\n    EngagementContext\r\n} from '../../../types.ts';\r\n\r\ninterface EditableAllocation extends ProjectAllocationModel {\r\n    isNew?: boolean;\r\n    isEditing?: boolean;\r\n    hasChanges?: boolean;\r\n    originalData?: Partial<ProjectAllocationModel>;\r\n    index: number;\r\n    assignmentType: 'person' | 'team';\r\n}\r\n\r\ninterface WeekAllocation {\r\n    globalWeekNumber: number;\r\n    weekInfo: ReturnType<typeof getWeekInfo>;\r\n    allocations: EditableAllocation[];\r\n    isExpanded: boolean;\r\n    isEditing: boolean;\r\n}\r\n\r\ninterface AllocationSectionProps {\r\n    project: ProjectModel;\r\n    canCurrentUserEdit: boolean;\r\n}\r\n\r\nconst AllocationEditForm: React.FC<{\r\n    allocation: EditableAllocation;\r\n    project: ProjectModel;\r\n    teamsData: any;\r\n    bulkUpdateAllocation: any;\r\n    onUpdateField: (\r\n        globalWeekNumber: number,\r\n        allocationId: string,\r\n        field: string,\r\n        value: any\r\n    ) => void;\r\n    onDelete: (allocationId: string) => void;\r\n    deleteAllocation: any;\r\n}> = ({\r\n    allocation,\r\n    project,\r\n    teamsData,\r\n    bulkUpdateAllocation,\r\n    onUpdateField,\r\n    onDelete,\r\n    deleteAllocation\r\n}) => {\r\n    const teamOptions =\r\n        teamsData?.items?.map((team: any) => ({\r\n            value: team.id,\r\n            label: team.name\r\n        })) || [];\r\n\r\n    return (\r\n        <Form className=\"p-3 bg-light border-top\">\r\n            <Row>\r\n                <Col md={6}>\r\n                    <FormGroup>\r\n                        <Label>Assignment Type</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            value={allocation.assignmentType}\r\n                            onChange={e => {\r\n                                const assignmentType = e.target.value as\r\n                                    | 'person'\r\n                                    | 'team';\r\n                                onUpdateField(\r\n                                    allocation.globalWeekNumber,\r\n                                    allocation.id,\r\n                                    'assignmentType',\r\n                                    assignmentType\r\n                                );\r\n                                if (assignmentType === 'person') {\r\n                                    onUpdateField(\r\n                                        allocation.globalWeekNumber,\r\n                                        allocation.id,\r\n                                        'teamId',\r\n                                        undefined\r\n                                    );\r\n                                } else {\r\n                                    onUpdateField(\r\n                                        allocation.globalWeekNumber,\r\n                                        allocation.id,\r\n                                        'personId',\r\n                                        undefined\r\n                                    );\r\n                                }\r\n                            }}\r\n                            disabled={!allocation.isNew}\r\n                        >\r\n                            <option value=\"person\">Person</option>\r\n                            <option value=\"team\">Team</option>\r\n                        </Input>\r\n                        <FieldError\r\n                            path={`allocations.${allocation.index}.resource`}\r\n                            error={bulkUpdateAllocation.error}\r\n                        />\r\n                        {!allocation.isNew && (\r\n                            <small className=\"text-muted mt-1 d-block\">\r\n                                Assignment type cannot be changed for existing\r\n                                records. Delete this allocation and create a new\r\n                                one to change the assignment type.\r\n                            </small>\r\n                        )}\r\n                    </FormGroup>\r\n\r\n                    {allocation.assignmentType === 'person' ? (\r\n                        <>\r\n                            <PersonSelector\r\n                                selectedPersonIds={\r\n                                    allocation.personId\r\n                                        ? [allocation.personId]\r\n                                        : []\r\n                                }\r\n                                onPersonSelectionChange={selectedIds => {\r\n                                    onUpdateField(\r\n                                        allocation.globalWeekNumber,\r\n                                        allocation.id,\r\n                                        'personId',\r\n                                        selectedIds[0] || undefined\r\n                                    );\r\n                                }}\r\n                                label=\"Person\"\r\n                                placeholder=\"Select a person\"\r\n                                disabled={!allocation.isNew}\r\n                            />\r\n                            {!allocation.isNew && (\r\n                                <small className=\"text-muted mt-1 d-block\">\r\n                                    Person cannot be changed for existing\r\n                                    records. Delete this allocation and create a\r\n                                    new one to change the person.\r\n                                </small>\r\n                            )}\r\n                        </>\r\n                    ) : (\r\n                        <FormGroup>\r\n                            <Label>Team</Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                value={allocation.teamId || ''}\r\n                                onChange={e =>\r\n                                    onUpdateField(\r\n                                        allocation.globalWeekNumber,\r\n                                        allocation.id,\r\n                                        'teamId',\r\n                                        e.target.value || undefined\r\n                                    )\r\n                                }\r\n                                disabled={!allocation.isNew}\r\n                            >\r\n                                <option value=\"\">Select a team</option>\r\n                                {teamOptions.map((team: any) => (\r\n                                    <option key={team.value} value={team.value}>\r\n                                        {team.label}\r\n                                    </option>\r\n                                ))}\r\n                            </Input>\r\n                            <FieldError\r\n                                path={`allocations.${allocation.index}.teamId`}\r\n                                error={bulkUpdateAllocation.error}\r\n                            />\r\n                            {!allocation.isNew && (\r\n                                <small className=\"text-muted mt-1 d-block\">\r\n                                    Team cannot be changed for existing records.\r\n                                    Delete this allocation and create a new one\r\n                                    to change the team.\r\n                                </small>\r\n                            )}\r\n                        </FormGroup>\r\n                    )}\r\n                </Col>\r\n\r\n                <Col md={6}>\r\n                    <Row>\r\n                        <Col md={6}>\r\n                            <FormGroup>\r\n                                <Label>Week</Label>\r\n                                <div className=\"form-control-plaintext\">\r\n                                    <WeekDisplay\r\n                                        globalWeekNumber={\r\n                                            allocation.globalWeekNumber\r\n                                        }\r\n                                    />\r\n                                </div>\r\n                                <FieldError\r\n                                    path={`allocations.${allocation.index}.globalWeekNumber`}\r\n                                    error={bulkUpdateAllocation.error}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6}></Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col md={6}>\r\n                            <FormGroup>\r\n                                <Label>Business As Usual Hours</Label>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    value={allocation.hoursBAU}\r\n                                    onChange={e =>\r\n                                        onUpdateField(\r\n                                            allocation.globalWeekNumber,\r\n                                            allocation.id,\r\n                                            'hoursBAU',\r\n                                            parseFloat(e.target.value) || 0\r\n                                        )\r\n                                    }\r\n                                    min=\"0\"\r\n                                    step=\"0.25\"\r\n                                />\r\n                                <small className=\"text-muted\">\r\n                                    Regular operational work and ongoing\r\n                                    activities\r\n                                </small>\r\n                                <FieldError\r\n                                    path={`allocations.${allocation.index}.hoursBAU`}\r\n                                    error={bulkUpdateAllocation.error}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        {/* Only show Non-BAU Hours field if project is not BAU context, or if it already has a value */}\r\n                        {(project.engagementContext !== EngagementContext.BAU ||\r\n                          (allocation.hoursNonBAU && allocation.hoursNonBAU > 0)) && (\r\n                            <Col md={6}>\r\n                                <FormGroup>\r\n                                    <Label>Non-Business As Usual Hours</Label>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        value={allocation.hoursNonBAU}\r\n                                        onChange={e =>\r\n                                            onUpdateField(\r\n                                                allocation.globalWeekNumber,\r\n                                                allocation.id,\r\n                                                'hoursNonBAU',\r\n                                                parseFloat(e.target.value) || 0\r\n                                            )\r\n                                        }\r\n                                        min=\"0\"\r\n                                        step=\"0.5\"\r\n                                    />\r\n                                    <small className=\"text-muted\">\r\n                                        Project work, initiatives, and special\r\n                                        activities\r\n                                    </small>\r\n                                    <FieldError\r\n                                        path={`allocations.${allocation.index}.hoursNonBAU`}\r\n                                        error={bulkUpdateAllocation.error}\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                        )}\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col md={6}>\r\n                            <FormGroup>\r\n                                <Label>Allocation Type</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    value={allocation.allocationType}\r\n                                    onChange={e =>\r\n                                        onUpdateField(\r\n                                            allocation.globalWeekNumber,\r\n                                            allocation.id,\r\n                                            'allocationType',\r\n                                            parseInt(\r\n                                                e.target.value\r\n                                            ) as AllocationType\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    <option value={AllocationType.Delivery}>\r\n                                        Delivery\r\n                                    </option>\r\n                                    <option value={AllocationType.DeliveredTo}>\r\n                                        Delivered To\r\n                                    </option>\r\n                                </Input>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6}></Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n\r\n            {/* Description Row - Full Width at Bottom */}\r\n            <Row className=\"mt-3\">\r\n                <Col md={12}>\r\n                    <FormGroup>\r\n                        <Label>Description</Label>\r\n                        <Input\r\n                            type=\"textarea\"\r\n                            value={allocation.description}\r\n                            onChange={e =>\r\n                                onUpdateField(\r\n                                    allocation.globalWeekNumber,\r\n                                    allocation.id,\r\n                                    'description',\r\n                                    e.target.value\r\n                                )\r\n                            }\r\n                            rows={3}\r\n                        />\r\n                        <FieldError\r\n                            path={`allocations.${allocation.index}.description`}\r\n                            error={bulkUpdateAllocation.error}\r\n                        />\r\n                    </FormGroup>\r\n                </Col>\r\n            </Row>\r\n\r\n            {/* Delete button in bottom left */}\r\n            {allocation.isEditing && !allocation.isNew && (\r\n                <div className=\"mt-3 d-flex justify-content-start\">\r\n                    <Button\r\n                        color=\"link\"\r\n                        size=\"sm\"\r\n                        className=\"p-1 text-danger\"\r\n                        onClick={() => onDelete(allocation.id)}\r\n                        disabled={deleteAllocation.isPending}\r\n                        title=\"Delete allocation\"\r\n                    >\r\n                        <Trash2 size={12} className=\"me-1\" />\r\n                        Delete\r\n                    </Button>\r\n                </div>\r\n            )}\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst AllocationSection: React.FC<AllocationSectionProps> = ({\r\n    project,\r\n    canCurrentUserEdit\r\n}) => {\r\n    const [weekAllocations, setWeekAllocations] = useState<WeekAllocation[]>(\r\n        []\r\n    );\r\n    const [isReasonModalOpen, setIsReasonModalOpen] = useState(false);\r\n    const [pendingUpdates, setPendingUpdates] = useState<\r\n        ProjectAllocationUpdateItem[]\r\n    >([]);\r\n    const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\r\n    const [allocationToDelete, setAllocationToDelete] = useState<string | null>(\r\n        null\r\n    );\r\n\r\n    const {\r\n        data: allocationsData,\r\n        isLoading,\r\n        error: allocationsError\r\n    } = useGetProjectAllocations(project.id!);\r\n\r\n    const {data: teamsData} = useGetPagedTeams(1, 100);\r\n    const bulkUpdateAllocation = useBulkUpdateAllocation();\r\n    const deleteAllocation = useDeleteProjectAllocation();\r\n\r\n    // Generate week allocations for the entire project duration\r\n    useEffect(() => {\r\n        if (!project.startGlobalWeekNumber || !project.durationInWeeks) return;\r\n\r\n        const weeks: WeekAllocation[] = [];\r\n        for (let i = 0; i < project.durationInWeeks; i++) {\r\n            const globalWeekNumber = project.startGlobalWeekNumber + i;\r\n            const weekInfo = getWeekInfo(\r\n                getMondayFromGlobalWeek(globalWeekNumber)\r\n            );\r\n\r\n            // Get allocations for this week\r\n            const weekAllocationsData =\r\n                allocationsData?.filter(\r\n                    allocation =>\r\n                        allocation.globalWeekNumber === globalWeekNumber\r\n                ) || [];\r\n\r\n            const editableAllocations: EditableAllocation[] =\r\n                weekAllocationsData.map((allocation, index) => ({\r\n                    ...allocation,\r\n                    isNew: false,\r\n                    isEditing: false,\r\n                    hasChanges: false,\r\n                    originalData: {...allocation},\r\n                    index,\r\n                    assignmentType: allocation.personId ? 'person' : 'team'\r\n                }));\r\n\r\n            weeks.push({\r\n                globalWeekNumber,\r\n                weekInfo,\r\n                allocations: editableAllocations,\r\n                isExpanded: false,\r\n                isEditing: false\r\n            });\r\n        }\r\n\r\n        setWeekAllocations(weeks);\r\n    }, [\r\n        project.startGlobalWeekNumber,\r\n        project.durationInWeeks,\r\n        allocationsData\r\n    ]);\r\n\r\n    const toggleWeekExpansion = (globalWeekNumber: number) => {\r\n        setWeekAllocations(prev =>\r\n            prev.map(week =>\r\n                week.globalWeekNumber === globalWeekNumber\r\n                    ? {...week, isExpanded: !week.isExpanded}\r\n                    : week\r\n            )\r\n        );\r\n    };\r\n\r\n    const addNewAllocation = (globalWeekNumber: number) => {\r\n        const weekInfo = getWeekInfo(getMondayFromGlobalWeek(globalWeekNumber));\r\n        const weekStart = weekInfo.mondayOfWeek.toISOString();\r\n        const weekEnd = addDays(weekInfo.mondayOfWeek, 6).toISOString();\r\n\r\n        // For BAU projects, default to BAU hours instead of Non-BAU hours\r\n        const defaultHoursBAU = project.engagementContext === EngagementContext.BAU ? 8 : 0;\r\n        const defaultHoursNonBAU = project.engagementContext === EngagementContext.BAU ? 0 : 8;\r\n\r\n        const newAllocation: EditableAllocation = {\r\n            id: `temp-${Date.now()}`,\r\n            projectId: project.id!,\r\n            personId: undefined,\r\n            teamId: undefined,\r\n            person: undefined,\r\n            team: undefined,\r\n            description: '',\r\n            globalWeekNumber,\r\n            weekBeginningOn: weekStart,\r\n            weekEndOn: weekEnd,\r\n            hoursBAU: defaultHoursBAU,\r\n            hoursNonBAU: defaultHoursNonBAU,\r\n            allocationType: AllocationType.Delivery,\r\n            createdAt: new Date().toISOString(),\r\n            updatedAt: undefined,\r\n            isNew: true,\r\n            isEditing: true,\r\n            hasChanges: true,\r\n            originalData: {},\r\n            index: 0,\r\n            assignmentType: 'person'\r\n        };\r\n\r\n        setWeekAllocations(prev =>\r\n            prev.map(week =>\r\n                week.globalWeekNumber === globalWeekNumber\r\n                    ? {\r\n                          ...week,\r\n                          allocations: [...week.allocations, newAllocation],\r\n                          isExpanded: true,\r\n                          isEditing: true\r\n                      }\r\n                    : week\r\n            )\r\n        );\r\n    };\r\n\r\n    const toggleAllocationEdit = (\r\n        globalWeekNumber: number,\r\n        allocationId: string\r\n    ) => {\r\n        setWeekAllocations(prev =>\r\n            prev.map(week =>\r\n                week.globalWeekNumber === globalWeekNumber\r\n                    ? {\r\n                          ...week,\r\n                          allocations: week.allocations\r\n                              .map(allocation => {\r\n                                  if (allocation.id === allocationId) {\r\n                                      if (allocation.isEditing) {\r\n                                          // Cancel editing - revert to original data\r\n                                          if (allocation.isNew) {\r\n                                              return null; // Remove new allocations when canceling\r\n                                          }\r\n                                          return {\r\n                                              ...allocation.originalData!,\r\n                                              isEditing: false,\r\n                                              hasChanges: false,\r\n                                              originalData:\r\n                                                  allocation.originalData\r\n                                          } as EditableAllocation;\r\n                                      } else {\r\n                                          // Start editing\r\n                                          return {\r\n                                              ...allocation,\r\n                                              isEditing: true,\r\n                                              originalData: {...allocation}\r\n                                          };\r\n                                      }\r\n                                  }\r\n                                  return allocation;\r\n                              })\r\n                              .filter(Boolean) as EditableAllocation[],\r\n                          isEditing: week.allocations.some(\r\n                              a => a.isEditing && a.hasChanges\r\n                          )\r\n                      }\r\n                    : week\r\n            )\r\n        );\r\n    };\r\n\r\n    const updateAllocationField = (\r\n        globalWeekNumber: number,\r\n        allocationId: string,\r\n        field: string,\r\n        value: any\r\n    ) => {\r\n        setWeekAllocations(prev =>\r\n            prev.map(week =>\r\n                week.globalWeekNumber === globalWeekNumber\r\n                    ? {\r\n                          ...week,\r\n                          allocations: week.allocations.map(allocation => {\r\n                              if (allocation.id === allocationId) {\r\n                                  const updatedAllocation = {\r\n                                      ...allocation,\r\n                                      [field]: value,\r\n                                      hasChanges: true\r\n                                  };\r\n                                  return updatedAllocation;\r\n                              }\r\n                              return allocation;\r\n                          }),\r\n                          isEditing: true\r\n                      }\r\n                    : week\r\n            )\r\n        );\r\n    };\r\n\r\n    const getChangedFields = (\r\n        allocation: EditableAllocation\r\n    ): ProjectAllocationUpdateItem => {\r\n        if (allocation.isNew) {\r\n            return {\r\n                personId: allocation.personId,\r\n                teamId: allocation.teamId,\r\n                description: allocation.description,\r\n                globalWeekNumber: allocation.globalWeekNumber,\r\n                hoursBAU: allocation.hoursBAU,\r\n                hoursNonBAU: allocation.hoursNonBAU,\r\n                allocationType: allocation.allocationType,\r\n                index: allocation.index\r\n            };\r\n        }\r\n\r\n        const changes: ProjectAllocationUpdateItem = {\r\n            id: allocation.id,\r\n            index: allocation.index\r\n        };\r\n\r\n        const original = allocation.originalData!;\r\n        if (allocation.personId !== original.personId)\r\n            changes.personId = allocation.personId;\r\n        if (allocation.teamId !== original.teamId)\r\n            changes.teamId = allocation.teamId;\r\n        if (allocation.description !== original.description)\r\n            changes.description = allocation.description;\r\n        if (allocation.hoursBAU !== original.hoursBAU)\r\n            changes.hoursBAU = allocation.hoursBAU;\r\n        if (allocation.hoursNonBAU !== original.hoursNonBAU)\r\n            changes.hoursNonBAU = allocation.hoursNonBAU;\r\n        if (allocation.allocationType !== original.allocationType)\r\n            changes.allocationType = allocation.allocationType;\r\n\r\n        return changes;\r\n    };\r\n\r\n    const handleUpdate = () => {\r\n        const allocationsToUpdate = weekAllocations\r\n            .flatMap(week => week.allocations)\r\n            .filter(\r\n                allocation => allocation.isEditing && allocation.hasChanges\r\n            );\r\n\r\n        if (allocationsToUpdate.length === 0) return;\r\n\r\n        const updates = allocationsToUpdate.map(getChangedFields);\r\n        setPendingUpdates(updates);\r\n        setIsReasonModalOpen(true);\r\n    };\r\n\r\n    const submitUpdates = async (reason: string) => {\r\n        if (pendingUpdates.length === 0) return;\r\n\r\n        const command: BulkAllocationUpdateCommand = {\r\n            projectId: project.id!,\r\n            allocations: pendingUpdates,\r\n            changeReason: reason\r\n        };\r\n\r\n        bulkUpdateAllocation.mutate(command, {\r\n            onSuccess: () => {\r\n                // Reset editing states\r\n                setWeekAllocations(prev =>\r\n                    prev.map(week => ({\r\n                        ...week,\r\n                        allocations: week.allocations.map(allocation => ({\r\n                            ...allocation,\r\n                            isEditing: false,\r\n                            hasChanges: false,\r\n                            originalData: {...allocation}\r\n                        })),\r\n                        isEditing: false\r\n                    }))\r\n                );\r\n\r\n                setPendingUpdates([]);\r\n                setIsReasonModalOpen(false);\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleDeleteAllocation = (allocationId: string) => {\r\n        setAllocationToDelete(allocationId);\r\n        setIsDeleteModalOpen(true);\r\n    };\r\n\r\n    const confirmDeleteAllocation = async (reason: string) => {\r\n        if (allocationToDelete) {\r\n            deleteAllocation.mutate(\r\n                {\r\n                    allocationId: allocationToDelete,\r\n                    changeReason: reason\r\n                },\r\n                {\r\n                    onSuccess: () => {\r\n                        setIsDeleteModalOpen(false);\r\n                        setAllocationToDelete(null);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    const hasEditingAllocations = weekAllocations.some(week => week.isEditing);\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div className=\"mb-4\">\r\n                <h3>Resource Allocations</h3>\r\n                <div className=\"d-flex align-items-center\">\r\n                    <Spinner size=\"sm\" className=\"me-2\" />\r\n                    <span className=\"text-muted\">Loading allocations...</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"mb-4\">\r\n            <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                <h3>Resource Allocations</h3>\r\n                <div>\r\n                    {hasEditingAllocations && (\r\n                        <Button\r\n                            color=\"success\"\r\n                            size=\"sm\"\r\n                            onClick={handleUpdate}\r\n                            disabled={bulkUpdateAllocation.isPending}\r\n                            className=\"me-2\"\r\n                        >\r\n                            <Save size={14} className=\"me-1\" />\r\n                            Update Allocations\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Display update errors */}\r\n            <ErrorDisplay\r\n                error={bulkUpdateAllocation.error}\r\n                title=\"Failed to update allocations\"\r\n                onDismiss={() => bulkUpdateAllocation.reset()}\r\n                className=\"mb-3\"\r\n            />\r\n\r\n            <ErrorDisplay\r\n                error={allocationsError}\r\n                title=\"Failed to load allocations\"\r\n                className=\"mb-3\"\r\n            />\r\n\r\n            {deleteAllocation.error && (\r\n                <ErrorDisplay\r\n                    error={deleteAllocation.error}\r\n                    title=\"Failed to delete allocation\"\r\n                    onDismiss={() => deleteAllocation.reset()}\r\n                    className=\"mb-3\"\r\n                />\r\n            )}\r\n\r\n            {weekAllocations.length === 0 ? (\r\n                <p className=\"text-muted\">No weeks available for allocation</p>\r\n            ) : (\r\n                <div className=\"border rounded\">\r\n                    {weekAllocations.map(week => (\r\n                        <div\r\n                            key={week.globalWeekNumber}\r\n                            className=\"border-bottom\"\r\n                        >\r\n                            <div\r\n                                className=\"d-flex justify-content-between align-items-center p-3 bg-light cursor-pointer\"\r\n                                onClick={() =>\r\n                                    toggleWeekExpansion(week.globalWeekNumber)\r\n                                }\r\n                                style={{cursor: 'pointer'}}\r\n                            >\r\n                                <div className=\"d-flex align-items-center\">\r\n                                    {week.isExpanded ? (\r\n                                        <ChevronDown\r\n                                            size={16}\r\n                                            className=\"me-2\"\r\n                                        />\r\n                                    ) : (\r\n                                        <ChevronRight\r\n                                            size={16}\r\n                                            className=\"me-2\"\r\n                                        />\r\n                                    )}\r\n                                    <Calendar\r\n                                        size={16}\r\n                                        className=\"me-2 text-muted\"\r\n                                    />\r\n                                    <div>\r\n                                        <WeekDisplay weekInfo={week.weekInfo} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"d-flex align-items-center\">\r\n                                    <span className=\"badge bg-secondary me-2\">\r\n                                        {week.allocations.length} allocation\r\n                                        {week.allocations.length !== 1\r\n                                            ? 's'\r\n                                            : ''}\r\n                                    </span>\r\n                                    {canCurrentUserEdit && (\r\n                                        <Button\r\n                                            color=\"primary\"\r\n                                            outline\r\n                                            size=\"sm\"\r\n                                            onClick={e => {\r\n                                                e.stopPropagation();\r\n                                                addNewAllocation(\r\n                                                    week.globalWeekNumber\r\n                                                );\r\n                                            }}\r\n                                        >\r\n                                            <Plus size={14} className=\"me-1\" />\r\n                                            Add Resource\r\n                                        </Button>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n\r\n                            {week.isExpanded && (\r\n                                <div className=\"p-3\">\r\n                                    {week.allocations.length === 0 ? (\r\n                                        <Alert color=\"info\" className=\"mb-0\">\r\n                                            <small>\r\n                                                No resource allocations for this\r\n                                                week\r\n                                            </small>\r\n                                        </Alert>\r\n                                    ) : (\r\n                                        <div className=\"table-responsive\">\r\n                                            <table className=\"table table-sm mb-0\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th>Resource</th>\r\n                                                        <th>Description</th>\r\n                                                        <th>Hours</th>\r\n                                                        <th>Type</th>\r\n                                                        {canCurrentUserEdit && (\r\n                                                            <th>Actions</th>\r\n                                                        )}\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {week.allocations.map(\r\n                                                        allocation => (\r\n                                                            <React.Fragment\r\n                                                                key={\r\n                                                                    allocation.id\r\n                                                                }\r\n                                                            >\r\n                                                                {/* Readonly row */}\r\n                                                                <tr>\r\n                                                                    <td>\r\n                                                                        <div className=\"d-flex align-items-center\">\r\n                                                                            {allocation.person ? (\r\n                                                                                <>\r\n                                                                                    <User\r\n                                                                                        size={\r\n                                                                                            12\r\n                                                                                        }\r\n                                                                                        className=\"me-1 text-primary\"\r\n                                                                                    />\r\n                                                                                    <span>\r\n                                                                                        {\r\n                                                                                            allocation\r\n                                                                                                .person\r\n                                                                                                .firstName\r\n                                                                                        }{' '}\r\n                                                                                        {\r\n                                                                                            allocation\r\n                                                                                                .person\r\n                                                                                                .lastName\r\n                                                                                        }\r\n                                                                                    </span>\r\n                                                                                </>\r\n                                                                            ) : allocation.team ? (\r\n                                                                                <>\r\n                                                                                    <Users\r\n                                                                                        size={\r\n                                                                                            12\r\n                                                                                        }\r\n                                                                                        className=\"me-1 text-info\"\r\n                                                                                    />\r\n                                                                                    <span>\r\n                                                                                        {\r\n                                                                                            allocation\r\n                                                                                                .team\r\n                                                                                                .name\r\n                                                                                        }\r\n                                                                                    </span>\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <span className=\"text-muted\">\r\n                                                                                    No\r\n                                                                                    resource\r\n                                                                                    assigned\r\n                                                                                </span>\r\n                                                                            )}\r\n                                                                        </div>\r\n                                                                    </td>\r\n                                                                    <td>\r\n                                                                        {allocation.description || (\r\n                                                                            <span className=\"text-muted\">\r\n                                                                                No\r\n                                                                                description\r\n                                                                            </span>\r\n                                                                        )}\r\n                                                                    </td>\r\n                                                                    <td>\r\n                                                                        <div>\r\n                                                                            <div>\r\n                                                                                {(\r\n                                                                                    allocation.hoursBAU +\r\n                                                                                    allocation.hoursNonBAU\r\n                                                                                ).toFixed(\r\n                                                                                    1\r\n                                                                                )}\r\n                                                                                h\r\n                                                                            </div>\r\n                                                                            {allocation.hoursBAU >\r\n                                                                                0 &&\r\n                                                                                allocation.hoursNonBAU >\r\n                                                                                    0 && (\r\n                                                                                    <div className=\"small text-muted\">\r\n                                                                                        {\r\n                                                                                            allocation.hoursBAU\r\n                                                                                        }\r\n                                                                                        h\r\n                                                                                        BAU\r\n                                                                                        +{' '}\r\n                                                                                        {\r\n                                                                                            allocation.hoursNonBAU\r\n                                                                                        }\r\n                                                                                        h\r\n                                                                                        NonBAU\r\n                                                                                    </div>\r\n                                                                                )}\r\n                                                                        </div>\r\n                                                                    </td>\r\n                                                                    <td>\r\n                                                                        <div>\r\n                                                                            <div className=\"small\">\r\n                                                                                {\r\n                                                                                    AllocationType[\r\n                                                                                        allocation\r\n                                                                                            .allocationType\r\n                                                                                    ]\r\n                                                                                }\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                    </td>\r\n                                                                    {canCurrentUserEdit && (\r\n                                                                        <td>\r\n                                                                            <div className=\"btn-group-inline\">\r\n                                                                                <Button\r\n                                                                                    color=\"link\"\r\n                                                                                    size=\"sm\"\r\n                                                                                    className=\"p-0 me-2\"\r\n                                                                                    onClick={() =>\r\n                                                                                        toggleAllocationEdit(\r\n                                                                                            week.globalWeekNumber,\r\n                                                                                            allocation.id\r\n                                                                                        )\r\n                                                                                    }\r\n                                                                                    title={\r\n                                                                                        allocation.isEditing\r\n                                                                                            ? 'Cancel editing'\r\n                                                                                            : 'Edit allocation'\r\n                                                                                    }\r\n                                                                                >\r\n                                                                                    {allocation.isEditing ? (\r\n                                                                                        <X\r\n                                                                                            size={\r\n                                                                                                14\r\n                                                                                            }\r\n                                                                                        />\r\n                                                                                    ) : (\r\n                                                                                        <Edit\r\n                                                                                            size={\r\n                                                                                                14\r\n                                                                                            }\r\n                                                                                        />\r\n                                                                                    )}\r\n                                                                                </Button>\r\n                                                                                {!allocation.isNew && (\r\n                                                                                    <Button\r\n                                                                                        color=\"link\"\r\n                                                                                        size=\"sm\"\r\n                                                                                        className=\"p-0 text-danger\"\r\n                                                                                        onClick={() =>\r\n                                                                                            handleDeleteAllocation(\r\n                                                                                                allocation.id\r\n                                                                                            )\r\n                                                                                        }\r\n                                                                                        disabled={\r\n                                                                                            deleteAllocation.isPending\r\n                                                                                        }\r\n                                                                                        title=\"Delete allocation\"\r\n                                                                                    >\r\n                                                                                        <Trash2\r\n                                                                                            size={\r\n                                                                                                14\r\n                                                                                            }\r\n                                                                                        />\r\n                                                                                    </Button>\r\n                                                                                )}\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    )}\r\n                                                                </tr>\r\n                                                                {/* Edit form row */}\r\n                                                                {allocation.isEditing && (\r\n                                                                    <tr>\r\n                                                                        <td\r\n                                                                            colSpan={\r\n                                                                                canCurrentUserEdit\r\n                                                                                    ? 6\r\n                                                                                    : 5\r\n                                                                            }\r\n                                                                            className=\"p-0\"\r\n                                                                        >\r\n                                                                            <AllocationEditForm\r\n                                                                                allocation={\r\n                                                                                    allocation\r\n                                                                                }\r\n                                                                                project={\r\n                                                                                    project\r\n                                                                                }\r\n                                                                                teamsData={\r\n                                                                                    teamsData\r\n                                                                                }\r\n                                                                                bulkUpdateAllocation={\r\n                                                                                    bulkUpdateAllocation\r\n                                                                                }\r\n                                                                                onUpdateField={\r\n                                                                                    updateAllocationField\r\n                                                                                }\r\n                                                                                onDelete={\r\n                                                                                    handleDeleteAllocation\r\n                                                                                }\r\n                                                                                deleteAllocation={\r\n                                                                                    deleteAllocation\r\n                                                                                }\r\n                                                                            />\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                )}\r\n                                                            </React.Fragment>\r\n                                                        )\r\n                                                    )}\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n\r\n            {/* Reason for Change Modal */}\r\n            <ReasonForChangeModal\r\n                isOpen={isReasonModalOpen}\r\n                onClose={() => {\r\n                    setIsReasonModalOpen(false);\r\n                    setPendingUpdates([]);\r\n                }}\r\n                onSubmit={submitUpdates}\r\n                description={`update ${pendingUpdates.length} allocation${pendingUpdates.length > 1 ? 's' : ''}`}\r\n                isPending={bulkUpdateAllocation.isPending}\r\n                projectStatus={project?.status}\r\n            />\r\n\r\n            {/* Delete Allocation Confirmation Modal */}\r\n            <ReasonForChangeModal\r\n                isOpen={isDeleteModalOpen}\r\n                onClose={() => {\r\n                    setIsDeleteModalOpen(false);\r\n                    setAllocationToDelete(null);\r\n                }}\r\n                onSubmit={confirmDeleteAllocation}\r\n                description=\"delete this allocation\"\r\n                isPending={deleteAllocation.isPending}\r\n                projectStatus={project?.status}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AllocationSection;\r\n","import React from 'react';\r\nimport {Button, Col, Row} from 'reactstrap';\r\nimport {\r\n    Calendar,\r\n    Clock,\r\n    Eye,\r\n    Globe,\r\n    Mail,\r\n    Phone,\r\n    Target,\r\n    User,\r\n    Users\r\n} from 'lucide-react';\r\nimport {formatDate} from '../../../lib/dateUtils';\r\nimport {breakToWords} from '../../../lib/convertCase';\r\nimport PhasesSection from './PhasesSection.tsx';\r\nimport AllocationSection from './AllocationSection.tsx';\r\nimport DisplayTag from '../../utility/DisplayTag.tsx';\r\nimport {useAuthStateManager} from '../../../hooks/useAuthStateManager';\r\nimport {\r\n    ProjectModel,\r\n    ProjectStatus,\r\n    ProjectVisibility,\r\n    EngagementContext\r\n} from '../../../types.ts';\r\n\r\ninterface ProjectDisplayProps {\r\n    project: ProjectModel;\r\n    onEdit: (project: ProjectModel) => void;\r\n}\r\n\r\nconst ProjectDisplay: React.FC<ProjectDisplayProps> = ({project, onEdit}) => {\r\n    const {personId} = useAuthStateManager();\r\n\r\n    // Check if current user can edit (using fetched data, not edited data)\r\n    const canCurrentUserEdit =\r\n        personId &&\r\n        project.people.some(\r\n            p => p.personId === personId && p.canEdit\r\n        );\r\n\r\n    return (\r\n        <div className=\"p-4\">\r\n            {/* Project Header */}\r\n            <div className=\"d-flex justify-content-between align-items-start mb-4\">\r\n                <div>\r\n                    <h2>{project.name}</h2>\r\n                    {project.description && (\r\n                        <p className=\"text-muted mb-0\">{project.description}</p>\r\n                    )}\r\n                </div>\r\n                <div>\r\n                    {canCurrentUserEdit && (\r\n                        <Button\r\n                            color=\"primary\"\r\n                            outline\r\n                            onClick={() => onEdit(project)}\r\n                            className=\"me-2\"\r\n                        >\r\n                            Edit\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Tags Section */}\r\n            {project.tags && project.tags.length > 0 && (\r\n                <div className=\"mb-4\">\r\n                    <div className=\"d-flex flex-wrap gap-2\">\r\n                        {project.tags.map(tag => (\r\n                            <DisplayTag key={tag.id || tag.name} tag={tag} />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Project Details - Compact Cards */}\r\n            <Row className=\"mb-4\">\r\n                <Col md={3}>\r\n                    <div className=\"d-flex align-items-center mb-2\">\r\n                        <Target size={16} className=\"text-muted me-2\" />\r\n                        <div>\r\n                            <small className=\"text-muted d-block\">Status</small>\r\n                            <span className=\"fw-medium\">\r\n                                {ProjectStatus[project.status]}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n                <Col md={3}>\r\n                    <div className=\"d-flex align-items-center mb-2\">\r\n                        <Calendar size={16} className=\"text-muted me-2\" />\r\n                        <div>\r\n                            <small className=\"text-muted d-block\">Start</small>\r\n                            <span className=\"fw-medium\">\r\n                                {formatDate(project.startOn)}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n                <Col md={3}>\r\n                    <div className=\"d-flex align-items-center mb-2\">\r\n                        <Calendar size={16} className=\"text-muted me-2\" />\r\n                        <div>\r\n                            <small className=\"text-muted d-block\">End</small>\r\n                            <span className=\"fw-medium\">\r\n                                {formatDate(\r\n                                    new Date(\r\n                                        new Date(project.startOn).getTime() +\r\n                                            (project.durationInWeeks * 7 - 1) *\r\n                                                24 *\r\n                                                60 *\r\n                                                60 *\r\n                                                1000\r\n                                    ).toISOString()\r\n                                )}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n                <Col md={3}>\r\n                    <div className=\"d-flex align-items-center mb-2\">\r\n                        <Globe size={16} className=\"text-muted me-2\" />\r\n                        <div>\r\n                            <small className=\"text-muted d-block\">\r\n                                Timezone\r\n                            </small>\r\n                            <span className=\"fw-medium\">\r\n                                {project.timeZone || 'Not set'}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n\r\n            {/* Secondary Details Row */}\r\n            <Row className=\"mb-4\">\r\n                <Col md={3}>\r\n                    <div className=\"d-flex align-items-center mb-2\">\r\n                        <Eye size={16} className=\"text-muted me-2\" />\r\n                        <div>\r\n                            <small className=\"text-muted d-block\">\r\n                                Visibility\r\n                            </small>\r\n                            <span className=\"fw-medium\">\r\n                                {breakToWords(\r\n                                    ProjectVisibility[project.visibility]\r\n                                )}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n                <Col md={3}>\r\n                    <div className=\"d-flex align-items-center mb-2\">\r\n                        <Clock size={16} className=\"text-muted me-2\" />\r\n                        <div>\r\n                            <small className=\"text-muted d-block\">\r\n                                Duration\r\n                            </small>\r\n                            <span className=\"fw-medium\">\r\n                                {project.durationInWeeks} week\r\n                                {project.durationInWeeks !== 1 ? 's' : ''}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n                <Col md={3}>\r\n                    <div className=\"d-flex align-items-center mb-2\">\r\n                        <Target size={16} className=\"text-muted me-2\" />\r\n                        <div>\r\n                            <small className=\"text-muted d-block\">\r\n                                Engagement Context\r\n                            </small>\r\n                            <span className=\"fw-medium\">\r\n                                {project.engagementContext === EngagementContext.BAU ? 'Business As Usual' : 'Non-Business As Usual'}\r\n                            </span>\r\n                            <div className=\"small text-muted mt-1\">\r\n                                {project.engagementContext === EngagementContext.BAU\r\n                                    ? 'Routine operational work or standard business activities'\r\n                                    : 'Change initiatives, strategic projects, or transformation efforts that are outside normal operations'\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n\r\n            {/* People Section - Compact Cards */}\r\n            {project.people.length > 0 && (\r\n                <div className=\"mb-4\">\r\n                    <div className=\"d-flex align-items-center mb-3\">\r\n                        <Users size={20} className=\"text-muted me-2\" />\r\n                        <h3 className=\"mb-0\">People</h3>\r\n                        <span className=\"badge bg-secondary ms-2\">\r\n                            {project.people.length}\r\n                        </span>\r\n                    </div>\r\n                    <Row>\r\n                        {project.people.map(\r\n                            (person: ProjectModel['people'][0]) => (\r\n                                <Col\r\n                                    md={6}\r\n                                    lg={4}\r\n                                    key={person.id}\r\n                                    className=\"mb-3\"\r\n                                >\r\n                                    <div className=\"border rounded p-3 h-100\">\r\n                                        <div className=\"d-flex align-items-start\">\r\n                                            <div className=\"bg-light rounded-circle p-2 me-3 flex-shrink-0\">\r\n                                                <User\r\n                                                    size={16}\r\n                                                    className=\"text-muted\"\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"flex-grow-1 min-width-0\">\r\n                                                <div className=\"fw-medium text-truncate\">\r\n                                                    {`${person.person.firstName} ${person.person.lastName}`}\r\n                                                </div>\r\n                                                <div className=\"small text-muted mb-1\">\r\n                                                    {person.projectRole}\r\n                                                    {person.canEdit && ' (Editor)'}\r\n                                                </div>\r\n                                                <div className=\"d-flex align-items-center small text-muted\">\r\n                                                    <Mail\r\n                                                        size={12}\r\n                                                        className=\"me-1 flex-shrink-0\"\r\n                                                    />\r\n                                                    <a\r\n                                                        href={`mailto:${person.person.email}`}\r\n                                                        className=\"text-truncate text-primary\"\r\n                                                        style={{\r\n                                                            cursor: 'pointer',\r\n                                                            textDecoration:\r\n                                                                'none',\r\n                                                            transition:\r\n                                                                'all 0.2s ease'\r\n                                                        }}\r\n                                                        onMouseEnter={e => {\r\n                                                            const target =\r\n                                                                e.target as HTMLElement;\r\n                                                            target.style.textDecoration =\r\n                                                                'underline';\r\n                                                        }}\r\n                                                        onMouseLeave={e => {\r\n                                                            const target =\r\n                                                                e.target as HTMLElement;\r\n                                                            target.style.textDecoration =\r\n                                                                'none';\r\n                                                        }}\r\n                                                        title={`Send email to ${person.person.email}`}\r\n                                                    >\r\n                                                        {person.person.email}\r\n                                                    </a>\r\n                                                </div>\r\n                                                {person.person.phoneNumber && (\r\n                                                    <div className=\"d-flex align-items-center small text-muted\">\r\n                                                        <Phone\r\n                                                            size={12}\r\n                                                            className=\"me-1 flex-shrink-0\"\r\n                                                        />\r\n                                                        <a\r\n                                                            href={`tel:${person.person.phoneNumber}`}\r\n                                                            className=\"text-truncate text-primary\"\r\n                                                            style={{\r\n                                                                cursor: 'pointer',\r\n                                                                textDecoration:\r\n                                                                    'none',\r\n                                                                transition:\r\n                                                                    'all 0.2s ease'\r\n                                                            }}\r\n                                                            onMouseEnter={e => {\r\n                                                                const target =\r\n                                                                    e.target as HTMLElement;\r\n                                                                target.style.textDecoration =\r\n                                                                    'underline';\r\n                                                            }}\r\n                                                            onMouseLeave={e => {\r\n                                                                const target =\r\n                                                                    e.target as HTMLElement;\r\n                                                                target.style.textDecoration =\r\n                                                                    'none';\r\n                                                            }}\r\n                                                            title={`Call ${person.person.phoneNumber}`}\r\n                                                        >\r\n                                                            {\r\n                                                                person.person\r\n                                                                    .phoneNumber\r\n                                                            }\r\n                                                        </a>\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </Col>\r\n                            )\r\n                        )}\r\n                    </Row>\r\n                </div>\r\n            )}\r\n\r\n            {/* Phases Section */}\r\n            <PhasesSection\r\n                project={project}\r\n                canCurrentUserEdit={!!canCurrentUserEdit}\r\n            />\r\n\r\n            {/* Resource Allocations Section */}\r\n            <AllocationSection\r\n                project={project}\r\n                canCurrentUserEdit={!!canCurrentUserEdit}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProjectDisplay;\r\n","import React, {useState, useMemo} from 'react';\r\nimport {Spinner} from 'reactstrap';\r\nimport ErrorDisplay from '../../utility/ErrorDisplay';\r\nimport emptyGuid from '../../../lib/emptyGuid';\r\nimport {useAuthStateManager} from '../../../hooks/useAuthStateManager.tsx';\r\nimport ProjectEdit from './ProjectEdit.tsx';\r\nimport ProjectDisplay from './ProjectDisplay.tsx';\r\nimport {\r\n    ProjectModel,\r\n    ProjectStatus,\r\n    ProjectVisibility,\r\n    EngagementContext,\r\n} from '../../../types.ts';\r\nimport {useGetProjectById} from '../../../api/projects/useGetProjectById.ts';\r\nimport {getWeekInfo} from '../../../lib/scheduling.ts';\r\n\r\nconst getDefaultProjectData = (\r\n    customerId: string | null | undefined,\r\n    personId: string | null | undefined\r\n): ProjectModel => {\r\n    const {mondayOfWeek: defaultStartOn, globalWeekNumber} = getWeekInfo(new Date());\r\n    const defaultStartOnDateString = defaultStartOn.toISOString().split('T')[0];\r\n    \r\n    // Calculate end date based on 1 week duration\r\n    const endDate = new Date(defaultStartOn);\r\n    endDate.setDate(endDate.getDate() + 6); // End on Sunday of the same week\r\n\r\n    return {\r\n        id: null,\r\n        name: '',\r\n        description: '',\r\n        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n        startOn: defaultStartOnDateString,\r\n        durationInWeeks: 1,\r\n        startGlobalWeekNumber: globalWeekNumber,\r\n        endGlobalWeekNumber: globalWeekNumber, // Same week for 1 week duration\r\n        endOn: endDate.toISOString(),\r\n        status: ProjectStatus.Draft,\r\n        visibility: ProjectVisibility.NonDisclosed,\r\n        engagementContext: EngagementContext.BAU,\r\n        customerId: customerId ?? emptyGuid,\r\n        phases: [],\r\n        people: personId\r\n            ? [\r\n                  {\r\n                      id: 'temp-owner',\r\n                      projectId: '',\r\n                      personId: personId,\r\n                      projectRole: 'Project Owner',\r\n                      canEdit: true,\r\n                      canEditResources: true,\r\n                      person: {\r\n                          id: personId,\r\n                          firstName: '',\r\n                          lastName: '',\r\n                          email: '',\r\n                          phoneNumber: null\r\n                      }\r\n                  }\r\n              ]\r\n            : [],\r\n        tags: []\r\n    };\r\n};\r\n\r\ninterface ProjectDetailsProps {\r\n    projectId: string | null;\r\n}\r\n\r\nconst ProjectDetails: React.FC<ProjectDetailsProps> = ({projectId}) => {\r\n    const {customerId, personId} = useAuthStateManager();\r\n\r\n    const selectedProjectId = projectId === '_' ? emptyGuid : projectId;\r\n\r\n    // State for edit mode\r\n    const [isEditing, setIsEditing] = useState(false);\r\n\r\n    // Fetch project (unless new)\r\n    const {\r\n        data: selectedProject,\r\n        isLoading: isLoadingDetails,\r\n        error: detailsError\r\n    } = useGetProjectById(selectedProjectId);\r\n\r\n    // If new project, create default model\r\n    const isNewProject = selectedProjectId === emptyGuid;\r\n    const newProjectModel = useMemo(\r\n        () =>\r\n            isNewProject\r\n                ? getDefaultProjectData(customerId, personId)\r\n                : undefined,\r\n        [isNewProject, customerId, personId]\r\n    );\r\n\r\n    // Phase edit navigation handlers\r\n\r\n\r\n    // Edit handlers\r\n    const handleEditProject = () => {\r\n        setIsEditing(true);\r\n    };\r\n\r\n    const handleEditSave = () => {\r\n        setIsEditing(false);\r\n    };\r\n\r\n    const handleEditCancel = () => {\r\n        setIsEditing(false);\r\n    };\r\n\r\n    // If new project, always in edit mode\r\n    const shouldEdit = isNewProject || isEditing;\r\n\r\n    // Project to display/edit\r\n    const projectToUse = isNewProject ? newProjectModel : selectedProject;\r\n\r\n    return (\r\n        <>\r\n            {isLoadingDetails && !isNewProject ? (\r\n                <div className=\"text-center p-4\">\r\n                    <Spinner size=\"sm\" /> Loading details...\r\n                </div>\r\n            ) : detailsError ? (\r\n                <ErrorDisplay error={detailsError} />\r\n            ) : !projectToUse ? (\r\n                <div className=\"text-center text-muted p-5\">\r\n                    Select a project from the left to view details\r\n                </div>\r\n            ) : shouldEdit ? (\r\n                <ProjectEdit\r\n                    project={projectToUse}\r\n                    onSave={handleEditSave}\r\n                    onCancel={handleEditCancel}\r\n                />\r\n            ) : (\r\n                <ProjectDisplay\r\n                    project={projectToUse}\r\n                    onEdit={handleEditProject}\r\n                />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProjectDetails;\r\n","import React from 'react';\r\nimport {Breadcrumb, BreadcrumbItem} from 'reactstrap';\r\nimport {useNavigate, useParams} from 'react-router-dom';\r\nimport ProjectDetails from './ProjectDetails';\r\n\r\nconst ProjectPage: React.FC = () => {\r\n    const {\r\n        projectId = null,\r\n    } = useParams<{\r\n        projectId: string;\r\n    }>();\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const renderContent = () => {\r\n        return <ProjectDetails projectId={projectId} />;\r\n    };\r\n\r\n    const getBreadcrumbItems = () => {\r\n        const items: Array<{text: string; onClick?: () => void}> = [\r\n            {\r\n                text: 'Projects',\r\n                onClick: () => navigate('/projects')\r\n            }\r\n        ];\r\n\r\n        if (projectId && projectId !== '_') {\r\n            items.push({\r\n                text: 'Project'\r\n                // No onClick for current page\r\n            });\r\n        } else if (projectId === '_') {\r\n            items.push({\r\n                text: 'New Project'\r\n                // No onClick for current page\r\n            });\r\n        }\r\n\r\n\r\n        return items;\r\n    };\r\n\r\n    return (\r\n        <div className=\"p-4\">\r\n            {/* Breadcrumb Navigation */}\r\n            <div className=\"mb-3\">\r\n                <Breadcrumb className=\"bg-light p-2 rounded\">\r\n                    {getBreadcrumbItems().map((item, index) => (\r\n                        <BreadcrumbItem\r\n                            key={index}\r\n                            active={!item.onClick}\r\n                            style={item.onClick ? {cursor: 'pointer'} : undefined}\r\n                            onClick={item.onClick}\r\n                        >\r\n                            {item.text}\r\n                        </BreadcrumbItem>\r\n                    ))}\r\n                </Breadcrumb>\r\n            </div>\r\n\r\n            {/* Main Content */}\r\n            {renderContent()}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProjectPage;"],"names":["WeekSelector","value","onChange","label","className","disabled","getSafeInfo","useCallback","weekNumber","getWeekInfo","getMondayFromGlobalWeek","weekInfo","useMemo","displayYear","getISOWeekYear","getWeeksForYear","year","weeks","currentMonday","getMondayOfWeek","addDays","i","isoYear","error","generatedWeeks","handleYearChange","e","weeksOfNewYear","firstWeekInfo","handleWeekChange","newGlobalWeek","newWeekInfo","jsxs","FormGroup","Label","InputGroup","jsx","Input","info","formatDate","FormText","ReasonForChangeModal","isOpen","onClose","onSubmit","description","isPending","projectStatus","reason","setReason","useState","setError","isReasonRequired","ProjectStatus","handleSubmit","trimmedReason","handleClose","Modal","Form","ModalHeader","ModalBody","Alert","ModalFooter","Button","useCreateProject","authenticatedFetch","useCreateAuthenticatedFetch","queryClient","useQueryClient","useMutation","command","response","baseUrl","handleResponse","useUpdateProject","useUpdateProjectStatus","projectId","newStatus","changeReason","useUpdateProjectVisibility","newVisibility","useChangeProjectTimeZone","timeZone","_","variables","ChangeProjectTimeZoneModal","currentTimeZone","onSuccess","control","reset","useForm","changeTimeZone","data","ErrorDisplay","Controller","field","fieldState","Fragment","TimeZoneSelect","DisplayFormError","ProjectEdit","project","onSave","onCancel","navigate","useNavigate","confirm","confirmModal","useConfirm","personId","useAuthStateManager","isReasonModalOpen","setIsReasonModalOpen","isTimeZoneModalOpen","setIsTimeZoneModalOpen","pendingStatus","setPendingStatus","updateStatus","updateVisibility","pendingVisibility","setPendingVisibility","defaultStartOn","defaultGlobalWeekNumber","defaultStartOnDateString","formData","setFormData","EngagementContext","startGlobalWeekNumber","setStartGlobalWeekNumber","projectTags","setProjectTags","isLoadingTags","useGetTags","useEffect","p","createProject","updateProject","endWeekDetails","duration","endGlobalWeekNumber","sunday","submitForm","formattedData","savedProject","newId","err","currentPeople","wasCurrentUserAnEditor","currentUserInNewList","isCurrentUserStillEditor","warningMessage","ProjectVisibility","handleTagsChange","newTags","Row","Col","prev","globalWeekNumber","PersonSelector","selectedIds","newPeople","Table","person","index","personInfo","_a","updatedPeople","TagSelector","toKebabCase","string","m","capitalize","breakToWords","DEFAULT_PHASE_COLORS","getDefaultPhaseColor","position","getNextPhaseColor","phases","FieldError","path","problemDetails","ProblemDetailsError","isProblemDetails","fieldError","fieldErrors","errorMessage","useBulkPhaseUpdate","useDeletePhase","phaseId","PhasesSection","canCurrentUserEdit","expandedPhases","setExpandedPhases","editablePhases","setEditablePhases","pendingUpdates","setPendingUpdates","isDeleteModalOpen","setIsDeleteModalOpen","phaseToDelete","setPhaseToDelete","bulkPhaseUpdate","deletePhase","phase","togglePhaseExpansion","newSet","addNewPhase","defaultStartWeek","defaultStartMonday","defaultEndWeek","defaultEndMonday","defaultEndSunday","newPhase","PhaseType","togglePhaseEdit","updatePhaseField","updatePhaseWeekData","durationInWeeks","constrainedStartWeek","startMonday","endMonday","endSunday","getPhaseWeekInfo","startWeekInfo","endWeekInfo","getMaxPhaseEndWeek","phaseEndWeeks","getChangedFields","changes","original","handleUpdate","phasesToUpdate","updates","submitUpdates","handleDeletePhase","confirmDeletePhase","hasEditingPhases","phaseTypeOptions","Save","Plus","maxEndWeek","projectEndWeek","projectEndWeekInfo","maxEndWeekInfo","isExpanded","React","ChevronDown","ChevronRight","Select","opt","selected","X","Edit","Trash2","WeekDisplay","displayWeekInfo","useGetProjectAllocations","options","url","queryKey","useQuery","useDeleteProjectAllocation","allocationId","useBulkUpdateAllocation","AllocationEditForm","allocation","teamsData","bulkUpdateAllocation","onUpdateField","onDelete","deleteAllocation","teamOptions","team","assignmentType","AllocationType","AllocationSection","weekAllocations","setWeekAllocations","allocationToDelete","setAllocationToDelete","allocationsData","isLoading","allocationsError","useGetPagedTeams","editableAllocations","toggleWeekExpansion","week","addNewAllocation","weekStart","weekEnd","defaultHoursBAU","defaultHoursNonBAU","newAllocation","toggleAllocationEdit","a","updateAllocationField","allocationsToUpdate","handleDeleteAllocation","confirmDeleteAllocation","hasEditingAllocations","Spinner","Calendar","User","Users","ProjectDisplay","onEdit","tag","DisplayTag","Target","Globe","Eye","Clock","Mail","target","Phone","getDefaultProjectData","customerId","endDate","emptyGuid","ProjectDetails","selectedProjectId","isEditing","setIsEditing","selectedProject","isLoadingDetails","detailsError","useGetProjectById","isNewProject","newProjectModel","handleEditProject","handleEditSave","handleEditCancel","shouldEdit","projectToUse","ProjectPage","useParams","renderContent","getBreadcrumbItems","items","Breadcrumb","item","BreadcrumbItem"],"mappings":"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"}