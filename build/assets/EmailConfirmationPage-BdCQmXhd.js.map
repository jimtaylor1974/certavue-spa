{"version":3,"file":"EmailConfirmationPage-BdCQmXhd.js","sources":["../../src/api/auth/useEmailConfirmation.ts","../../src/components/accounts/EmailConfirmationPage.tsx"],"sourcesContent":["import {\r\n    useMutation,\r\n    UseMutationOptions,\r\n    UseMutationResult\r\n} from '@tanstack/react-query';\r\nimport {EmailConfirmationCommand} from '../../types';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport baseUrl from '../baseUrl';\r\nimport {handleResponse} from '../handleResponse';\r\n\r\nconst useEmailConfirmation = (\r\n    options?: UseMutationOptions<string, Error, EmailConfirmationCommand>\r\n): UseMutationResult<string, Error, EmailConfirmationCommand> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    return useMutation({\r\n        mutationFn: async (command: EmailConfirmationCommand) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/auth/email-confirmation`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify(command)\r\n                }\r\n            );\r\n            return handleResponse(response);\r\n        },\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useEmailConfirmation;\r\n","import {useState, useEffect} from 'react';\r\nimport {useSearchParams, useNavigate} from 'react-router-dom';\r\nimport ErrorDisplay from '../utility/ErrorDisplay';\r\nimport Spinner from '../utility/Spinner';\r\nimport useEmailConfirmation from '../../api/auth/useEmailConfirmation';\r\nimport {EmailConfirmationCommand} from '../../types';\r\nimport {toast} from 'react-toastify';\r\nimport {useAuthStateManager} from '../../hooks/useAuthStateManager';\r\n\r\nconst EmailConfirmationPage = () => {\r\n    const {setSignInRedirect} = useAuthStateManager();\r\n    const navigate = useNavigate();\r\n    const [apiError, setApiError] = useState<unknown>(null);\r\n    const [awaitingResponse, setAwaitingResponse] = useState(false);\r\n\r\n    const [searchParams] = useSearchParams();\r\n    const userId = searchParams.get('user_id');\r\n    const token = searchParams.get('token');\r\n    const redir = searchParams.get('redir');\r\n\r\n    const emailConfirmationMutation = useEmailConfirmation();\r\n\r\n    useEffect(() => {\r\n        if (userId && token) {\r\n            if (redir) {\r\n                setSignInRedirect(redir);\r\n            }\r\n\r\n            setAwaitingResponse(true);\r\n            const command: EmailConfirmationCommand = {userId, token};\r\n            emailConfirmationMutation\r\n                .mutateAsync(command)\r\n                .then(() => {\r\n                    toast.success('Email verified.');\r\n                    navigate('/login');\r\n                })\r\n                .catch((error: unknown) => {\r\n                    setApiError(error);\r\n                })\r\n                .finally(() => {\r\n                    setAwaitingResponse(false);\r\n                });\r\n        } else {\r\n            navigate('/login');\r\n        }\r\n    }, [userId, token, navigate, redir, setSignInRedirect]);\r\n\r\n    if (awaitingResponse) {\r\n        return (\r\n            <>\r\n                <h1 className=\"h1\">Email confirmation</h1>\r\n                <Spinner />\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (apiError) {\r\n        return (\r\n            <>\r\n                <h1 className=\"h1\">Email confirmation</h1>\r\n                <ErrorDisplay\r\n                    error={apiError}\r\n                    title=\"Unable to verify email\"\r\n                    onDismiss={() => navigate('/')}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    return <h1 className=\"h1\">Email confirmation</h1>;\r\n};\r\n\r\nexport default EmailConfirmationPage;\r\n"],"names":["useEmailConfirmation","options","authenticatedFetch","useCreateAuthenticatedFetch","useMutation","command","response","baseUrl","handleResponse","EmailConfirmationPage","setSignInRedirect","useAuthStateManager","navigate","useNavigate","apiError","setApiError","useState","awaitingResponse","setAwaitingResponse","searchParams","useSearchParams","userId","token","redir","emailConfirmationMutation","useEffect","toast","error","jsxs","Fragment","jsx","Spinner","ErrorDisplay"],"mappings":"0JAUA,MAAMA,EACFC,GAC6D,CAC7D,MAAMC,EAAqBC,EAA4B,EAEvD,OAAOC,EAAY,CACf,WAAY,MAAOC,GAAsC,CACrD,MAAMC,EAAW,MAAMJ,EACnB,GAAGK,CAAO,+BACV,CACI,OAAQ,OACR,QAAS,CAAC,eAAgB,kBAAkB,EAC5C,KAAM,KAAK,UAAUF,CAAO,CAAA,CAEpC,EACA,OAAOG,EAAeF,CAAQ,CAClC,EACA,GAAGL,CAAA,CACN,CACL,ECpBMQ,EAAwB,IAAM,CAC1B,KAAA,CAAC,kBAAAC,CAAiB,EAAIC,EAAoB,EAC1CC,EAAWC,EAAY,EACvB,CAACC,EAAUC,CAAW,EAAIC,EAAAA,SAAkB,IAAI,EAChD,CAACC,EAAkBC,CAAmB,EAAIF,EAAAA,SAAS,EAAK,EAExD,CAACG,CAAY,EAAIC,EAAgB,EACjCC,EAASF,EAAa,IAAI,SAAS,EACnCG,EAAQH,EAAa,IAAI,OAAO,EAChCI,EAAQJ,EAAa,IAAI,OAAO,EAEhCK,EAA4BxB,EAAqB,EA2BvD,OAzBAyB,EAAAA,UAAU,IAAM,CACZ,GAAIJ,GAAUC,EAAO,CACbC,GACAb,EAAkBa,CAAK,EAG3BL,EAAoB,EAAI,EAClB,MAAAb,EAAoC,CAAC,OAAAgB,EAAQ,MAAAC,CAAK,EACxDE,EACK,YAAYnB,CAAO,EACnB,KAAK,IAAM,CACRqB,EAAM,QAAQ,iBAAiB,EAC/Bd,EAAS,QAAQ,CAAA,CACpB,EACA,MAAOe,GAAmB,CACvBZ,EAAYY,CAAK,CAAA,CACpB,EACA,QAAQ,IAAM,CACXT,EAAoB,EAAK,CAAA,CAC5B,CAAA,MAELN,EAAS,QAAQ,CACrB,EACD,CAACS,EAAQC,EAAOV,EAAUW,EAAOb,CAAiB,CAAC,EAElDO,EAGQW,EAAA,KAAAC,WAAA,CAAA,SAAA,CAACC,EAAA,IAAA,KAAA,CAAG,UAAU,KAAK,SAAkB,qBAAA,QACpCC,EAAQ,CAAA,CAAA,CAAA,EACb,EAIJjB,EAGQc,EAAA,KAAAC,WAAA,CAAA,SAAA,CAACC,EAAA,IAAA,KAAA,CAAG,UAAU,KAAK,SAAkB,qBAAA,EACrCA,EAAA,IAACE,EAAA,CACG,MAAOlB,EACP,MAAM,yBACN,UAAW,IAAMF,EAAS,GAAG,CAAA,CAAA,CACjC,EACJ,EAIAkB,EAAAA,IAAA,KAAA,CAAG,UAAU,KAAK,SAAkB,qBAAA,CAChD"}