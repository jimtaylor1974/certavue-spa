{"version":3,"file":"useGetCompanyNonWorkingDays-NPHF93O9.js","sources":["../../src/api/working-hours/useGetBaseWorkingHours.ts","../../src/api/working-hours/useGetCompanyNonWorkingDays.ts"],"sourcesContent":["import { UseQueryOptions, UseQueryResult, useQuery } from '@tanstack/react-query';\r\nimport baseUrl from '../baseUrl';\r\nimport { useCreateAuthenticatedFetch } from '../useCreateAuthenticatedFetch';\r\nimport { handleResponse } from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\nimport { BaseWorkingHours } from './models';\r\n\r\ntype BaseWorkingHoursQueryOptions = Omit<\r\n    UseQueryOptions<\r\n        BaseWorkingHours,\r\n        Error | ProblemDetailsError,\r\n        BaseWorkingHours,\r\n        readonly unknown[]\r\n    >,\r\n    'queryKey' | 'queryFn'\r\n>;\r\n\r\nconst useGetBaseWorkingHours = (\r\n    options?: BaseWorkingHoursQueryOptions\r\n): UseQueryResult<BaseWorkingHours, Error | ProblemDetailsError> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n    const queryKey = ['baseWorkingHours'];\r\n\r\n    const queryFn = async (): Promise<BaseWorkingHours> => {\r\n        const response = await authenticatedFetch(`${baseUrl}/api/working-hours/base`);\r\n        return handleResponse<BaseWorkingHours>(response);\r\n    };\r\n\r\n    return useQuery({\r\n        queryKey,\r\n        queryFn,\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useGetBaseWorkingHours;","import { UseQueryOptions, UseQueryResult, useQuery } from '@tanstack/react-query';\r\nimport baseUrl from '../baseUrl';\r\nimport { useCreateAuthenticatedFetch } from '../useCreateAuthenticatedFetch';\r\nimport { handleResponse } from '../handleResponse';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\nimport { CompanyNonWorkingDay } from './models';\r\n\r\ntype CompanyNonWorkingDaysQueryOptions = Omit<\r\n    UseQueryOptions<\r\n        CompanyNonWorkingDay[],\r\n        Error | ProblemDetailsError,\r\n        CompanyNonWorkingDay[],\r\n        readonly unknown[]\r\n    >,\r\n    'queryKey' | 'queryFn'\r\n>;\r\n\r\nconst useGetCompanyNonWorkingDays = (\r\n    options?: CompanyNonWorkingDaysQueryOptions\r\n): UseQueryResult<CompanyNonWorkingDay[], Error | ProblemDetailsError> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n    const queryKey = ['companyNonWorkingDays'];\r\n\r\n    const queryFn = async (): Promise<CompanyNonWorkingDay[]> => {\r\n        const response = await authenticatedFetch(`${baseUrl}/api/working-hours/company-non-working-days`);\r\n        return handleResponse<CompanyNonWorkingDay[]>(response);\r\n    };\r\n\r\n    return useQuery({\r\n        queryKey,\r\n        queryFn,\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useGetCompanyNonWorkingDays;"],"names":["useGetBaseWorkingHours","options","authenticatedFetch","useCreateAuthenticatedFetch","useQuery","response","baseUrl","handleResponse","useGetCompanyNonWorkingDays"],"mappings":"6DAiBM,MAAAA,EACFC,GACgE,CAChE,MAAMC,EAAqBC,EAA4B,EAQvD,OAAOC,EAAS,CACZ,SARa,CAAC,kBAAkB,EAShC,QAPY,SAAuC,CACnD,MAAMC,EAAW,MAAMH,EAAmB,GAAGI,CAAO,yBAAyB,EAC7E,OAAOC,EAAiCF,CAAQ,CACpD,EAKI,GAAGJ,CAAA,CACN,CACL,EChBMO,EACFP,GACsE,CACtE,MAAMC,EAAqBC,EAA4B,EAQvD,OAAOC,EAAS,CACZ,SARa,CAAC,uBAAuB,EASrC,QAPY,SAA6C,CACzD,MAAMC,EAAW,MAAMH,EAAmB,GAAGI,CAAO,6CAA6C,EACjG,OAAOC,EAAuCF,CAAQ,CAC1D,EAKI,GAAGJ,CAAA,CACN,CACL"}