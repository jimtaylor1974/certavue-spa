{"version":3,"file":"LoginPage-DYIOSP-K.js","sources":["../../src/api/auth/useResendEmailConfirmationEmail.ts","../../src/api/auth/useLoginWithEmail.ts","../../src/api/auth/useAuthHooks.ts","../../src/components/accounts/LoginPage.tsx"],"sourcesContent":["import {ResendEmailConfirmationEmailCommand, EmptyResult} from '../../types';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport baseUrl from '../baseUrl';\r\nimport {handleResponse} from '../handleResponse';\r\nimport {\r\n    useMutation,\r\n    UseMutationResult,\r\n    UseMutationOptions\r\n} from '@tanstack/react-query';\r\n\r\nconst useResendEmailConfirmationEmail = (\r\n    options?: UseMutationOptions<\r\n        EmptyResult,\r\n        Error,\r\n        ResendEmailConfirmationEmailCommand\r\n    >\r\n): UseMutationResult<\r\n    EmptyResult,\r\n    Error,\r\n    ResendEmailConfirmationEmailCommand\r\n> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    return useMutation({\r\n        mutationFn: async (command: ResendEmailConfirmationEmailCommand) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/auth/resend-email-confirmation-email`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify(command)\r\n                }\r\n            );\r\n            return handleResponse(response);\r\n        },\r\n        ...options\r\n    });\r\n};\r\n\r\nexport default useResendEmailConfirmationEmail;\r\n","import {LoginWithEmailModel} from '../../types';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\nimport {useCreateAuthenticatedFetch} from '../useCreateAuthenticatedFetch';\r\nimport baseUrl from '../baseUrl';\r\nimport {handleResponse} from '../handleResponse';\r\nimport {\r\n    useMutation,\r\n    UseMutationResult,\r\n    UseMutationOptions\r\n} from '@tanstack/react-query';\r\n\r\nexport const useLoginWithEmail = (\r\n    options?: UseMutationOptions<\r\n        void,\r\n        Error | ProblemDetailsError,\r\n        LoginWithEmailModel\r\n    >\r\n): UseMutationResult<\r\n    void,\r\n    Error | ProblemDetailsError,\r\n    LoginWithEmailModel\r\n> => {\r\n    const authenticatedFetch = useCreateAuthenticatedFetch();\r\n\r\n    return useMutation({\r\n        mutationFn: async (loginWithEmail: LoginWithEmailModel) => {\r\n            const response = await authenticatedFetch(\r\n                `${baseUrl}/api/auth/login-with-email`,\r\n                {\r\n                    method: 'POST',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify(loginWithEmail)\r\n                }\r\n            );\r\n            return handleResponse(response);\r\n        },\r\n        ...options\r\n    });\r\n};\r\n","import {useMutation, UseMutationResult} from '@tanstack/react-query';\r\nimport {AuthTokens} from '../../types';\r\nimport {handleResponse} from '../handleResponse';\r\nimport baseUrl from '../baseUrl';\r\nimport ProblemDetailsError from '../ProblemDetailsError';\r\n\r\nexport type PasswordLoginRequest = {\r\n    username: string;\r\n    password: string;\r\n};\r\n\r\nconst makeTokenRequest = async (formData: FormData): Promise<AuthTokens> => {\r\n    const response = await fetch(`${baseUrl}/api/auth/tokens`, {\r\n        method: 'POST',\r\n        body: formData\r\n    });\r\n\r\n    return handleResponse<AuthTokens>(response);\r\n};\r\n\r\nconst loginWithPassword = async (\r\n    credentials: PasswordLoginRequest\r\n): Promise<AuthTokens> => {\r\n    const formData = new FormData();\r\n    formData.append('grant_type', 'password');\r\n    formData.append('username', credentials.username);\r\n    formData.append('password', credentials.password);\r\n\r\n    return makeTokenRequest(formData);\r\n};\r\n\r\nexport function usePasswordLogin(): UseMutationResult<AuthTokens, Error | ProblemDetailsError, PasswordLoginRequest> {\r\n    return useMutation({\r\n        mutationFn: loginWithPassword,\r\n        retry: 0 // No retries for login attempts\r\n    });\r\n}\r\n","import React, {useState} from 'react';\r\nimport {Link, useLocation} from 'react-router-dom';\r\nimport {Controller, useForm} from 'react-hook-form';\r\nimport {toast} from 'react-toastify';\r\nimport {\r\n    Button,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Card,\r\n    CardBody,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    TabContent,\r\n    TabPane,\r\n    Alert\r\n} from 'reactstrap';\r\nimport classnames from 'classnames';\r\nimport {LogIn} from 'lucide-react';\r\nimport {useAuthStateManager} from '../../hooks/useAuthStateManager';\r\nimport SocialLogins from '../social_logins/SocialLogins';\r\nimport DisplayFormError from '../utility/DisplayFormError';\r\nimport {\r\n    AuthTokens,\r\n    LoginWithEmailModel,\r\n    ResendEmailConfirmationEmailCommand\r\n} from '../../types';\r\nimport useResendEmailConfirmationEmail from '../../api/auth/useResendEmailConfirmationEmail';\r\nimport {useLoginWithEmail} from '../../api/auth/useLoginWithEmail';\r\nimport unknownErrorToString from '../../lib/unknownErrorToString';\r\nimport ErrorDisplay from '../utility/ErrorDisplay';\r\nimport useLocalStorage from '../../hooks/useLocalStorage';\r\nimport CheckFromEmailSpamJunkWarning from '../utility/CheckFromEmailSpamJunkWarning';\r\nimport useAppSettings from '../../hooks/useAppSettings';\r\nimport {\r\n    PasswordLoginRequest,\r\n    usePasswordLogin\r\n} from '../../api/auth/useAuthHooks';\r\nimport Certavue from '../utility/Certavue';\r\n\r\nconst LoginPage = () => {\r\n    const {onAuthenticated, redirectOnAuthenticated, removeSignInRedirect} =\r\n        useAuthStateManager();\r\n    const {state} = useLocation();\r\n    const [apiError, setApiError] = useState<unknown>(null);\r\n    const [awaitingResponse, setAwaitingResponse] = useState(false);\r\n    const [activeTab, setActiveTab] = useLocalStorage('LoginTab', 'password');\r\n    const {auth} = useAppSettings();\r\n\r\n    const hasSocialLogins = auth.microsoft.enabled || auth.google.enabled;\r\n\r\n    const {\r\n        control,\r\n        handleSubmit,\r\n        formState: {errors},\r\n        clearErrors\r\n    } = useForm<LoginWithEmailModel>({\r\n        defaultValues: {email: ''},\r\n        mode: 'onChange'\r\n    });\r\n\r\n    const [passwordLoginRequest, setPasswordLoginRequest] =\r\n        useState<PasswordLoginRequest>({\r\n            username: '',\r\n            password: ''\r\n        });\r\n\r\n    const passwordLoginMutation = usePasswordLogin();\r\n    const resendEmailConfirmationEmailMutation =\r\n        useResendEmailConfirmationEmail({\r\n            onSuccess: () => {\r\n                toast.success('Confirmation email has been resent.');\r\n            },\r\n            onError: (error: unknown) => {\r\n                setApiError(unknownErrorToString(error));\r\n            }\r\n        });\r\n\r\n    const loginWithEmailMutation = useLoginWithEmail({\r\n        onSuccess: () => {\r\n            removeSignInRedirect();\r\n            toast.success('Please check your email for a login link.');\r\n        },\r\n        onError: (error: unknown) => {\r\n            setApiError(unknownErrorToString(error));\r\n        }\r\n    });\r\n\r\n    const onSubmitSuccess = (authResponse: AuthTokens) => {\r\n        onAuthenticated(authResponse);\r\n        redirectOnAuthenticated((state as {redir?: string | null})?.redir);\r\n    };\r\n\r\n    const onPasswordFormSubmit = async (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n        setAwaitingResponse(true);\r\n        try {\r\n            const result =\r\n                await passwordLoginMutation.mutateAsync(passwordLoginRequest);\r\n            onSubmitSuccess(result);\r\n        } catch (error: unknown) {\r\n            setApiError(error);\r\n        } finally {\r\n            setAwaitingResponse(false);\r\n        }\r\n    };\r\n\r\n    const onEmailFormSubmit = (data: LoginWithEmailModel) => {\r\n        setApiError(null);\r\n        clearErrors();\r\n\r\n        const redirectUrl = removeSignInRedirect();\r\n\r\n        const loginWithEmail: LoginWithEmailModel = {\r\n            email: data.email,\r\n            redir: redirectUrl\r\n        };\r\n\r\n        loginWithEmailMutation.mutate(loginWithEmail);\r\n    };\r\n\r\n    const toggleTab = (tab: string) => {\r\n        if (activeTab !== tab) {\r\n            setActiveTab(tab);\r\n            setApiError(null);\r\n            clearErrors();\r\n        }\r\n    };\r\n\r\n    const resendEmailConfirmationEmail = async () => {\r\n        setAwaitingResponse(true);\r\n        try {\r\n            const command: ResendEmailConfirmationEmailCommand = {\r\n                email: passwordLoginRequest.username\r\n            };\r\n            await resendEmailConfirmationEmailMutation.mutateAsync(command);\r\n        } catch (error: unknown) {\r\n            setApiError(error);\r\n        } finally {\r\n            setAwaitingResponse(false);\r\n        }\r\n    };\r\n\r\n    // Determine if the error is due to unconfirmed email\r\n    const isUnconfirmedEmail =\r\n        ((apiError as {problemDetails?: {authError?: {error?: string}}})\r\n            ?.problemDetails?.authError?.error ?? '') === 'unconfirmed_email';\r\n\r\n    return (\r\n        <Container className=\"my-5\">\r\n            <Row className=\"justify-content-center\">\r\n                <Col xs={12} md={8} lg={6}>\r\n                    <div className=\"text-center mb-4\">\r\n                        <Certavue />\r\n                        <h2 className=\"mt-2\">Welcome Back!</h2>\r\n                        <p className=\"text-muted\">\r\n                            Log in to continue to certavue.com\r\n                        </p>\r\n                    </div>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <Nav tabs className=\"justify-content-center mb-4\">\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        className={classnames({\r\n                                            active: activeTab === 'password'\r\n                                        })}\r\n                                        onClick={() => toggleTab('password')}\r\n                                    >\r\n                                        Password Login\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink\r\n                                        className={classnames({\r\n                                            active: activeTab === 'email'\r\n                                        })}\r\n                                        onClick={() => toggleTab('email')}\r\n                                    >\r\n                                        Email Login\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                            <TabContent activeTab={activeTab}>\r\n                                <TabPane tabId=\"password\">\r\n                                    <Form onSubmit={onPasswordFormSubmit}>\r\n                                        <FormGroup>\r\n                                            <Label for=\"username\">Email</Label>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                id=\"username\"\r\n                                                placeholder=\"Enter your email\"\r\n                                                value={\r\n                                                    passwordLoginRequest.username\r\n                                                }\r\n                                                onChange={e =>\r\n                                                    setPasswordLoginRequest({\r\n                                                        ...passwordLoginRequest,\r\n                                                        username: e.target.value\r\n                                                    })\r\n                                                }\r\n                                            />\r\n                                        </FormGroup>\r\n                                        <FormGroup>\r\n                                            <Label for=\"password\">\r\n                                                Password\r\n                                            </Label>\r\n                                            <Input\r\n                                                type=\"password\"\r\n                                                id=\"password\"\r\n                                                placeholder=\"Enter your password\"\r\n                                                value={\r\n                                                    passwordLoginRequest.password\r\n                                                }\r\n                                                onChange={e =>\r\n                                                    setPasswordLoginRequest({\r\n                                                        ...passwordLoginRequest,\r\n                                                        password: e.target.value\r\n                                                    })\r\n                                                }\r\n                                            />\r\n                                        </FormGroup>\r\n                                        <ErrorDisplay error={apiError} />\r\n                                        {isUnconfirmedEmail && (\r\n                                            <Alert color=\"warning\">\r\n                                                <p className=\"mb-2\">\r\n                                                    Your email address is not\r\n                                                    confirmed. Please confirm\r\n                                                    your email to proceed.\r\n                                                </p>\r\n                                                <Button\r\n                                                    color=\"warning\"\r\n                                                    onClick={\r\n                                                        resendEmailConfirmationEmail\r\n                                                    }\r\n                                                    disabled={awaitingResponse}\r\n                                                >\r\n                                                    Resend Confirmation Email\r\n                                                </Button>\r\n                                            </Alert>\r\n                                        )}\r\n                                        <div className=\"d-flex justify-content-between align-items-center\">\r\n                                            <Link\r\n                                                to=\"/forgot-password\"\r\n                                                className=\"text-muted\"\r\n                                            >\r\n                                                Forgot password?\r\n                                            </Link>\r\n                                            <Button\r\n                                                color=\"primary\"\r\n                                                type=\"submit\"\r\n                                                disabled={awaitingResponse}\r\n                                            >\r\n                                                <LogIn\r\n                                                    size={16}\r\n                                                    className=\"me-2\"\r\n                                                />\r\n                                                Log In\r\n                                            </Button>\r\n                                        </div>\r\n                                    </Form>\r\n                                </TabPane>\r\n                                <TabPane tabId=\"email\">\r\n                                    <Form\r\n                                        onSubmit={handleSubmit(\r\n                                            onEmailFormSubmit\r\n                                        )}\r\n                                    >\r\n                                        <FormGroup>\r\n                                            <Label for=\"email\">Email</Label>\r\n                                            <Controller\r\n                                                control={control}\r\n                                                name=\"email\"\r\n                                                rules={{\r\n                                                    required:\r\n                                                        'Email is required',\r\n                                                    pattern: {\r\n                                                        value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                                                        message:\r\n                                                            'Invalid email address'\r\n                                                    }\r\n                                                }}\r\n                                                render={({field}) => (\r\n                                                    <Input\r\n                                                        type=\"email\"\r\n                                                        id=\"email\"\r\n                                                        placeholder=\"Enter your email\"\r\n                                                        {...field}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                            <DisplayFormError\r\n                                                error={errors.email}\r\n                                                fieldDisplayName=\"Email\"\r\n                                            />\r\n                                        </FormGroup>\r\n                                        <CheckFromEmailSpamJunkWarning />\r\n                                        <ErrorDisplay error={apiError} />\r\n                                        <div className=\"text-end\">\r\n                                            <Button\r\n                                                color=\"primary\"\r\n                                                type=\"submit\"\r\n                                                disabled={awaitingResponse}\r\n                                            >\r\n                                                Send Login Link\r\n                                            </Button>\r\n                                        </div>\r\n                                    </Form>\r\n                                </TabPane>\r\n                            </TabContent>\r\n                            {hasSocialLogins && (\r\n                                <div className=\"text-center mt-4\">\r\n                                    <p className=\"text-muted\">Or log in with</p>\r\n                                    <SocialLogins registration={false} />\r\n                                </div>\r\n                            )}\r\n                        </CardBody>\r\n                    </Card>\r\n                    <div className=\"text-center mt-4\">\r\n                        <p className=\"text-muted\">\r\n                            Don't have an account?{' '}\r\n                            <Link to=\"/sign-up\">Create one now</Link>\r\n                        </p>\r\n                    </div>\r\n                </Col>\r\n                <Col xs={12} md={8} lg={6}>\r\n                    <h3 className=\"text-lavender mb-3\">Need something else?</h3>\r\n\r\n                    <div className=\"mb-4\">\r\n                        <h4 className=\"text-mulled-wine\">New to certavue?</h4>\r\n                        <p>\r\n                            If your company already uses certavue and you don’t\r\n                            yet have your own login, quickly{' '}\r\n                            <Link\r\n                                to=\"/sign-up\"\r\n                                className=\"text-primary font-weight-bold\"\r\n                            >\r\n                                Sign up here\r\n                            </Link>{' '}\r\n                            to get started.\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <h4 className=\"text-mulled-wine\">\r\n                            Want to bring certavue to your company?\r\n                        </h4>\r\n                        <p>\r\n                            Easily{' '}\r\n                            <Link\r\n                                to=\"/register-company\"\r\n                                className=\"text-primary font-weight-bold\"\r\n                            >\r\n                                Register your Company\r\n                            </Link>{' '}\r\n                            to begin simplifying your organization's\r\n                            transformation management today.\r\n                        </p>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"names":["useResendEmailConfirmationEmail","options","authenticatedFetch","useCreateAuthenticatedFetch","useMutation","command","response","baseUrl","handleResponse","useLoginWithEmail","loginWithEmail","makeTokenRequest","formData","loginWithPassword","credentials","usePasswordLogin","LoginPage","onAuthenticated","redirectOnAuthenticated","removeSignInRedirect","useAuthStateManager","state","useLocation","apiError","setApiError","useState","awaitingResponse","setAwaitingResponse","activeTab","setActiveTab","useLocalStorage","auth","useAppSettings","hasSocialLogins","control","handleSubmit","errors","clearErrors","useForm","passwordLoginRequest","setPasswordLoginRequest","passwordLoginMutation","resendEmailConfirmationEmailMutation","toast","error","unknownErrorToString","loginWithEmailMutation","onSubmitSuccess","authResponse","onPasswordFormSubmit","event","result","onEmailFormSubmit","data","redirectUrl","toggleTab","tab","resendEmailConfirmationEmail","isUnconfirmedEmail","_b","_a","Container","jsxs","Row","Col","jsx","Certavue","Card","CardBody","Nav","NavItem","NavLink","classnames","TabContent","TabPane","Form","FormGroup","Label","Input","e","ErrorDisplay","Alert","Button","Link","LogIn","Controller","field","DisplayFormError","CheckFromEmailSpamJunkWarning","SocialLogins"],"mappings":"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"}