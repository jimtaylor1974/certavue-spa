{"version":3,"file":"TagSelector-DVPGv5ZX.js","sources":["../../node_modules/date-fns/constants.js","../../node_modules/date-fns/constructFrom.js","../../node_modules/date-fns/toDate.js","../../node_modules/date-fns/addDays.js","../../node_modules/date-fns/_lib/defaultOptions.js","../../node_modules/date-fns/startOfWeek.js","../../node_modules/date-fns/startOfISOWeek.js","../../node_modules/date-fns/getISOWeekYear.js","../../node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js","../../node_modules/date-fns/_lib/normalizeDates.js","../../node_modules/date-fns/startOfDay.js","../../node_modules/date-fns/differenceInCalendarDays.js","../../node_modules/date-fns/startOfISOWeekYear.js","../../node_modules/date-fns/isDate.js","../../node_modules/date-fns/isValid.js","../../node_modules/date-fns/differenceInDays.js","../../node_modules/date-fns/getISOWeek.js","../../node_modules/date-fns/getYear.js","../../node_modules/date-fns/parseISO.js","../../src/components/utility/TagSelector.tsx"],"sourcesContent":["/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n","import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfISOWeek} function options.\n */\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date, options) {\n  return startOfWeek(date, { ...options, weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeekYear} function options.\n */\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { toDate } from \"../toDate.js\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { constructFrom } from \"../constructFrom.js\";\n\nexport function normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === \"object\"),\n  );\n  return dates.map(normalize);\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInDay } from \"./constants.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { getISOWeekYear } from \"./getISOWeekYear.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\n\n/**\n * The {@link startOfISOWeekYear} function options.\n */\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date, options) {\n  const year = getISOWeekYear(date, options);\n  const fourthOfJanuary = constructFrom(options?.in || date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { isDate } from \"./isDate.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  return !((!isDate(date) && typeof date !== \"number\") || isNaN(+toDate(date)));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\n\n/**\n * The {@link differenceInDays} function options.\n */\n\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full days according to the local timezone\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n *\n * @example\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n * //=> 92\n */\nexport function differenceInDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const sign = compareLocalAsc(laterDate_, earlierDate_);\n  const difference = Math.abs(\n    differenceInCalendarDays(laterDate_, earlierDate_),\n  );\n\n  laterDate_.setDate(laterDate_.getDate() - sign * difference);\n\n  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n  const isLastDayNotFull = Number(\n    compareLocalAsc(laterDate_, earlierDate_) === -sign,\n  );\n\n  const result = sign * (difference - isLastDayNotFull);\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\nfunction compareLocalAsc(laterDate, earlierDate) {\n  const diff =\n    laterDate.getFullYear() - earlierDate.getFullYear() ||\n    laterDate.getMonth() - earlierDate.getMonth() ||\n    laterDate.getDate() - earlierDate.getDate() ||\n    laterDate.getHours() - earlierDate.getHours() ||\n    laterDate.getMinutes() - earlierDate.getMinutes() ||\n    laterDate.getSeconds() - earlierDate.getSeconds() ||\n    laterDate.getMilliseconds() - earlierDate.getMilliseconds();\n\n  if (diff < 0) return -1;\n  if (diff > 0) return 1;\n\n  // Return 0 if diff is 0; return NaN if diff is NaN\n  return diff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInDays;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeek} function options.\n */\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getYear} function options.\n */\n\n/**\n * @name getYear\n * @category Year Helpers\n * @summary Get the year of the given date.\n *\n * @description\n * Get the year of the given date.\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The year\n *\n * @example\n * // Which year is 2 July 2014?\n * const result = getYear(new Date(2014, 6, 2))\n * //=> 2014\n */\nexport function getYear(date, options) {\n  return toDate(date, options?.in).getFullYear();\n}\n\n// Fallback for modularized imports:\nexport default getYear;\n","import {\n  millisecondsInHour,\n  millisecondsInMinute,\n} from \"./constants.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link parseISO} function options.\n */\n\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n * @param options - An object with options\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport function parseISO(argument, options) {\n  const invalidDate = () => constructFrom(options?.in, NaN);\n\n  const additionalDigits = options?.additionalDigits ?? 2;\n  const dateStrings = splitDateString(argument);\n\n  let date;\n  if (dateStrings.date) {\n    const parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(+date)) return invalidDate();\n\n  const timestamp = +date;\n  let time = 0;\n  let offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n    if (isNaN(time)) return invalidDate();\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n    if (isNaN(offset)) return invalidDate();\n  } else {\n    const tmpDate = new Date(timestamp + time);\n    const result = toDate(0, options?.in);\n    result.setFullYear(\n      tmpDate.getUTCFullYear(),\n      tmpDate.getUTCMonth(),\n      tmpDate.getUTCDate(),\n    );\n    result.setHours(\n      tmpDate.getUTCHours(),\n      tmpDate.getUTCMinutes(),\n      tmpDate.getUTCSeconds(),\n      tmpDate.getUTCMilliseconds(),\n    );\n    return result;\n  }\n\n  return toDate(timestamp + time + offset, options?.in);\n}\n\nconst patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/,\n};\n\nconst dateRegex =\n  /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nconst timeRegex =\n  /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nconst timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  const dateStrings = {};\n  const array = dateString.split(patterns.dateTimeDelimiter);\n  let timeString;\n\n  // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(\n        dateStrings.date.length,\n        dateString.length,\n      );\n    }\n  }\n\n  if (timeString) {\n    const token = patterns.timezone.exec(timeString);\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], \"\");\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  const regex = new RegExp(\n    \"^(?:(\\\\d{4}|[+-]\\\\d{\" +\n      (4 + additionalDigits) +\n      \"})|(\\\\d{2}|[+-]\\\\d{\" +\n      (2 + additionalDigits) +\n      \"})$)\",\n  );\n\n  const captures = dateString.match(regex);\n  // Invalid ISO-formatted year\n  if (!captures) return { year: NaN, restDateString: \"\" };\n\n  const year = captures[1] ? parseInt(captures[1]) : null;\n  const century = captures[2] ? parseInt(captures[2]) : null;\n\n  // either year or century is null, not both\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length),\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n\n  const captures = dateString.match(dateRegex);\n  // Invalid ISO-formatted string\n  if (!captures) return new Date(NaN);\n\n  const isWeekDate = !!captures[4];\n  const dayOfYear = parseDateUnit(captures[1]);\n  const month = parseDateUnit(captures[2]) - 1;\n  const day = parseDateUnit(captures[3]);\n  const week = parseDateUnit(captures[4]);\n  const dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    const date = new Date(0);\n    if (\n      !validateDate(year, month, day) ||\n      !validateDayOfYearDate(year, dayOfYear)\n    ) {\n      return new Date(NaN);\n    }\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  const captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  const hours = parseTimeUnit(captures[1]);\n  const minutes = parseTimeUnit(captures[2]);\n  const seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return (\n    hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000\n  );\n}\n\nfunction parseTimeUnit(value) {\n  return (value && parseFloat(value.replace(\",\", \".\"))) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === \"Z\") return 0;\n\n  const captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n\n  const sign = captures[1] === \"+\" ? -1 : 1;\n  const hours = parseInt(captures[2]);\n  const minutes = (captures[3] && parseInt(captures[3])) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  const date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  const fourthOfJanuaryDay = date.getUTCDay() || 7;\n  const diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\n\n// Validation functions\n\n// February is null to handle the leap year (using ||)\nconst daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\nfunction validateDate(year, month, date) {\n  return (\n    month >= 0 &&\n    month <= 11 &&\n    date >= 1 &&\n    date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28))\n  );\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return (\n    seconds >= 0 &&\n    seconds < 60 &&\n    minutes >= 0 &&\n    minutes < 60 &&\n    hours >= 0 &&\n    hours < 25\n  );\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}\n\n// Fallback for modularized imports:\nexport default parseISO;\n","import React, { useState, useRef } from 'react';\r\nimport { Input, Button, Dropdown, DropdownToggle, DropdownMenu, Spinner } from 'reactstrap';\r\nimport { Plus, Search } from 'lucide-react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { TagModel } from '../../types';\r\nimport { useGetTags } from '../../api/tags/useGetTags';\r\nimport DisplayTag from './DisplayTag';\r\nimport { PREDEFINED_COLOURS, PREDEFINED_ICONS, TAG_DEFAULTS, normalizeTagInput, finalizeTagName } from '../../lib/tags';\r\n\r\n// Utility type for tags with temporary IDs for new entities\r\ninterface TagWithTempId extends Omit<TagModel, 'id'> {\r\n    id: string | null; // null for existing tags from server, tempId for new tags\r\n    tempId?: string;   // temporary ID for new tags to help with editing\r\n}\r\n\r\ninterface TagSelectorProps {\r\n    selectedTags: (TagModel | TagWithTempId)[];\r\n    onChange: (tags: (TagModel | TagWithTempId)[]) => void;\r\n    placeholder?: string;\r\n    isLoading?: boolean;\r\n    className?: string;\r\n    allowCreate?: boolean;\r\n}\r\n\r\n\r\n\r\nconst TagSelector: React.FC<TagSelectorProps> = ({\r\n    selectedTags,\r\n    onChange,\r\n    placeholder = \"Select tags...\",\r\n    isLoading = false,\r\n    className = \"\",\r\n    allowCreate = false\r\n}) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [editingTag, setEditingTag] = useState<(TagModel | TagWithTempId) | null>(null);\r\n    const inputRef = useRef<HTMLInputElement | null>(null);\r\n    const dropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n    const { data: availableTags = [], isLoading: isLoadingTags } = useGetTags(true);\r\n\r\n    // Filter available tags based on search term and exclude already selected tags\r\n    const filteredTags = availableTags.filter(tag => {\r\n        const isSelected = selectedTags.some(selected => selected.id === tag.id && selected.id !== null);\r\n        const matchesSearch = tag.name.toLowerCase().includes(searchTerm.toLowerCase());\r\n        return !isSelected && matchesSearch;\r\n    });\r\n\r\n    // Check if search term could be a new tag\r\n    const canCreateNewTag = allowCreate &&\r\n        searchTerm.trim() &&\r\n        !availableTags.some(tag => tag.name.toLowerCase() === searchTerm.toLowerCase()) &&\r\n        !selectedTags.some(tag => tag.name.toLowerCase() === searchTerm.toLowerCase());\r\n\r\n    const handleTagSelect = (tag: TagModel | TagWithTempId) => {\r\n        onChange([...selectedTags, tag]);\r\n        setSearchTerm('');\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const handleTagRemove = (tagToRemove: TagModel | TagWithTempId) => {\r\n        onChange(selectedTags.filter(tag => {\r\n            // Handle both regular tags and tags with tempId\r\n            if ('tempId' in tagToRemove && 'tempId' in tag) {\r\n                return tag.tempId !== tagToRemove.tempId;\r\n            }\r\n            return tag.id !== tagToRemove.id;\r\n        }));\r\n    };\r\n\r\n    const handleCreateNewTag = () => {\r\n        const finalizedName = finalizeTagName(searchTerm.trim());\r\n        if (!finalizedName) return; // Don't create empty tags\r\n        \r\n        const newTag: TagWithTempId = {\r\n            id: null, // Null ID indicates a new tag\r\n            name: finalizedName,\r\n            colour: PREDEFINED_COLOURS[Math.floor(Math.random() * PREDEFINED_COLOURS.length)],\r\n            icon: TAG_DEFAULTS.icon,\r\n            isActive: TAG_DEFAULTS.isActive,\r\n            tempId: uuidv4() // Add temporary ID for editing purposes\r\n        };\r\n\r\n        onChange([...selectedTags, newTag]);\r\n        setSearchTerm('');\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const handleEditTag = (tag: TagWithTempId) => {\r\n        if (allowCreate && tag.id === null) { // Only allow editing of new tags when creation is enabled\r\n            setEditingTag({ ...tag });\r\n        }\r\n    };\r\n\r\n    const handleSaveEditedTag = () => {\r\n        if (!editingTag) return;\r\n\r\n        // Finalize the name when saving (removes leading/trailing hyphens)\r\n        const finalizedTag: TagWithTempId = {\r\n            ...editingTag,\r\n            name: finalizeTagName(editingTag.name)\r\n        };\r\n\r\n        // Don't save if the finalized name is empty\r\n        if (!finalizedTag.name) return;\r\n\r\n        // Update the selected tags using tempId for identification\r\n        const updatedSelectedTags = selectedTags.map(tag => {\r\n            if ('tempId' in tag && 'tempId' in editingTag && tag.tempId === editingTag.tempId) {\r\n                return finalizedTag;\r\n            } else if (tag.id && editingTag.id && tag.id === editingTag.id) {\r\n                return finalizedTag;\r\n            }\r\n            return tag;\r\n        });\r\n        onChange(updatedSelectedTags);\r\n\r\n        setEditingTag(null);\r\n    };\r\n\r\n    const handleInputFocus = () => {\r\n        setIsOpen(true);\r\n    };\r\n\r\n    const handleInputKeyDown = (e: React.KeyboardEvent) => {\r\n        if (e.key === 'Enter' && canCreateNewTag) {\r\n            e.preventDefault();\r\n            handleCreateNewTag();\r\n        } else if (e.key === 'Escape') {\r\n            setIsOpen(false);\r\n            setSearchTerm('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={`tag-selector ${className}`} ref={dropdownRef}>\r\n            {/* Selected Tags Display */}\r\n            {selectedTags.length > 0 && (\r\n                <div className=\"selected-tags mb-2 d-flex flex-wrap gap-1\">\r\n                    {selectedTags.map(tag => (\r\n                        <DisplayTag\r\n                            key={tag.id || `new-${tag.name}`}\r\n                            tag={tag}\r\n                            size=\"sm\"\r\n                            onRemove={() => handleTagRemove(tag)}\r\n                            onClick={() => handleEditTag(tag)}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            )}\r\n\r\n            {/* Search Input */}\r\n            <Dropdown isOpen={isOpen} toggle={() => setIsOpen(!isOpen)}>\r\n                <DropdownToggle tag=\"div\" className=\"w-100\">\r\n                    <div className=\"position-relative\">\r\n                        <Input\r\n                            innerRef={inputRef}\r\n                            type=\"text\"\r\n                            placeholder={placeholder}\r\n                            value={searchTerm}\r\n                            onChange={(e) => setSearchTerm(e.target.value)}\r\n                            onFocus={handleInputFocus}\r\n                            onKeyDown={handleInputKeyDown}\r\n                            className=\"pe-4\"\r\n                            disabled={isLoading}\r\n                        />\r\n                        <div className=\"position-absolute end-0 top-50 translate-middle-y pe-2\">\r\n                            {isLoading || isLoadingTags ? (\r\n                                <Spinner size=\"sm\" />\r\n                            ) : (\r\n                                <Search size={16} className=\"text-muted\" />\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </DropdownToggle>\r\n\r\n                <DropdownMenu className=\"w-100\" style={{ maxHeight: '300px', overflowY: 'auto' }}>\r\n                    {/* Filtered existing tags */}\r\n                    {filteredTags.map(tag => (\r\n                        <div\r\n                            key={tag.id}\r\n                            className=\"dropdown-item d-flex align-items-center gap-2\"\r\n                            onClick={() => handleTagSelect(tag)}\r\n                            style={{ cursor: 'pointer' }}\r\n                        >\r\n                            <DisplayTag tag={tag} size=\"sm\" showIcon={true} />\r\n                        </div>\r\n                    ))}\r\n\r\n                    {/* Create new tag option */}\r\n                    {canCreateNewTag && (\r\n                        <div\r\n                            className=\"dropdown-item d-flex align-items-center gap-2 border-top\"\r\n                            onClick={handleCreateNewTag}\r\n                            style={{ cursor: 'pointer' }}\r\n                        >\r\n                            <Plus size={16} className=\"text-primary\" />\r\n                            <span className=\"text-primary\">Create \"{searchTerm}\"</span>\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* No results message */}\r\n                    {filteredTags.length === 0 && !canCreateNewTag && searchTerm && (\r\n                        <div className=\"dropdown-item text-muted\">\r\n                            No tags found\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Loading message */}\r\n                    {isLoadingTags && (\r\n                        <div className=\"dropdown-item text-muted d-flex align-items-center gap-2\">\r\n                            <Spinner size=\"sm\" />\r\n                            Loading tags...\r\n                        </div>\r\n                    )}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n\r\n            {/* Edit Pending Tag Modal */}\r\n            {editingTag && (\r\n                <div className=\"modal show d-block\" style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>\r\n                    <div className=\"modal-dialog modal-md\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\">Edit Tag</h5>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btn-close\"\r\n                                    onClick={() => setEditingTag(null)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <div className=\"mb-3\">\r\n                                    <label className=\"form-label\">Name</label>\r\n                                    <Input\r\n                                        value={editingTag.name}\r\n                                        onChange={(e) => {\r\n                                            const normalizedName = normalizeTagInput(e.target.value);\r\n                                            setEditingTag({\r\n                                                ...editingTag,\r\n                                                name: normalizedName\r\n                                            });\r\n                                        }}\r\n                                        placeholder=\"tag-name\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label className=\"form-label\">Color</label>\r\n                                    <div className=\"mb-2\">\r\n                                        <label className=\"form-label small text-muted\">Preset Colors</label>\r\n                                        <div className=\"d-flex flex-wrap gap-2\">\r\n                                            {PREDEFINED_COLOURS.map(color => (\r\n                                                <button\r\n                                                    key={color}\r\n                                                    type=\"button\"\r\n                                                    className={`btn p-0 border ${editingTag.colour === color ? 'border-dark border-2' : 'border-light'}`}\r\n                                                    style={{\r\n                                                        width: '30px',\r\n                                                        height: '30px',\r\n                                                        backgroundColor: color,\r\n                                                        borderRadius: '50%'\r\n                                                    }}\r\n                                                    onClick={() => setEditingTag({\r\n                                                        ...editingTag,\r\n                                                        colour: color\r\n                                                    })}\r\n                                                />\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div>\r\n                                        <label className=\"form-label small text-muted\">Custom Color</label>\r\n                                        <div className=\"d-flex align-items-center gap-2\">\r\n                                            <input\r\n                                                type=\"color\"\r\n                                                className=\"form-control form-control-color\"\r\n                                                value={editingTag.colour}\r\n                                                onChange={(e) => setEditingTag({\r\n                                                    ...editingTag,\r\n                                                    colour: e.target.value\r\n                                                })}\r\n                                                style={{ width: '50px', height: '38px' }}\r\n                                            />\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                value={editingTag.colour}\r\n                                                onChange={(e) => setEditingTag({\r\n                                                    ...editingTag,\r\n                                                    colour: e.target.value\r\n                                                })}\r\n                                                placeholder=\"#FF6B6B\"\r\n                                                style={{ fontFamily: 'monospace' }}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label className=\"form-label\">Icon</label>\r\n                                    <div className=\"d-flex flex-wrap gap-2\" style={{ maxHeight: '200px', overflowY: 'auto' }}>\r\n                                        {PREDEFINED_ICONS.map(({ name, component: IconComponent }) => (\r\n                                            <button\r\n                                                key={name}\r\n                                                type=\"button\"\r\n                                                className={`btn btn-outline-secondary d-flex align-items-center justify-content-center ${editingTag.icon === name ? 'active' : ''}`}\r\n                                                style={{\r\n                                                    width: '40px',\r\n                                                    height: '40px',\r\n                                                    padding: '0'\r\n                                                }}\r\n                                                onClick={() => setEditingTag({\r\n                                                    ...editingTag,\r\n                                                    icon: name\r\n                                                })}\r\n                                                title={name}\r\n                                            >\r\n                                                <IconComponent size={20} />\r\n                                            </button>\r\n                                        ))}\r\n                                    </div>\r\n                                    <div className=\"mt-2\">\r\n                                        <small className=\"text-muted\">\r\n                                            Selected: {editingTag.icon || 'Tag'}\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <Button color=\"primary\" onClick={handleSaveEditedTag}>\r\n                                    Save\r\n                                </Button>\r\n                                <Button color=\"secondary\" onClick={() => setEditingTag(null)}>\r\n                                    Cancel\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TagSelector;"],"names":["millisecondsInWeek","millisecondsInDay","millisecondsInMinute","millisecondsInHour","millisecondsInSecond","constructFromSymbol","constructFrom","date","value","toDate","argument","context","addDays","amount","options","_date","defaultOptions","getDefaultOptions","startOfWeek","weekStartsOn","_b","_a","_d","_c","day","diff","startOfISOWeek","getISOWeekYear","year","fourthOfJanuaryOfNextYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","getTimezoneOffsetInMilliseconds","utcDate","normalizeDates","dates","normalize","startOfDay","differenceInCalendarDays","laterDate","earlierDate","laterDate_","earlierDate_","laterStartOfDay","earlierStartOfDay","laterTimestamp","earlierTimestamp","startOfISOWeekYear","fourthOfJanuary","isDate","isValid","differenceInDays","sign","compareLocalAsc","difference","isLastDayNotFull","result","getISOWeek","getYear","parseISO","invalidDate","dateStrings","splitDateString","parseYearResult","parseYear","parseDate","timestamp","time","offset","parseTime","parseTimezone","tmpDate","patterns","dateRegex","timeRegex","timezoneRegex","dateString","array","timeString","token","additionalDigits","regex","captures","century","isWeekDate","dayOfYear","parseDateUnit","month","week","dayOfWeek","validateWeekDate","dayOfISOWeekYear","validateDate","validateDayOfYearDate","hours","parseTimeUnit","minutes","seconds","validateTime","timezoneString","validateTimezone","isoWeekYear","fourthOfJanuaryDay","daysInMonths","isLeapYearIndex","_year","_hours","TagSelector","selectedTags","onChange","placeholder","isLoading","className","allowCreate","isOpen","setIsOpen","useState","searchTerm","setSearchTerm","editingTag","setEditingTag","inputRef","useRef","dropdownRef","availableTags","isLoadingTags","useGetTags","filteredTags","tag","isSelected","selected","matchesSearch","canCreateNewTag","handleTagSelect","handleTagRemove","tagToRemove","handleCreateNewTag","finalizedName","finalizeTagName","newTag","PREDEFINED_COLOURS","TAG_DEFAULTS","uuidv4","handleEditTag","handleSaveEditedTag","finalizedTag","updatedSelectedTags","handleInputFocus","handleInputKeyDown","e","jsx","DisplayTag","jsxs","Dropdown","DropdownToggle","Input","Spinner","Search","DropdownMenu","Plus","normalizedName","normalizeTagInput","color","name","IconComponent","Button"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]}